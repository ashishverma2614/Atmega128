
MP3Player.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ce  00800100  0000031e  000003b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ae  008001ce  008001ce  00000480  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bd7  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f4  00000000  00000000  0000111f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000457  00000000  00000000  00001a13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bd  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a3  00000000  00000000  0000241d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000026c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3f c0       	rjmp	.+126    	; 0xc8 <__vector_18>
  4a:	00 00       	nop
  4c:	4f c0       	rjmp	.+158    	; 0xec <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	6b c0       	rjmp	.+214    	; 0x154 <__vector_31>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e1       	ldi	r30, 0x1E	; 30
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 3c       	cpi	r26, 0xCE	; 206
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	23 e0       	ldi	r18, 0x03	; 3
  b4:	ae ec       	ldi	r26, 0xCE	; 206
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 37       	cpi	r26, 0x7C	; 124
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	06 d1       	rcall	.+524    	; 0x2d0 <main>
  c4:	2a c1       	rjmp	.+596    	; 0x31a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_18>:

/************************************************************************/
/* Serial Communication                                                 */
/************************************************************************/
ISR(USART0_RX_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
	char ch;

	ch = UDR0;
  d4:	8c b1       	in	r24, 0x0c	; 12

	buf[0] = ch;
  d6:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <buf>

	rx_complete = 1;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <rx_complete>
}
  e0:	8f 91       	pop	r24
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <__vector_19>:

ISR(USART0_UDRE_vect)
{
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	0b b6       	in	r0, 0x3b	; 59
  f8:	0f 92       	push	r0
  fa:	2f 93       	push	r18
  fc:	3f 93       	push	r19
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
	UDR0 = tx_buf[tx_index];
 106:	e0 91 7a 03 	lds	r30, 0x037A	; 0x80037a <tx_index>
 10a:	f0 91 7b 03 	lds	r31, 0x037B	; 0x80037b <tx_index+0x1>
 10e:	e9 51       	subi	r30, 0x19	; 25
 110:	fe 4f       	sbci	r31, 0xFE	; 254
 112:	80 81       	ld	r24, Z
 114:	8c b9       	out	0x0c, r24	; 12

	if(tx_buf[tx_index++] == 0)
 116:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <tx_index>
 11a:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <tx_index+0x1>
 11e:	9c 01       	movw	r18, r24
 120:	2f 5f       	subi	r18, 0xFF	; 255
 122:	3f 4f       	sbci	r19, 0xFF	; 255
 124:	30 93 7b 03 	sts	0x037B, r19	; 0x80037b <tx_index+0x1>
 128:	20 93 7a 03 	sts	0x037A, r18	; 0x80037a <tx_index>
 12c:	fc 01       	movw	r30, r24
 12e:	e9 51       	subi	r30, 0x19	; 25
 130:	fe 4f       	sbci	r31, 0xFE	; 254
 132:	80 81       	ld	r24, Z
 134:	81 11       	cpse	r24, r1
 136:	01 c0       	rjmp	.+2      	; 0x13a <__vector_19+0x4e>
	UCSR0B &= ~(1 << UDRIE0);
 138:	55 98       	cbi	0x0a, 5	; 10
}
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	3f 91       	pop	r19
 144:	2f 91       	pop	r18
 146:	0f 90       	pop	r0
 148:	0b be       	out	0x3b, r0	; 59
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <__vector_31>:

ISR(USART1_UDRE_vect)
{
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	0b b6       	in	r0, 0x3b	; 59
 160:	0f 92       	push	r0
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
	UDR1 = tx1_buf[tx1_index++];
 16e:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <tx1_index>
 172:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <tx1_index+0x1>
 176:	9c 01       	movw	r18, r24
 178:	2f 5f       	subi	r18, 0xFF	; 255
 17a:	3f 4f       	sbci	r19, 0xFF	; 255
 17c:	30 93 d2 01 	sts	0x01D2, r19	; 0x8001d2 <tx1_index+0x1>
 180:	20 93 d1 01 	sts	0x01D1, r18	; 0x8001d1 <tx1_index>
 184:	fc 01       	movw	r30, r24
 186:	ed 52       	subi	r30, 0x2D	; 45
 188:	fe 4f       	sbci	r31, 0xFE	; 254
 18a:	80 81       	ld	r24, Z
 18c:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>

	if(tx1_index == tx1_len){
 190:	20 91 d1 01 	lds	r18, 0x01D1	; 0x8001d1 <tx1_index>
 194:	30 91 d2 01 	lds	r19, 0x01D2	; 0x8001d2 <tx1_index+0x1>
 198:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <__data_end>
 19c:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <__data_end+0x1>
 1a0:	28 17       	cp	r18, r24
 1a2:	39 07       	cpc	r19, r25
 1a4:	41 f4       	brne	.+16     	; 0x1b6 <__vector_31+0x62>
		UCSR1B &= ~(1 << UDRIE1);
 1a6:	ea e9       	ldi	r30, 0x9A	; 154
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	8f 7d       	andi	r24, 0xDF	; 223
 1ae:	80 83       	st	Z, r24
		disp_menu = 1;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <disp_menu>
	}
}
 1b6:	ff 91       	pop	r31
 1b8:	ef 91       	pop	r30
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	3f 91       	pop	r19
 1c0:	2f 91       	pop	r18
 1c2:	0f 90       	pop	r0
 1c4:	0b be       	out	0x3b, r0	; 59
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <UART0_Puts>:
/************************************************************************/
void UART0_Puts(char str[])
{
	int i=0;

	while(str[i] != 0)
 1d0:	fc 01       	movw	r30, r24
 1d2:	20 81       	ld	r18, Z
 1d4:	22 23       	and	r18, r18
 1d6:	91 f0       	breq	.+36     	; 0x1fc <UART0_Puts+0x2c>
	tx_buf[tx_index++] = str[i++];
 1d8:	20 91 7a 03 	lds	r18, 0x037A	; 0x80037a <tx_index>
 1dc:	30 91 7b 03 	lds	r19, 0x037B	; 0x80037b <tx_index+0x1>
 1e0:	c9 01       	movw	r24, r18
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <tx_index+0x1>
 1e8:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <tx_index>
 1ec:	81 91       	ld	r24, Z+
 1ee:	d9 01       	movw	r26, r18
 1f0:	a9 51       	subi	r26, 0x19	; 25
 1f2:	be 4f       	sbci	r27, 0xFE	; 254
 1f4:	8c 93       	st	X, r24
/************************************************************************/
void UART0_Puts(char str[])
{
	int i=0;

	while(str[i] != 0)
 1f6:	80 81       	ld	r24, Z
 1f8:	81 11       	cpse	r24, r1
 1fa:	ee cf       	rjmp	.-36     	; 0x1d8 <UART0_Puts+0x8>
 1fc:	08 95       	ret

000001fe <UART_Init>:
	tx_buf[tx_index++] = str[i++];
}

void UART_Init(void)
{
	UCSR0B = 0x98;
 1fe:	88 e9       	ldi	r24, 0x98	; 152
 200:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;
 202:	96 e0       	ldi	r25, 0x06	; 6
 204:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0L = 103;
 208:	87 e6       	ldi	r24, 0x67	; 103
 20a:	89 b9       	out	0x09, r24	; 9

	UCSR1B = 0x08;
 20c:	28 e0       	ldi	r18, 0x08	; 8
 20e:	20 93 9a 00 	sts	0x009A, r18	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = 0x06;
 212:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	UBRR1L = 103;
 216:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 21a:	08 95       	ret

0000021c <SendCommand>:
void SendCommand(unsigned char cmd, unsigned int param) // command consists of 6 successive protocol
{
	int checksum = 0;
	int i;

	tx1_buf[0] = 0x7E;
 21c:	e3 ed       	ldi	r30, 0xD3	; 211
 21e:	f1 e0       	ldi	r31, 0x01	; 1
 220:	9e e7       	ldi	r25, 0x7E	; 126
 222:	90 83       	st	Z, r25
	tx1_buf[1] = 0xFF;
 224:	9f ef       	ldi	r25, 0xFF	; 255
 226:	91 83       	std	Z+1, r25	; 0x01
	tx1_buf[2] = 0x06;
 228:	96 e0       	ldi	r25, 0x06	; 6
 22a:	92 83       	std	Z+2, r25	; 0x02
	tx1_buf[3] = cmd;
 22c:	83 83       	std	Z+3, r24	; 0x03
	tx1_buf[4] = 0x00;
 22e:	14 82       	std	Z+4, r1	; 0x04
	tx1_buf[5] = (char)(param >> 8);
 230:	75 83       	std	Z+5, r23	; 0x05
	tx1_buf[6] = (char)(param & 0xFF);
 232:	66 83       	std	Z+6, r22	; 0x06
 234:	e4 ed       	ldi	r30, 0xD4	; 212
 236:	f1 e0       	ldi	r31, 0x01	; 1
 238:	4a ed       	ldi	r20, 0xDA	; 218
 23a:	51 e0       	ldi	r21, 0x01	; 1
	UBRR1L = 103;
}

void SendCommand(unsigned char cmd, unsigned int param) // command consists of 6 successive protocol
{
	int checksum = 0;
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
	tx1_buf[4] = 0x00;
	tx1_buf[5] = (char)(param >> 8);
	tx1_buf[6] = (char)(param & 0xFF);
	
	for(i=1; i<=6; i++)
	checksum += tx1_buf[i];
 240:	21 91       	ld	r18, Z+
 242:	82 0f       	add	r24, r18
 244:	91 1d       	adc	r25, r1
	tx1_buf[3] = cmd;
	tx1_buf[4] = 0x00;
	tx1_buf[5] = (char)(param >> 8);
	tx1_buf[6] = (char)(param & 0xFF);
	
	for(i=1; i<=6; i++)
 246:	e4 17       	cp	r30, r20
 248:	f5 07       	cpc	r31, r21
 24a:	d1 f7       	brne	.-12     	; 0x240 <SendCommand+0x24>
	checksum += tx1_buf[i];

	checksum = -checksum;
 24c:	91 95       	neg	r25
 24e:	81 95       	neg	r24
 250:	91 09       	sbc	r25, r1
	
	tx1_buf[7] = (char)(checksum >> 8);
 252:	e3 ed       	ldi	r30, 0xD3	; 211
 254:	f1 e0       	ldi	r31, 0x01	; 1
 256:	97 83       	std	Z+7, r25	; 0x07
	tx1_buf[8] = (char)(checksum & 0xFF);
 258:	80 87       	std	Z+8, r24	; 0x08
	tx1_buf[9] = 0xEF;
 25a:	8f ee       	ldi	r24, 0xEF	; 239
 25c:	81 87       	std	Z+9, r24	; 0x09

	tx1_len = 10;
 25e:	8a e0       	ldi	r24, 0x0A	; 10
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <__data_end+0x1>
 266:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>
	tx1_index = 0;
 26a:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <tx1_index+0x1>
 26e:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <tx1_index>

	UCSR1B |= (1 << UDRIE1);
 272:	ea e9       	ldi	r30, 0x9A	; 154
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	80 62       	ori	r24, 0x20	; 32
 27a:	80 83       	st	Z, r24

	rx_complete = 0;
 27c:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <rx_complete>
 280:	08 95       	ret

00000282 <DisplayMenu>:
}

void DisplayMenu(void)
{
	UART0_Puts("\r\n===========================");
 282:	8a e0       	ldi	r24, 0x0A	; 10
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	a4 df       	rcall	.-184    	; 0x1d0 <UART0_Puts>
	UART0_Puts("\r\n= 1 : Play Music          =");
 288:	88 e2       	ldi	r24, 0x28	; 40
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	a1 df       	rcall	.-190    	; 0x1d0 <UART0_Puts>
	UART0_Puts("\r\n= 2 : Stop Music          =");
 28e:	86 e4       	ldi	r24, 0x46	; 70
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	9e df       	rcall	.-196    	; 0x1d0 <UART0_Puts>
	UART0_Puts("\r\n= 3 : Pause Music         =");
 294:	84 e6       	ldi	r24, 0x64	; 100
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	9b df       	rcall	.-202    	; 0x1d0 <UART0_Puts>
	UART0_Puts("\r\n= 4 : Next Music          =");
 29a:	82 e8       	ldi	r24, 0x82	; 130
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	98 df       	rcall	.-208    	; 0x1d0 <UART0_Puts>
	UART0_Puts("\r\n= 5 : Previous Music      =");
 2a0:	80 ea       	ldi	r24, 0xA0	; 160
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	95 df       	rcall	.-214    	; 0x1d0 <UART0_Puts>
	UART0_Puts("\r\n===========================");
 2a6:	8a e0       	ldi	r24, 0x0A	; 10
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	92 df       	rcall	.-220    	; 0x1d0 <UART0_Puts>
 2ac:	8e eb       	ldi	r24, 0xBE	; 190
	UART0_Puts("\r\n\r\nCommand > ");
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	8f df       	rcall	.-226    	; 0x1d0 <UART0_Puts>
 2b2:	e0 91 7a 03 	lds	r30, 0x037A	; 0x80037a <tx_index>

	tx_buf[tx_index] = 0;
 2b6:	f0 91 7b 03 	lds	r31, 0x037B	; 0x80037b <tx_index+0x1>
 2ba:	e9 51       	subi	r30, 0x19	; 25
 2bc:	fe 4f       	sbci	r31, 0xFE	; 254
 2be:	10 82       	st	Z, r1
 2c0:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <tx_index+0x1>
	tx_index = 0;
 2c4:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <tx_index>
 2c8:	55 9a       	sbi	0x0a, 5	; 10
 2ca:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <disp_menu>

	UCSR0B |= (1 << UDRIE0);

	disp_menu = 0;
 2ce:	08 95       	ret

000002d0 <main>:
 2d0:	96 df       	rcall	.-212    	; 0x1fe <UART_Init>
 2d2:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d4:	83 ec       	ldi	r24, 0xC3	; 195
 2d6:	99 e0       	ldi	r25, 0x09	; 9
 2d8:	21 50       	subi	r18, 0x01	; 1
 2da:	80 40       	sbci	r24, 0x00	; 0
 2dc:	90 40       	sbci	r25, 0x00	; 0
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <main+0x8>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <main+0x12>
 2e2:	00 00       	nop
{
	UART_Init();

	_delay_ms(200); // initial waiting for starting serial communication

	SendCommand(CMD_TF, 2);
 2e4:	62 e0       	ldi	r22, 0x02	; 2
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	89 e0       	ldi	r24, 0x09	; 9
 2ea:	98 df       	rcall	.-208    	; 0x21c <SendCommand>
	
	SREG |= 0x80;
 2ec:	8f b7       	in	r24, 0x3f	; 63
 2ee:	80 68       	ori	r24, 0x80	; 128
 2f0:	8f bf       	out	0x3f, r24	; 63
	
	while(1){
		if(rx_complete == 1)
		SendCommand(cmd_list[buf[0] - '0' - 1], 0);
 2f2:	c3 e1       	ldi	r28, 0x13	; 19
 2f4:	d3 e0       	ldi	r29, 0x03	; 3
	SendCommand(CMD_TF, 2);
	
	SREG |= 0x80;
	
	while(1){
		if(rx_complete == 1)
 2f6:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <rx_complete>
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	41 f4       	brne	.+16     	; 0x30e <main+0x3e>
		SendCommand(cmd_list[buf[0] - '0' - 1], 0);
 2fe:	e8 81       	ld	r30, Y
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	e1 53       	subi	r30, 0x31	; 49
 304:	ff 4f       	sbci	r31, 0xFF	; 255
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	87 df       	rcall	.-242    	; 0x21c <SendCommand>

		if(disp_menu == 1)
 30e:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <disp_menu>
 312:	81 30       	cpi	r24, 0x01	; 1
		DisplayMenu();
 314:	81 f7       	brne	.-32     	; 0x2f6 <main+0x26>
 316:	b5 df       	rcall	.-150    	; 0x282 <DisplayMenu>
 318:	ee cf       	rjmp	.-36     	; 0x2f6 <main+0x26>

0000031a <_exit>:
 31a:	f8 94       	cli

0000031c <__stop_program>:
 31c:	ff cf       	rjmp	.-2      	; 0x31c <__stop_program>
