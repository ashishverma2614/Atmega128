
SwitchLED1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000827  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078c  00000000  00000000  000009f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000270  00000000  00000000  00001183  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000013f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bb  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000064  00000000  00000000  000017d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001837  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	25 c0       	rjmp	.+74     	; 0xe6 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
int main(void)
{
    /* Replace with your application code */
	unsigned led = 0x01; // INIT LED
	unsigned state = 0; // state of SW, 0 is off(false)
	DDRD = 0x00; // set portD as input(external pull-up resist)
  9e:	11 ba       	out	0x11, r1	; 17
	DDRB = 0xFF; // set portB as output 
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	87 bb       	out	0x17, r24	; 23

int main(void)
{
    /* Replace with your application code */
	unsigned led = 0x01; // INIT LED
	unsigned state = 0; // state of SW, 0 is off(false)
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0


int main(void)
{
    /* Replace with your application code */
	unsigned led = 0x01; // INIT LED
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	30 e0       	ldi	r19, 0x00	; 0
	PORTB = led; // write led

	// de-bounce chattering by detecting LED state
	if ((PIND & 0x04) == 0x00 && state == 0) // 0x04 is position of SW1
	{
		state = 1;
  ac:	51 e0       	ldi	r21, 0x01	; 1
  ae:	40 e0       	ldi	r20, 0x00	; 0
			led = 0x01; // change led position to the first
		else
			led <<= 1; // move LED from LSB to MSB
	}
	if ((PIND & 0x04) != 0x00 && state == 1)
		state = 0;
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	60 e0       	ldi	r22, 0x00	; 0
	DDRD = 0x00; // set portD as input(external pull-up resist)
	DDRB = 0xFF; // set portB as output 

    while (1) 
    {
	PORTB = led; // write led
  b4:	28 bb       	out	0x18, r18	; 24

	// de-bounce chattering by detecting LED state
	if ((PIND & 0x04) == 0x00 && state == 0) // 0x04 is position of SW1
  b6:	82 99       	sbic	0x10, 2	; 16
  b8:	0e c0       	rjmp	.+28     	; 0xd6 <main+0x38>
  ba:	00 97       	sbiw	r24, 0x00	; 0
  bc:	61 f4       	brne	.+24     	; 0xd6 <main+0x38>
	{
		state = 1;
		if (led == 0x80)
  be:	20 38       	cpi	r18, 0x80	; 128
  c0:	31 05       	cpc	r19, r1
  c2:	29 f0       	breq	.+10     	; 0xce <main+0x30>
			led = 0x01; // change led position to the first
		else
			led <<= 1; // move LED from LSB to MSB
  c4:	22 0f       	add	r18, r18
  c6:	33 1f       	adc	r19, r19
	PORTB = led; // write led

	// de-bounce chattering by detecting LED state
	if ((PIND & 0x04) == 0x00 && state == 0) // 0x04 is position of SW1
	{
		state = 1;
  c8:	85 2f       	mov	r24, r21
  ca:	94 2f       	mov	r25, r20
  cc:	04 c0       	rjmp	.+8      	; 0xd6 <main+0x38>
  ce:	85 2f       	mov	r24, r21
  d0:	94 2f       	mov	r25, r20
		if (led == 0x80)
			led = 0x01; // change led position to the first
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
		else
			led <<= 1; // move LED from LSB to MSB
	}
	if ((PIND & 0x04) != 0x00 && state == 1)
  d6:	82 9b       	sbis	0x10, 2	; 16
  d8:	ed cf       	rjmp	.-38     	; 0xb4 <main+0x16>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	91 05       	cpc	r25, r1
  de:	51 f7       	brne	.-44     	; 0xb4 <main+0x16>
		state = 0;
  e0:	87 2f       	mov	r24, r23
  e2:	96 2f       	mov	r25, r22
  e4:	e7 cf       	rjmp	.-50     	; 0xb4 <main+0x16>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
