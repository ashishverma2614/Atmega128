
SwitchLED2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a7  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e3  00000000  00000000  00000a87  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e2  00000000  00000000  0000126a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000154c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000402  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ee  00000000  00000000  00001972  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	2e c0       	rjmp	.+92     	; 0xf8 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

	unsigned char led = 0x01; // INIT LED blinking pattern
	//unsigned btnState = 0; // 0 is OFF(for decreasing chattering)

	unsigned char dir = 0; // set direction, 0 means to move from LSB to MSB
	DDRD = 0x00; // set SW1 as input
  9e:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x08; // set SW2 to use internal pull-up resist
  a0:	88 e0       	ldi	r24, 0x08	; 8
  a2:	82 bb       	out	0x12, r24	; 18
	DDRB = 0xFF; // set all LED as output
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	87 bb       	out	0x17, r24	; 23
    /* Replace with your application code */

	unsigned char led = 0x01; // INIT LED blinking pattern
	//unsigned btnState = 0; // 0 is OFF(for decreasing chattering)

	unsigned char dir = 0; // set direction, 0 means to move from LSB to MSB
  a8:	90 e0       	ldi	r25, 0x00	; 0
//TODO: It needs revising to decrease chattering
int main(void)
{
    /* Replace with your application code */

	unsigned char led = 0x01; // INIT LED blinking pattern
  aa:	81 e0       	ldi	r24, 0x01	; 1
    
	while (1) 
    {
		PORTB = led; // write LED pattern
		if ((PIND & 0x04) == 0) dir = 0; // move from LSB to MSB
		if ((PIND & 0x08) == 0) dir = 1; // move from MSB to LSB
  ac:	31 e0       	ldi	r19, 0x01	; 1
  ae:	20 e0       	ldi	r18, 0x00	; 0
	PORTD = 0x08; // set SW2 to use internal pull-up resist
	DDRB = 0xFF; // set all LED as output
    
	while (1) 
    {
		PORTB = led; // write LED pattern
  b0:	88 bb       	out	0x18, r24	; 24
		if ((PIND & 0x04) == 0) dir = 0; // move from LSB to MSB
  b2:	82 9b       	sbis	0x10, 2	; 16
  b4:	1e c0       	rjmp	.+60     	; 0xf2 <main+0x54>
		if ((PIND & 0x08) == 0) dir = 1; // move from MSB to LSB
  b6:	83 9b       	sbis	0x10, 3	; 16
  b8:	07 c0       	rjmp	.+14     	; 0xc8 <main+0x2a>

		if (dir == 0)
  ba:	91 11       	cpse	r25, r1
  bc:	08 c0       	rjmp	.+16     	; 0xce <main+0x30>
		{
			if (led == 0x80)
  be:	80 38       	cpi	r24, 0x80	; 128
  c0:	51 f0       	breq	.+20     	; 0xd6 <main+0x38>
				led = 0x01;
			else
				led <<= 1;
  c2:	88 0f       	add	r24, r24
  c4:	92 2f       	mov	r25, r18
  c6:	0b c0       	rjmp	.+22     	; 0xde <main+0x40>
    
	while (1) 
    {
		PORTB = led; // write LED pattern
		if ((PIND & 0x04) == 0) dir = 0; // move from LSB to MSB
		if ((PIND & 0x08) == 0) dir = 1; // move from MSB to LSB
  c8:	93 2f       	mov	r25, r19
  ca:	01 c0       	rjmp	.+2      	; 0xce <main+0x30>
  cc:	93 2f       	mov	r25, r19
			else
				led <<= 1;
		}
		else // if dir is 1
		{
			if (led == 0x01)
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	29 f0       	breq	.+10     	; 0xdc <main+0x3e>
				led = 0x80;
			else
				led >>= 1;
  d2:	86 95       	lsr	r24
  d4:	04 c0       	rjmp	.+8      	; 0xde <main+0x40>
  d6:	92 2f       	mov	r25, r18
		if ((PIND & 0x08) == 0) dir = 1; // move from MSB to LSB

		if (dir == 0)
		{
			if (led == 0x80)
				led = 0x01;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	01 c0       	rjmp	.+2      	; 0xde <main+0x40>
				led <<= 1;
		}
		else // if dir is 1
		{
			if (led == 0x01)
				led = 0x80;
  dc:	80 e8       	ldi	r24, 0x80	; 128
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	4f ef       	ldi	r20, 0xFF	; 255
  e0:	59 e6       	ldi	r21, 0x69	; 105
  e2:	68 e1       	ldi	r22, 0x18	; 24
  e4:	41 50       	subi	r20, 0x01	; 1
  e6:	50 40       	sbci	r21, 0x00	; 0
  e8:	60 40       	sbci	r22, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x46>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x50>
  ee:	00 00       	nop
  f0:	df cf       	rjmp	.-66     	; 0xb0 <main+0x12>
    
	while (1) 
    {
		PORTB = led; // write LED pattern
		if ((PIND & 0x04) == 0) dir = 0; // move from LSB to MSB
		if ((PIND & 0x08) == 0) dir = 1; // move from MSB to LSB
  f2:	83 9b       	sbis	0x10, 3	; 16
  f4:	eb cf       	rjmp	.-42     	; 0xcc <main+0x2e>
  f6:	e3 cf       	rjmp	.-58     	; 0xbe <main+0x20>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
