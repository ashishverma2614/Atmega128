
Exam2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001b2  00000226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000979  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000067  00000000  00000000  00000999  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001f3  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000012e  00000000  00000000  00000bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000265  00000000  00000000  00000d21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00000f88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000112  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  000010fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_3>
  10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_4>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_7>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_8>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 eb       	ldi	r30, 0xB2	; 178
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  b6:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <__vector_3>:

char dir = STOP_SHIFT;
unsigned char led = 0x01;

ISR(INT2_vect)
{
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	8f 93       	push	r24
	dir = RIGHT_SHIFT;
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	80 93 00 01 	sts	0x0100, r24
}
  d0:	8f 91       	pop	r24
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <__vector_4>:

ISR(INT3_vect)
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
	dir = LEFT_SHIFT;
  e6:	10 92 00 01 	sts	0x0100, r1
}
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <__vector_7>:

ISR(INT6_vect)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	8f 93       	push	r24
	if(dir != STOP_SHIFT){
 100:	80 91 00 01 	lds	r24, 0x0100
 104:	83 30       	cpi	r24, 0x03	; 3
 106:	51 f0       	breq	.+20     	; 0x11c <__vector_7+0x28>
		if(dir == LEFT_SHIFT) dir = RIGHT_SHIFT;
 108:	88 23       	and	r24, r24
 10a:	21 f4       	brne	.+8      	; 0x114 <__vector_7+0x20>
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	80 93 00 01 	sts	0x0100, r24
 112:	04 c0       	rjmp	.+8      	; 0x11c <__vector_7+0x28>
		else if(dir == RIGHT_SHIFT) dir = LEFT_SHIFT;
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	11 f4       	brne	.+4      	; 0x11c <__vector_7+0x28>
 118:	10 92 00 01 	sts	0x0100, r1
	}
}
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <__vector_8>:

ISR(INT7_vect)
{
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	8f 93       	push	r24
	dir = STOP_SHIFT;
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	80 93 00 01 	sts	0x0100, r24
}
 13a:	8f 91       	pop	r24
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <main>:

int main(void)
{
	DDRB = 0xFF;
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00;
 14a:	11 ba       	out	0x11, r1	; 17
	DDRE = 0x00;
 14c:	12 b8       	out	0x02, r1	; 2

	PORTD = 0x08;
 14e:	88 e0       	ldi	r24, 0x08	; 8
 150:	82 bb       	out	0x12, r24	; 18
	PORTE = 0x80;
 152:	80 e8       	ldi	r24, 0x80	; 128
 154:	83 b9       	out	0x03, r24	; 3

	EICRA = 0b10100000;
 156:	80 ea       	ldi	r24, 0xA0	; 160
 158:	80 93 6a 00 	sts	0x006A, r24
	EICRB = 0b10100000;
 15c:	8a bf       	out	0x3a, r24	; 58
	EIMSK = 0b11001100;
 15e:	8c ec       	ldi	r24, 0xCC	; 204
 160:	89 bf       	out	0x39, r24	; 57

	SREG |= 0x80;
 162:	8f b7       	in	r24, 0x3f	; 63
 164:	80 68       	ori	r24, 0x80	; 128
 166:	8f bf       	out	0x3f, r24	; 63
			else
				led <<= 1;			
		}
		else if(dir == LEFT_SHIFT){
			if(led == 0x01)
				led = 0x80;
 168:	20 e8       	ldi	r18, 0x80	; 128

	SREG |= 0x80;

	while(1)
	{
		LED_PORT = led;
 16a:	80 91 01 01 	lds	r24, 0x0101
 16e:	88 bb       	out	0x18, r24	; 24

		if(dir == RIGHT_SHIFT){
 170:	90 91 00 01 	lds	r25, 0x0100
 174:	91 30       	cpi	r25, 0x01	; 1
 176:	39 f4       	brne	.+14     	; 0x186 <main+0x40>
			if(led == 0x80)
 178:	80 38       	cpi	r24, 0x80	; 128
 17a:	19 f4       	brne	.+6      	; 0x182 <main+0x3c>
				led = 0x01;
 17c:	90 93 01 01 	sts	0x0101, r25
 180:	0c c0       	rjmp	.+24     	; 0x19a <main+0x54>
			else
				led <<= 1;			
 182:	88 0f       	add	r24, r24
 184:	08 c0       	rjmp	.+16     	; 0x196 <main+0x50>
		}
		else if(dir == LEFT_SHIFT){
 186:	99 23       	and	r25, r25
 188:	41 f4       	brne	.+16     	; 0x19a <main+0x54>
			if(led == 0x01)
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	19 f4       	brne	.+6      	; 0x194 <main+0x4e>
				led = 0x80;
 18e:	20 93 01 01 	sts	0x0101, r18
 192:	03 c0       	rjmp	.+6      	; 0x19a <main+0x54>
			else
				led >>= 1;
 194:	86 95       	lsr	r24
 196:	80 93 01 01 	sts	0x0101, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	91 ee       	ldi	r25, 0xE1	; 225
 19e:	a4 e0       	ldi	r26, 0x04	; 4
 1a0:	81 50       	subi	r24, 0x01	; 1
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	a0 40       	sbci	r26, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x5a>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x64>
 1aa:	00 00       	nop
 1ac:	de cf       	rjmp	.-68     	; 0x16a <main+0x24>

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
