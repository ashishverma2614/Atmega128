
TimerSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00000ac8  00000b5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ac8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800150  00800150  00000bac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e92  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c5  00000000  00000000  00001bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000788  00000000  00000000  00002587  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  00002d10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005df  00000000  00000000  000030b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a3  00000000  00000000  00003693  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003e36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	da c0       	rjmp	.+436    	; 0x1c2 <__vector_3>
   e:	00 00       	nop
  10:	11 c1       	rjmp	.+546    	; 0x234 <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4a c1       	rjmp	.+660    	; 0x2b2 <__vector_7>
  1e:	00 00       	nop
  20:	d4 c1       	rjmp	.+936    	; 0x3ca <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	92 c0       	rjmp	.+292    	; 0x156 <__vector_12>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	61 c0       	rjmp	.+194    	; 0x100 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	91 c0       	rjmp	.+290    	; 0x18c <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ec       	ldi	r30, 0xC8	; 200
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 35       	cpi	r26, 0x50	; 80
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e5       	ldi	r26, 0x50	; 80
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 35       	cpi	r26, 0x5E	; 94
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	1f d2       	rcall	.+1086   	; 0x502 <main>
  c4:	ff c4       	rjmp	.+2558   	; 0xac4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <UART0_Putch>:
    int i = 0;
    while(str[i] != 0)
    {
        UART1_Putch(str[i++]);
    }
}
  c8:	5d 9b       	sbis	0x0b, 5	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <UART0_Putch>
  cc:	8c b9       	out	0x0c, r24	; 12
  ce:	08 95       	ret

000000d0 <UART0_Init>:
  d0:	1b b8       	out	0x0b, r1	; 11
  d2:	28 e9       	ldi	r18, 0x98	; 152
  d4:	2a b9       	out	0x0a, r18	; 10
  d6:	26 e0       	ldi	r18, 0x06	; 6
  d8:	20 93 95 00 	sts	0x0095, r18	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  dc:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  e0:	89 b9       	out	0x09, r24	; 9
  e2:	08 95       	ret

000000e4 <UART0_Puts>:
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
  ea:	88 81       	ld	r24, Y
  ec:	88 23       	and	r24, r24
  ee:	29 f0       	breq	.+10     	; 0xfa <UART0_Puts+0x16>
  f0:	21 96       	adiw	r28, 0x01	; 1
  f2:	ea df       	rcall	.-44     	; 0xc8 <UART0_Putch>
  f4:	89 91       	ld	r24, Y+
  f6:	81 11       	cpse	r24, r1
  f8:	fc cf       	rjmp	.-8      	; 0xf2 <UART0_Puts+0xe>
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <__vector_15>:
    Debug ();
	printf("%d \n", mode);
}
///////////////////////////////////////////////////////////////////////////////
ISR(TIMER0_COMP_vect) // 1ms -> for 0.5sec interval blinking fnd
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	2f 93       	push	r18
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
	static unsigned int tick0_blinking;
    
    tick0_blinking++;
 110:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <tick0_blinking.2337>
 114:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <tick0_blinking.2337+0x1>
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <tick0_blinking.2337+0x1>
 11e:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <tick0_blinking.2337>
    if (tick0_blinking <= 500) isTurnOn = TRUE;
 122:	85 3f       	cpi	r24, 0xF5	; 245
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	92 07       	cpc	r25, r18
 128:	20 f4       	brcc	.+8      	; 0x132 <__vector_15+0x32>
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <isTurnOn>
 130:	0a c0       	rjmp	.+20     	; 0x146 <__vector_15+0x46>
    else if (tick0_blinking <= 1000) isTurnOn = FALSE;
 132:	89 3e       	cpi	r24, 0xE9	; 233
 134:	93 40       	sbci	r25, 0x03	; 3
 136:	18 f4       	brcc	.+6      	; 0x13e <__vector_15+0x3e>
 138:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <isTurnOn>
 13c:	04 c0       	rjmp	.+8      	; 0x146 <__vector_15+0x46>
    else tick0_blinking = 0;
 13e:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <tick0_blinking.2337+0x1>
 142:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <tick0_blinking.2337>
}
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <__vector_12>:

ISR(TIMER1_COMPA_vect) // 1ms for 5ms dynamic display
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	8f 93       	push	r24
    static unsigned char tick1_dynamicOp;
    
    tick1_dynamicOp++;
 162:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
 166:	8f 5f       	subi	r24, 0xFF	; 255
 168:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
    if (tick1_dynamicOp <= 5) isChangeFnd = FALSE;
 16c:	86 30       	cpi	r24, 0x06	; 6
 16e:	18 f4       	brcc	.+6      	; 0x176 <__vector_12+0x20>
 170:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <isChangeFnd>
 174:	05 c0       	rjmp	.+10     	; 0x180 <__vector_12+0x2a>
    else
    {
        isChangeFnd = TRUE;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <isChangeFnd>
        tick1_dynamicOp = 0;
 17c:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <__data_end>
    }
}
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <__vector_26>:
ISR(TIMER3_COMPA_vect) // for 100 ms count up
{  
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
}
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <Debug>:
///////////////////////////////////////////////////////////////////////////////
/*5. Function Implementation */

void Debug () // debug code using serial monitor and LED blinking
{
	UART0_Puts ("SW pressed!\r\n");
 1a0:	8d e1       	ldi	r24, 0x1D	; 29
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	9f df       	rcall	.-194    	; 0xe4 <UART0_Puts>
	DDRB = 0x01;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x01;
 1aa:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	84 e3       	ldi	r24, 0x34	; 52
 1b0:	9c e0       	ldi	r25, 0x0C	; 12
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <Debug+0x12>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <Debug+0x1c>
 1bc:	00 00       	nop
	_delay_ms(250);
	PORTB = 0x00;
 1be:	18 ba       	out	0x18, r1	; 24
 1c0:	08 95       	ret

000001c2 <__vector_3>:

///////////////////////////////////////////////////////////////////////////////

/* 3. ISR */
ISR(INT2_vect) // key1: enter count set mode, blink the first position
{
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	0b b6       	in	r0, 0x3b	; 59
 1ce:	0f 92       	push	r0
 1d0:	2f 93       	push	r18
 1d2:	3f 93       	push	r19
 1d4:	4f 93       	push	r20
 1d6:	5f 93       	push	r21
 1d8:	6f 93       	push	r22
 1da:	7f 93       	push	r23
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
 1e0:	af 93       	push	r26
 1e2:	bf 93       	push	r27
 1e4:	ef 93       	push	r30
 1e6:	ff 93       	push	r31
	fndIndex = 0; // jump to the timer for blinking
 1e8:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <fndIndex>
	mode = TIMER_SET;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <mode>
    
    /* For debug */
    Debug ();
 1f2:	d6 df       	rcall	.-84     	; 0x1a0 <Debug>
    printf("%d \n", mode);
 1f4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mode>
 1f8:	1f 92       	push	r1
 1fa:	8f 93       	push	r24
 1fc:	8b e4       	ldi	r24, 0x4B	; 75
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	9f 93       	push	r25
 202:	8f 93       	push	r24
 204:	9f d1       	rcall	.+830    	; 0x544 <printf>
}
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	ff 91       	pop	r31
 210:	ef 91       	pop	r30
 212:	bf 91       	pop	r27
 214:	af 91       	pop	r26
 216:	9f 91       	pop	r25
 218:	8f 91       	pop	r24
 21a:	7f 91       	pop	r23
 21c:	6f 91       	pop	r22
 21e:	5f 91       	pop	r21
 220:	4f 91       	pop	r20
 222:	3f 91       	pop	r19
 224:	2f 91       	pop	r18
 226:	0f 90       	pop	r0
 228:	0b be       	out	0x3b, r0	; 59
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <__vector_4>:
ISR(INT3_vect) // key2: change fnd blinking position
{
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	0b b6       	in	r0, 0x3b	; 59
 240:	0f 92       	push	r0
 242:	2f 93       	push	r18
 244:	3f 93       	push	r19
 246:	4f 93       	push	r20
 248:	5f 93       	push	r21
 24a:	6f 93       	push	r22
 24c:	7f 93       	push	r23
 24e:	8f 93       	push	r24
 250:	9f 93       	push	r25
 252:	af 93       	push	r26
 254:	bf 93       	push	r27
 256:	ef 93       	push	r30
 258:	ff 93       	push	r31
	fndIndex++;
 25a:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <fndIndex>
 25e:	8f 5f       	subi	r24, 0xFF	; 255
 260:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <fndIndex>
	if (fndIndex > 3) fndIndex = 0; // reset index
 264:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <fndIndex>
 268:	84 30       	cpi	r24, 0x04	; 4
 26a:	10 f0       	brcs	.+4      	; 0x270 <__vector_4+0x3c>
 26c:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <fndIndex>
    
    /* For debug */
    Debug ();
 270:	97 df       	rcall	.-210    	; 0x1a0 <Debug>
    printf("%d\n", fndIndex);
 272:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <fndIndex>
 276:	1f 92       	push	r1
 278:	8f 93       	push	r24
 27a:	8b e2       	ldi	r24, 0x2B	; 43
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	9f 93       	push	r25
 280:	8f 93       	push	r24
 282:	60 d1       	rcall	.+704    	; 0x544 <printf>
}
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	ff 91       	pop	r31
 28e:	ef 91       	pop	r30
 290:	bf 91       	pop	r27
 292:	af 91       	pop	r26
 294:	9f 91       	pop	r25
 296:	8f 91       	pop	r24
 298:	7f 91       	pop	r23
 29a:	6f 91       	pop	r22
 29c:	5f 91       	pop	r21
 29e:	4f 91       	pop	r20
 2a0:	3f 91       	pop	r19
 2a2:	2f 91       	pop	r18
 2a4:	0f 90       	pop	r0
 2a6:	0b be       	out	0x3b, r0	; 59
 2a8:	0f 90       	pop	r0
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	0f 90       	pop	r0
 2ae:	1f 90       	pop	r1
 2b0:	18 95       	reti

000002b2 <__vector_7>:
ISR(INT6_vect) // key3 : count-up fnd number at current position
{
 2b2:	1f 92       	push	r1
 2b4:	0f 92       	push	r0
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	0f 92       	push	r0
 2ba:	11 24       	eor	r1, r1
 2bc:	0b b6       	in	r0, 0x3b	; 59
 2be:	0f 92       	push	r0
 2c0:	2f 93       	push	r18
 2c2:	3f 93       	push	r19
 2c4:	4f 93       	push	r20
 2c6:	5f 93       	push	r21
 2c8:	6f 93       	push	r22
 2ca:	7f 93       	push	r23
 2cc:	8f 93       	push	r24
 2ce:	9f 93       	push	r25
 2d0:	af 93       	push	r26
 2d2:	bf 93       	push	r27
 2d4:	ef 93       	push	r30
 2d6:	ff 93       	push	r31
	fndNum[fndIndex]++;
 2d8:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <fndIndex>
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	e0 50       	subi	r30, 0x00	; 0
 2e0:	ff 4f       	sbci	r31, 0xFF	; 255
 2e2:	80 81       	ld	r24, Z
 2e4:	8f 5f       	subi	r24, 0xFF	; 255
 2e6:	80 83       	st	Z, r24
	if (fndNum[fndIndex] > '9') fndNum[fndIndex] = '0'; // reset value
 2e8:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <fndIndex>
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	e0 50       	subi	r30, 0x00	; 0
 2f0:	ff 4f       	sbci	r31, 0xFF	; 255
 2f2:	80 81       	ld	r24, Z
 2f4:	8a 33       	cpi	r24, 0x3A	; 58
 2f6:	38 f0       	brcs	.+14     	; 0x306 <__vector_7+0x54>
 2f8:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <fndIndex>
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	e0 50       	subi	r30, 0x00	; 0
 300:	ff 4f       	sbci	r31, 0xFF	; 255
 302:	80 e3       	ldi	r24, 0x30	; 48
 304:	80 83       	st	Z, r24

    /* convert data to int for start count */
    // also possible to use atoi()
    fndStartNum = 1000 * (fndNum[3] - 0x30) + 100 * (fndNum[2] - 0x30) + 10 * (fndNum[1] - 0x30) + (fndNum[0] - 0x30);
 306:	a0 e0       	ldi	r26, 0x00	; 0
 308:	b1 e0       	ldi	r27, 0x01	; 1
 30a:	13 96       	adiw	r26, 0x03	; 3
 30c:	ec 91       	ld	r30, X
 30e:	13 97       	sbiw	r26, 0x03	; 3
 310:	12 96       	adiw	r26, 0x02	; 2
 312:	6c 91       	ld	r22, X
 314:	12 97       	sbiw	r26, 0x02	; 2
 316:	11 96       	adiw	r26, 0x01	; 1
 318:	2c 91       	ld	r18, X
 31a:	11 97       	sbiw	r26, 0x01	; 1
 31c:	4c 91       	ld	r20, X
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	f0 97       	sbiw	r30, 0x30	; 48
 322:	88 ee       	ldi	r24, 0xE8	; 232
 324:	93 e0       	ldi	r25, 0x03	; 3
 326:	e8 9f       	mul	r30, r24
 328:	d0 01       	movw	r26, r0
 32a:	e9 9f       	mul	r30, r25
 32c:	b0 0d       	add	r27, r0
 32e:	f8 9f       	mul	r31, r24
 330:	b0 0d       	add	r27, r0
 332:	11 24       	eor	r1, r1
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	60 53       	subi	r22, 0x30	; 48
 338:	71 09       	sbc	r23, r1
 33a:	34 e6       	ldi	r19, 0x64	; 100
 33c:	36 9f       	mul	r19, r22
 33e:	c0 01       	movw	r24, r0
 340:	37 9f       	mul	r19, r23
 342:	90 0d       	add	r25, r0
 344:	11 24       	eor	r1, r1
 346:	bd 01       	movw	r22, r26
 348:	68 0f       	add	r22, r24
 34a:	79 1f       	adc	r23, r25
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	c9 01       	movw	r24, r18
 350:	c0 97       	sbiw	r24, 0x30	; 48
 352:	fc 01       	movw	r30, r24
 354:	ee 0f       	add	r30, r30
 356:	ff 1f       	adc	r31, r31
 358:	9c 01       	movw	r18, r24
 35a:	22 0f       	add	r18, r18
 35c:	33 1f       	adc	r19, r19
 35e:	22 0f       	add	r18, r18
 360:	33 1f       	adc	r19, r19
 362:	22 0f       	add	r18, r18
 364:	33 1f       	adc	r19, r19
 366:	cf 01       	movw	r24, r30
 368:	82 0f       	add	r24, r18
 36a:	93 1f       	adc	r25, r19
 36c:	86 0f       	add	r24, r22
 36e:	97 1f       	adc	r25, r23
 370:	24 2f       	mov	r18, r20
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	20 53       	subi	r18, 0x30	; 48
 376:	31 09       	sbc	r19, r1
 378:	82 0f       	add	r24, r18
 37a:	93 1f       	adc	r25, r19
 37c:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <fndStartNum+0x1>
 380:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <fndStartNum>
    
    /* For debug */
    Debug ();
 384:	0d df       	rcall	.-486    	; 0x1a0 <Debug>
    printf("Stored fnd start number is: %d \n", fndStartNum);
 386:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <fndStartNum>
 38a:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <fndStartNum+0x1>
 38e:	9f 93       	push	r25
 390:	8f 93       	push	r24
 392:	8f e2       	ldi	r24, 0x2F	; 47
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	9f 93       	push	r25
 398:	8f 93       	push	r24
 39a:	d4 d0       	rcall	.+424    	; 0x544 <printf>
}
 39c:	0f 90       	pop	r0
 39e:	0f 90       	pop	r0
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	ff 91       	pop	r31
 3a6:	ef 91       	pop	r30
 3a8:	bf 91       	pop	r27
 3aa:	af 91       	pop	r26
 3ac:	9f 91       	pop	r25
 3ae:	8f 91       	pop	r24
 3b0:	7f 91       	pop	r23
 3b2:	6f 91       	pop	r22
 3b4:	5f 91       	pop	r21
 3b6:	4f 91       	pop	r20
 3b8:	3f 91       	pop	r19
 3ba:	2f 91       	pop	r18
 3bc:	0f 90       	pop	r0
 3be:	0b be       	out	0x3b, r0	; 59
 3c0:	0f 90       	pop	r0
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	0f 90       	pop	r0
 3c6:	1f 90       	pop	r1
 3c8:	18 95       	reti

000003ca <__vector_8>:
ISR(INT7_vect)
{
 3ca:	1f 92       	push	r1
 3cc:	0f 92       	push	r0
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	0f 92       	push	r0
 3d2:	11 24       	eor	r1, r1
 3d4:	0b b6       	in	r0, 0x3b	; 59
 3d6:	0f 92       	push	r0
 3d8:	2f 93       	push	r18
 3da:	3f 93       	push	r19
 3dc:	4f 93       	push	r20
 3de:	5f 93       	push	r21
 3e0:	6f 93       	push	r22
 3e2:	7f 93       	push	r23
 3e4:	8f 93       	push	r24
 3e6:	9f 93       	push	r25
 3e8:	af 93       	push	r26
 3ea:	bf 93       	push	r27
 3ec:	ef 93       	push	r30
 3ee:	ff 93       	push	r31
	mode = COUNT_UP; // jump to count-up mode
 3f0:	82 e0       	ldi	r24, 0x02	; 2
 3f2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <mode>
    
    /* For debug */
    Debug ();
 3f6:	d4 de       	rcall	.-600    	; 0x1a0 <Debug>
	printf("%d \n", mode);
 3f8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mode>
 3fc:	1f 92       	push	r1
 3fe:	8f 93       	push	r24
 400:	8b e4       	ldi	r24, 0x4B	; 75
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	9f 93       	push	r25
 406:	8f 93       	push	r24
 408:	9d d0       	rcall	.+314    	; 0x544 <printf>
}
 40a:	0f 90       	pop	r0
 40c:	0f 90       	pop	r0
 40e:	0f 90       	pop	r0
 410:	0f 90       	pop	r0
 412:	ff 91       	pop	r31
 414:	ef 91       	pop	r30
 416:	bf 91       	pop	r27
 418:	af 91       	pop	r26
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	7f 91       	pop	r23
 420:	6f 91       	pop	r22
 422:	5f 91       	pop	r21
 424:	4f 91       	pop	r20
 426:	3f 91       	pop	r19
 428:	2f 91       	pop	r18
 42a:	0f 90       	pop	r0
 42c:	0b be       	out	0x3b, r0	; 59
 42e:	0f 90       	pop	r0
 430:	0f be       	out	0x3f, r0	; 63
 432:	0f 90       	pop	r0
 434:	1f 90       	pop	r1
 436:	18 95       	reti

00000438 <EXINT_init>:
	_delay_ms(250);
	PORTB = 0x00;
}
void EXINT_init()
{
	DDRD = 0b11110011; // PIND[2:3] as input
 438:	83 ef       	ldi	r24, 0xF3	; 243
 43a:	81 bb       	out	0x11, r24	; 17
	DDRE = 0b00111111; // PINE[6:7] as input
 43c:	8f e3       	ldi	r24, 0x3F	; 63
 43e:	82 b9       	out	0x02, r24	; 2
	// internal pull-up resistor
	PORTD = 0b00001100; 
 440:	8c e0       	ldi	r24, 0x0C	; 12
 442:	82 bb       	out	0x12, r24	; 18
	PORTE = 0b11000000;
 444:	80 ec       	ldi	r24, 0xC0	; 192
 446:	83 b9       	out	0x03, r24	; 3

	// Reg. setting
	EICRA = (1 << ISC21) + (1 << ISC31); // falling edge trigger detection
 448:	80 ea       	ldi	r24, 0xA0	; 160
 44a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB = (1 << ISC61) + (1 << ISC71);
 44e:	8a bf       	out	0x3a, r24	; 58
	EIMSK = (1 << INT2) + (1 << INT3) + (1 << INT6) + (1 << INT7);
 450:	8c ec       	ldi	r24, 0xCC	; 204
 452:	89 bf       	out	0x39, r24	; 57
 454:	08 95       	ret

00000456 <fnd_init>:
}
void fnd_init ()
{
	DDRA = 0xFF;
 456:	8f ef       	ldi	r24, 0xFF	; 255
 458:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0x0F;
 45a:	8f e0       	ldi	r24, 0x0F	; 15
 45c:	84 bb       	out	0x14, r24	; 20
 45e:	08 95       	ret

00000460 <sys_init>:
}
void sys_init ()
{
	stdout = &OUTPUT;
 460:	8f e0       	ldi	r24, 0x0F	; 15
 462:	91 e0       	ldi	r25, 0x01	; 1
 464:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <__iob+0x3>
 468:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__iob+0x2>
	UART0_Init(UBRR_9600_1X); // for debug
 46c:	88 e6       	ldi	r24, 0x68	; 104
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	2f de       	rcall	.-930    	; 0xd0 <UART0_Init>
	EXINT_init();
 472:	e2 df       	rcall	.-60     	; 0x438 <EXINT_init>
	fnd_init ();
 474:	f0 df       	rcall	.-32     	; 0x456 <fnd_init>
 476:	8f b7       	in	r24, 0x3f	; 63
	SREG |= 0x80; // GRBL INT enable
 478:	80 68       	ori	r24, 0x80	; 128
 47a:	8f bf       	out	0x3f, r24	; 63
 47c:	08 95       	ret

0000047e <timer0_init>:
 47e:	83 b7       	in	r24, 0x33	; 51
}
void timer0_init()
{
    TCCR0 |= (1 << WGM01) + (1 << CS02); // 64 pre-scale
 480:	8c 60       	ori	r24, 0x0C	; 12
 482:	83 bf       	out	0x33, r24	; 51
    OCR0 = 249; // 1ms
 484:	89 ef       	ldi	r24, 0xF9	; 249
 486:	81 bf       	out	0x31, r24	; 49
    TIMSK |= (1 << OCIE0);
 488:	87 b7       	in	r24, 0x37	; 55
 48a:	82 60       	ori	r24, 0x02	; 2
 48c:	87 bf       	out	0x37, r24	; 55
 48e:	08 95       	ret

00000490 <timer0_off>:
}
void timer0_off()
{
    TCCR0 |= 0x00;
 490:	83 b7       	in	r24, 0x33	; 51
 492:	83 bf       	out	0x33, r24	; 51
    OCR0 = 0x00;
 494:	11 be       	out	0x31, r1	; 49
    TIMSK &= ~(1 << OCIE0);
 496:	87 b7       	in	r24, 0x37	; 55
 498:	8d 7f       	andi	r24, 0xFD	; 253
 49a:	87 bf       	out	0x37, r24	; 55
 49c:	08 95       	ret

0000049e <disp_setMode_fnd>:
}
void disp_setMode_fnd(void)
{
    switch(fndIndex)
 49e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <fndIndex>
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	81 f0       	breq	.+32     	; 0x4c6 <disp_setMode_fnd+0x28>
 4a6:	28 f0       	brcs	.+10     	; 0x4b2 <disp_setMode_fnd+0x14>
 4a8:	82 30       	cpi	r24, 0x02	; 2
 4aa:	b9 f0       	breq	.+46     	; 0x4da <disp_setMode_fnd+0x3c>
 4ac:	83 30       	cpi	r24, 0x03	; 3
 4ae:	f9 f0       	breq	.+62     	; 0x4ee <disp_setMode_fnd+0x50>
 4b0:	08 95       	ret
    {
        case 0:
            PORTC = 0x01;
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	85 bb       	out	0x15, r24	; 21
            PORTA = fndPattern[fndNum[0] - 0x30];
 4b6:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	ec 52       	subi	r30, 0x2C	; 44
 4be:	ff 4f       	sbci	r31, 0xFF	; 255
 4c0:	80 81       	ld	r24, Z
 4c2:	8b bb       	out	0x1b, r24	; 27
            break;
 4c4:	08 95       	ret
        case 1:
            PORTC = 0x02;
 4c6:	82 e0       	ldi	r24, 0x02	; 2
 4c8:	85 bb       	out	0x15, r24	; 21
            PORTA = fndPattern[fndNum[1] - 0x30];
 4ca:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <__data_start+0x1>
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	ec 52       	subi	r30, 0x2C	; 44
 4d2:	ff 4f       	sbci	r31, 0xFF	; 255
 4d4:	80 81       	ld	r24, Z
 4d6:	8b bb       	out	0x1b, r24	; 27
            break;
 4d8:	08 95       	ret
        case 2:
            PORTC = 0x04;
 4da:	84 e0       	ldi	r24, 0x04	; 4
 4dc:	85 bb       	out	0x15, r24	; 21
            PORTA = fndPattern[fndNum[2] - 0x30];
 4de:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_start+0x2>
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	ec 52       	subi	r30, 0x2C	; 44
 4e6:	ff 4f       	sbci	r31, 0xFF	; 255
 4e8:	80 81       	ld	r24, Z
 4ea:	8b bb       	out	0x1b, r24	; 27
            break;
 4ec:	08 95       	ret
        case 3:
            PORTC = 0x08;
 4ee:	88 e0       	ldi	r24, 0x08	; 8
 4f0:	85 bb       	out	0x15, r24	; 21
            PORTA = fndPattern[fndNum[3] - 0x30];
 4f2:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <__data_start+0x3>
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	ec 52       	subi	r30, 0x2C	; 44
 4fa:	ff 4f       	sbci	r31, 0xFF	; 255
 4fc:	80 81       	ld	r24, Z
 4fe:	8b bb       	out	0x1b, r24	; 27
 500:	08 95       	ret

00000502 <main>:

/* 4. Main method */
int main(void)
{
	// 1. system setting
	sys_init ();
 502:	ae df       	rcall	.-164    	; 0x460 <sys_init>
                disp_setMode_fnd();
                
			    // 3. blink port
			    if (isTurnOn) // turn on the current port
                {
                    DDRA = 0xFF; // turn on output
 504:	1f ef       	ldi	r17, 0xFF	; 255
                    PORTC = (0x01 << fndIndex);
 506:	c1 e0       	ldi	r28, 0x01	; 1
 508:	d0 e0       	ldi	r29, 0x00	; 0
	// 1. system setting
	sys_init ();
	// 2. system execution
	while(TRUE)
	{
		switch(mode)
 50a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mode>
 50e:	81 30       	cpi	r24, 0x01	; 1
 510:	19 f0       	breq	.+6      	; 0x518 <main+0x16>
 512:	82 30       	cpi	r24, 0x02	; 2
 514:	a9 f0       	breq	.+42     	; 0x540 <main+0x3e>
		{
			case TIMER_SET:
			    // 1. turn on timer0 for blinking ON
			    timer0_init();
 516:	fb cf       	rjmp	.-10     	; 0x50e <main+0xc>
                
                // 2. display set mode fnd
                disp_setMode_fnd();
 518:	b2 df       	rcall	.-156    	; 0x47e <timer0_init>
 51a:	c1 df       	rcall	.-126    	; 0x49e <disp_setMode_fnd>
                
			    // 3. blink port
			    if (isTurnOn) // turn on the current port
 51c:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <isTurnOn>
 520:	88 23       	and	r24, r24
 522:	59 f0       	breq	.+22     	; 0x53a <main+0x38>
                {
                    DDRA = 0xFF; // turn on output
 524:	1a bb       	out	0x1a, r17	; 26
                    PORTC = (0x01 << fndIndex);
 526:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <fndIndex>
 52a:	9e 01       	movw	r18, r28
 52c:	02 c0       	rjmp	.+4      	; 0x532 <main+0x30>
 52e:	22 0f       	add	r18, r18
 530:	33 1f       	adc	r19, r19
 532:	8a 95       	dec	r24
 534:	e2 f7       	brpl	.-8      	; 0x52e <main+0x2c>
 536:	25 bb       	out	0x15, r18	; 21
 538:	e8 cf       	rjmp	.-48     	; 0x50a <main+0x8>
                }
                else // turn off the current port
                {
                    PORTC = 0x00; // turn off fnd control port   
                    DDRA = 0x00; // turn off output
 53a:	15 ba       	out	0x15, r1	; 21
 53c:	1a ba       	out	0x1a, r1	; 26
			break;
            
            ///////////////////////////////////////////////////////////////////
			case COUNT_UP:
            // 1. turn off timer0 for blinking OFF
            timer0_off();
 53e:	e5 cf       	rjmp	.-54     	; 0x50a <main+0x8>
 540:	a7 df       	rcall	.-178    	; 0x490 <timer0_off>
            
			// 2. turn on timer for counting-up
			
			
			break;
 542:	e3 cf       	rjmp	.-58     	; 0x50a <main+0x8>

00000544 <printf>:
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	cd b7       	in	r28, 0x3d	; 61
 54a:	de b7       	in	r29, 0x3e	; 62
 54c:	ae 01       	movw	r20, r28
 54e:	4b 5f       	subi	r20, 0xFB	; 251
 550:	5f 4f       	sbci	r21, 0xFF	; 255
 552:	fa 01       	movw	r30, r20
 554:	61 91       	ld	r22, Z+
 556:	71 91       	ld	r23, Z+
 558:	af 01       	movw	r20, r30
 55a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <__iob+0x2>
 55e:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <__iob+0x3>
 562:	03 d0       	rcall	.+6      	; 0x56a <vfprintf>
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	08 95       	ret

0000056a <vfprintf>:
 56a:	2f 92       	push	r2
 56c:	3f 92       	push	r3
 56e:	4f 92       	push	r4
 570:	5f 92       	push	r5
 572:	6f 92       	push	r6
 574:	7f 92       	push	r7
 576:	8f 92       	push	r8
 578:	9f 92       	push	r9
 57a:	af 92       	push	r10
 57c:	bf 92       	push	r11
 57e:	cf 92       	push	r12
 580:	df 92       	push	r13
 582:	ef 92       	push	r14
 584:	ff 92       	push	r15
 586:	0f 93       	push	r16
 588:	1f 93       	push	r17
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
 58e:	cd b7       	in	r28, 0x3d	; 61
 590:	de b7       	in	r29, 0x3e	; 62
 592:	2b 97       	sbiw	r28, 0x0b	; 11
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	f8 94       	cli
 598:	de bf       	out	0x3e, r29	; 62
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	cd bf       	out	0x3d, r28	; 61
 59e:	6c 01       	movw	r12, r24
 5a0:	7b 01       	movw	r14, r22
 5a2:	8a 01       	movw	r16, r20
 5a4:	fc 01       	movw	r30, r24
 5a6:	17 82       	std	Z+7, r1	; 0x07
 5a8:	16 82       	std	Z+6, r1	; 0x06
 5aa:	83 81       	ldd	r24, Z+3	; 0x03
 5ac:	81 ff       	sbrs	r24, 1
 5ae:	bf c1       	rjmp	.+894    	; 0x92e <vfprintf+0x3c4>
 5b0:	ce 01       	movw	r24, r28
 5b2:	01 96       	adiw	r24, 0x01	; 1
 5b4:	3c 01       	movw	r6, r24
 5b6:	f6 01       	movw	r30, r12
 5b8:	93 81       	ldd	r25, Z+3	; 0x03
 5ba:	f7 01       	movw	r30, r14
 5bc:	93 fd       	sbrc	r25, 3
 5be:	85 91       	lpm	r24, Z+
 5c0:	93 ff       	sbrs	r25, 3
 5c2:	81 91       	ld	r24, Z+
 5c4:	7f 01       	movw	r14, r30
 5c6:	88 23       	and	r24, r24
 5c8:	09 f4       	brne	.+2      	; 0x5cc <vfprintf+0x62>
 5ca:	ad c1       	rjmp	.+858    	; 0x926 <vfprintf+0x3bc>
 5cc:	85 32       	cpi	r24, 0x25	; 37
 5ce:	39 f4       	brne	.+14     	; 0x5de <vfprintf+0x74>
 5d0:	93 fd       	sbrc	r25, 3
 5d2:	85 91       	lpm	r24, Z+
 5d4:	93 ff       	sbrs	r25, 3
 5d6:	81 91       	ld	r24, Z+
 5d8:	7f 01       	movw	r14, r30
 5da:	85 32       	cpi	r24, 0x25	; 37
 5dc:	21 f4       	brne	.+8      	; 0x5e6 <vfprintf+0x7c>
 5de:	b6 01       	movw	r22, r12
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	d6 d1       	rcall	.+940    	; 0x990 <fputc>
 5e4:	e8 cf       	rjmp	.-48     	; 0x5b6 <vfprintf+0x4c>
 5e6:	91 2c       	mov	r9, r1
 5e8:	21 2c       	mov	r2, r1
 5ea:	31 2c       	mov	r3, r1
 5ec:	ff e1       	ldi	r31, 0x1F	; 31
 5ee:	f3 15       	cp	r31, r3
 5f0:	d8 f0       	brcs	.+54     	; 0x628 <vfprintf+0xbe>
 5f2:	8b 32       	cpi	r24, 0x2B	; 43
 5f4:	79 f0       	breq	.+30     	; 0x614 <vfprintf+0xaa>
 5f6:	38 f4       	brcc	.+14     	; 0x606 <vfprintf+0x9c>
 5f8:	80 32       	cpi	r24, 0x20	; 32
 5fa:	79 f0       	breq	.+30     	; 0x61a <vfprintf+0xb0>
 5fc:	83 32       	cpi	r24, 0x23	; 35
 5fe:	a1 f4       	brne	.+40     	; 0x628 <vfprintf+0xbe>
 600:	23 2d       	mov	r18, r3
 602:	20 61       	ori	r18, 0x10	; 16
 604:	1d c0       	rjmp	.+58     	; 0x640 <vfprintf+0xd6>
 606:	8d 32       	cpi	r24, 0x2D	; 45
 608:	61 f0       	breq	.+24     	; 0x622 <vfprintf+0xb8>
 60a:	80 33       	cpi	r24, 0x30	; 48
 60c:	69 f4       	brne	.+26     	; 0x628 <vfprintf+0xbe>
 60e:	23 2d       	mov	r18, r3
 610:	21 60       	ori	r18, 0x01	; 1
 612:	16 c0       	rjmp	.+44     	; 0x640 <vfprintf+0xd6>
 614:	83 2d       	mov	r24, r3
 616:	82 60       	ori	r24, 0x02	; 2
 618:	38 2e       	mov	r3, r24
 61a:	e3 2d       	mov	r30, r3
 61c:	e4 60       	ori	r30, 0x04	; 4
 61e:	3e 2e       	mov	r3, r30
 620:	2a c0       	rjmp	.+84     	; 0x676 <vfprintf+0x10c>
 622:	f3 2d       	mov	r31, r3
 624:	f8 60       	ori	r31, 0x08	; 8
 626:	1d c0       	rjmp	.+58     	; 0x662 <vfprintf+0xf8>
 628:	37 fc       	sbrc	r3, 7
 62a:	2d c0       	rjmp	.+90     	; 0x686 <vfprintf+0x11c>
 62c:	20 ed       	ldi	r18, 0xD0	; 208
 62e:	28 0f       	add	r18, r24
 630:	2a 30       	cpi	r18, 0x0A	; 10
 632:	40 f0       	brcs	.+16     	; 0x644 <vfprintf+0xda>
 634:	8e 32       	cpi	r24, 0x2E	; 46
 636:	b9 f4       	brne	.+46     	; 0x666 <vfprintf+0xfc>
 638:	36 fc       	sbrc	r3, 6
 63a:	75 c1       	rjmp	.+746    	; 0x926 <vfprintf+0x3bc>
 63c:	23 2d       	mov	r18, r3
 63e:	20 64       	ori	r18, 0x40	; 64
 640:	32 2e       	mov	r3, r18
 642:	19 c0       	rjmp	.+50     	; 0x676 <vfprintf+0x10c>
 644:	36 fe       	sbrs	r3, 6
 646:	06 c0       	rjmp	.+12     	; 0x654 <vfprintf+0xea>
 648:	8a e0       	ldi	r24, 0x0A	; 10
 64a:	98 9e       	mul	r9, r24
 64c:	20 0d       	add	r18, r0
 64e:	11 24       	eor	r1, r1
 650:	92 2e       	mov	r9, r18
 652:	11 c0       	rjmp	.+34     	; 0x676 <vfprintf+0x10c>
 654:	ea e0       	ldi	r30, 0x0A	; 10
 656:	2e 9e       	mul	r2, r30
 658:	20 0d       	add	r18, r0
 65a:	11 24       	eor	r1, r1
 65c:	22 2e       	mov	r2, r18
 65e:	f3 2d       	mov	r31, r3
 660:	f0 62       	ori	r31, 0x20	; 32
 662:	3f 2e       	mov	r3, r31
 664:	08 c0       	rjmp	.+16     	; 0x676 <vfprintf+0x10c>
 666:	8c 36       	cpi	r24, 0x6C	; 108
 668:	21 f4       	brne	.+8      	; 0x672 <vfprintf+0x108>
 66a:	83 2d       	mov	r24, r3
 66c:	80 68       	ori	r24, 0x80	; 128
 66e:	38 2e       	mov	r3, r24
 670:	02 c0       	rjmp	.+4      	; 0x676 <vfprintf+0x10c>
 672:	88 36       	cpi	r24, 0x68	; 104
 674:	41 f4       	brne	.+16     	; 0x686 <vfprintf+0x11c>
 676:	f7 01       	movw	r30, r14
 678:	93 fd       	sbrc	r25, 3
 67a:	85 91       	lpm	r24, Z+
 67c:	93 ff       	sbrs	r25, 3
 67e:	81 91       	ld	r24, Z+
 680:	7f 01       	movw	r14, r30
 682:	81 11       	cpse	r24, r1
 684:	b3 cf       	rjmp	.-154    	; 0x5ec <vfprintf+0x82>
 686:	98 2f       	mov	r25, r24
 688:	9f 7d       	andi	r25, 0xDF	; 223
 68a:	95 54       	subi	r25, 0x45	; 69
 68c:	93 30       	cpi	r25, 0x03	; 3
 68e:	28 f4       	brcc	.+10     	; 0x69a <vfprintf+0x130>
 690:	0c 5f       	subi	r16, 0xFC	; 252
 692:	1f 4f       	sbci	r17, 0xFF	; 255
 694:	9f e3       	ldi	r25, 0x3F	; 63
 696:	99 83       	std	Y+1, r25	; 0x01
 698:	0d c0       	rjmp	.+26     	; 0x6b4 <vfprintf+0x14a>
 69a:	83 36       	cpi	r24, 0x63	; 99
 69c:	31 f0       	breq	.+12     	; 0x6aa <vfprintf+0x140>
 69e:	83 37       	cpi	r24, 0x73	; 115
 6a0:	71 f0       	breq	.+28     	; 0x6be <vfprintf+0x154>
 6a2:	83 35       	cpi	r24, 0x53	; 83
 6a4:	09 f0       	breq	.+2      	; 0x6a8 <vfprintf+0x13e>
 6a6:	55 c0       	rjmp	.+170    	; 0x752 <vfprintf+0x1e8>
 6a8:	20 c0       	rjmp	.+64     	; 0x6ea <vfprintf+0x180>
 6aa:	f8 01       	movw	r30, r16
 6ac:	80 81       	ld	r24, Z
 6ae:	89 83       	std	Y+1, r24	; 0x01
 6b0:	0e 5f       	subi	r16, 0xFE	; 254
 6b2:	1f 4f       	sbci	r17, 0xFF	; 255
 6b4:	88 24       	eor	r8, r8
 6b6:	83 94       	inc	r8
 6b8:	91 2c       	mov	r9, r1
 6ba:	53 01       	movw	r10, r6
 6bc:	12 c0       	rjmp	.+36     	; 0x6e2 <vfprintf+0x178>
 6be:	28 01       	movw	r4, r16
 6c0:	f2 e0       	ldi	r31, 0x02	; 2
 6c2:	4f 0e       	add	r4, r31
 6c4:	51 1c       	adc	r5, r1
 6c6:	f8 01       	movw	r30, r16
 6c8:	a0 80       	ld	r10, Z
 6ca:	b1 80       	ldd	r11, Z+1	; 0x01
 6cc:	36 fe       	sbrs	r3, 6
 6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <vfprintf+0x16c>
 6d0:	69 2d       	mov	r22, r9
 6d2:	70 e0       	ldi	r23, 0x00	; 0
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <vfprintf+0x170>
 6d6:	6f ef       	ldi	r22, 0xFF	; 255
 6d8:	7f ef       	ldi	r23, 0xFF	; 255
 6da:	c5 01       	movw	r24, r10
 6dc:	4e d1       	rcall	.+668    	; 0x97a <strnlen>
 6de:	4c 01       	movw	r8, r24
 6e0:	82 01       	movw	r16, r4
 6e2:	f3 2d       	mov	r31, r3
 6e4:	ff 77       	andi	r31, 0x7F	; 127
 6e6:	3f 2e       	mov	r3, r31
 6e8:	15 c0       	rjmp	.+42     	; 0x714 <vfprintf+0x1aa>
 6ea:	28 01       	movw	r4, r16
 6ec:	22 e0       	ldi	r18, 0x02	; 2
 6ee:	42 0e       	add	r4, r18
 6f0:	51 1c       	adc	r5, r1
 6f2:	f8 01       	movw	r30, r16
 6f4:	a0 80       	ld	r10, Z
 6f6:	b1 80       	ldd	r11, Z+1	; 0x01
 6f8:	36 fe       	sbrs	r3, 6
 6fa:	03 c0       	rjmp	.+6      	; 0x702 <vfprintf+0x198>
 6fc:	69 2d       	mov	r22, r9
 6fe:	70 e0       	ldi	r23, 0x00	; 0
 700:	02 c0       	rjmp	.+4      	; 0x706 <vfprintf+0x19c>
 702:	6f ef       	ldi	r22, 0xFF	; 255
 704:	7f ef       	ldi	r23, 0xFF	; 255
 706:	c5 01       	movw	r24, r10
 708:	2d d1       	rcall	.+602    	; 0x964 <strnlen_P>
 70a:	4c 01       	movw	r8, r24
 70c:	f3 2d       	mov	r31, r3
 70e:	f0 68       	ori	r31, 0x80	; 128
 710:	3f 2e       	mov	r3, r31
 712:	82 01       	movw	r16, r4
 714:	33 fc       	sbrc	r3, 3
 716:	19 c0       	rjmp	.+50     	; 0x74a <vfprintf+0x1e0>
 718:	82 2d       	mov	r24, r2
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	88 16       	cp	r8, r24
 71e:	99 06       	cpc	r9, r25
 720:	a0 f4       	brcc	.+40     	; 0x74a <vfprintf+0x1e0>
 722:	b6 01       	movw	r22, r12
 724:	80 e2       	ldi	r24, 0x20	; 32
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	33 d1       	rcall	.+614    	; 0x990 <fputc>
 72a:	2a 94       	dec	r2
 72c:	f5 cf       	rjmp	.-22     	; 0x718 <vfprintf+0x1ae>
 72e:	f5 01       	movw	r30, r10
 730:	37 fc       	sbrc	r3, 7
 732:	85 91       	lpm	r24, Z+
 734:	37 fe       	sbrs	r3, 7
 736:	81 91       	ld	r24, Z+
 738:	5f 01       	movw	r10, r30
 73a:	b6 01       	movw	r22, r12
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	28 d1       	rcall	.+592    	; 0x990 <fputc>
 740:	21 10       	cpse	r2, r1
 742:	2a 94       	dec	r2
 744:	21 e0       	ldi	r18, 0x01	; 1
 746:	82 1a       	sub	r8, r18
 748:	91 08       	sbc	r9, r1
 74a:	81 14       	cp	r8, r1
 74c:	91 04       	cpc	r9, r1
 74e:	79 f7       	brne	.-34     	; 0x72e <vfprintf+0x1c4>
 750:	e1 c0       	rjmp	.+450    	; 0x914 <vfprintf+0x3aa>
 752:	84 36       	cpi	r24, 0x64	; 100
 754:	11 f0       	breq	.+4      	; 0x75a <vfprintf+0x1f0>
 756:	89 36       	cpi	r24, 0x69	; 105
 758:	39 f5       	brne	.+78     	; 0x7a8 <vfprintf+0x23e>
 75a:	f8 01       	movw	r30, r16
 75c:	37 fe       	sbrs	r3, 7
 75e:	07 c0       	rjmp	.+14     	; 0x76e <vfprintf+0x204>
 760:	60 81       	ld	r22, Z
 762:	71 81       	ldd	r23, Z+1	; 0x01
 764:	82 81       	ldd	r24, Z+2	; 0x02
 766:	93 81       	ldd	r25, Z+3	; 0x03
 768:	0c 5f       	subi	r16, 0xFC	; 252
 76a:	1f 4f       	sbci	r17, 0xFF	; 255
 76c:	08 c0       	rjmp	.+16     	; 0x77e <vfprintf+0x214>
 76e:	60 81       	ld	r22, Z
 770:	71 81       	ldd	r23, Z+1	; 0x01
 772:	07 2e       	mov	r0, r23
 774:	00 0c       	add	r0, r0
 776:	88 0b       	sbc	r24, r24
 778:	99 0b       	sbc	r25, r25
 77a:	0e 5f       	subi	r16, 0xFE	; 254
 77c:	1f 4f       	sbci	r17, 0xFF	; 255
 77e:	f3 2d       	mov	r31, r3
 780:	ff 76       	andi	r31, 0x6F	; 111
 782:	3f 2e       	mov	r3, r31
 784:	97 ff       	sbrs	r25, 7
 786:	09 c0       	rjmp	.+18     	; 0x79a <vfprintf+0x230>
 788:	90 95       	com	r25
 78a:	80 95       	com	r24
 78c:	70 95       	com	r23
 78e:	61 95       	neg	r22
 790:	7f 4f       	sbci	r23, 0xFF	; 255
 792:	8f 4f       	sbci	r24, 0xFF	; 255
 794:	9f 4f       	sbci	r25, 0xFF	; 255
 796:	f0 68       	ori	r31, 0x80	; 128
 798:	3f 2e       	mov	r3, r31
 79a:	2a e0       	ldi	r18, 0x0A	; 10
 79c:	30 e0       	ldi	r19, 0x00	; 0
 79e:	a3 01       	movw	r20, r6
 7a0:	33 d1       	rcall	.+614    	; 0xa08 <__ultoa_invert>
 7a2:	88 2e       	mov	r8, r24
 7a4:	86 18       	sub	r8, r6
 7a6:	44 c0       	rjmp	.+136    	; 0x830 <vfprintf+0x2c6>
 7a8:	85 37       	cpi	r24, 0x75	; 117
 7aa:	31 f4       	brne	.+12     	; 0x7b8 <vfprintf+0x24e>
 7ac:	23 2d       	mov	r18, r3
 7ae:	2f 7e       	andi	r18, 0xEF	; 239
 7b0:	b2 2e       	mov	r11, r18
 7b2:	2a e0       	ldi	r18, 0x0A	; 10
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	25 c0       	rjmp	.+74     	; 0x802 <vfprintf+0x298>
 7b8:	93 2d       	mov	r25, r3
 7ba:	99 7f       	andi	r25, 0xF9	; 249
 7bc:	b9 2e       	mov	r11, r25
 7be:	8f 36       	cpi	r24, 0x6F	; 111
 7c0:	c1 f0       	breq	.+48     	; 0x7f2 <vfprintf+0x288>
 7c2:	18 f4       	brcc	.+6      	; 0x7ca <vfprintf+0x260>
 7c4:	88 35       	cpi	r24, 0x58	; 88
 7c6:	79 f0       	breq	.+30     	; 0x7e6 <vfprintf+0x27c>
 7c8:	ae c0       	rjmp	.+348    	; 0x926 <vfprintf+0x3bc>
 7ca:	80 37       	cpi	r24, 0x70	; 112
 7cc:	19 f0       	breq	.+6      	; 0x7d4 <vfprintf+0x26a>
 7ce:	88 37       	cpi	r24, 0x78	; 120
 7d0:	21 f0       	breq	.+8      	; 0x7da <vfprintf+0x270>
 7d2:	a9 c0       	rjmp	.+338    	; 0x926 <vfprintf+0x3bc>
 7d4:	e9 2f       	mov	r30, r25
 7d6:	e0 61       	ori	r30, 0x10	; 16
 7d8:	be 2e       	mov	r11, r30
 7da:	b4 fe       	sbrs	r11, 4
 7dc:	0d c0       	rjmp	.+26     	; 0x7f8 <vfprintf+0x28e>
 7de:	fb 2d       	mov	r31, r11
 7e0:	f4 60       	ori	r31, 0x04	; 4
 7e2:	bf 2e       	mov	r11, r31
 7e4:	09 c0       	rjmp	.+18     	; 0x7f8 <vfprintf+0x28e>
 7e6:	34 fe       	sbrs	r3, 4
 7e8:	0a c0       	rjmp	.+20     	; 0x7fe <vfprintf+0x294>
 7ea:	29 2f       	mov	r18, r25
 7ec:	26 60       	ori	r18, 0x06	; 6
 7ee:	b2 2e       	mov	r11, r18
 7f0:	06 c0       	rjmp	.+12     	; 0x7fe <vfprintf+0x294>
 7f2:	28 e0       	ldi	r18, 0x08	; 8
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	05 c0       	rjmp	.+10     	; 0x802 <vfprintf+0x298>
 7f8:	20 e1       	ldi	r18, 0x10	; 16
 7fa:	30 e0       	ldi	r19, 0x00	; 0
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <vfprintf+0x298>
 7fe:	20 e1       	ldi	r18, 0x10	; 16
 800:	32 e0       	ldi	r19, 0x02	; 2
 802:	f8 01       	movw	r30, r16
 804:	b7 fe       	sbrs	r11, 7
 806:	07 c0       	rjmp	.+14     	; 0x816 <vfprintf+0x2ac>
 808:	60 81       	ld	r22, Z
 80a:	71 81       	ldd	r23, Z+1	; 0x01
 80c:	82 81       	ldd	r24, Z+2	; 0x02
 80e:	93 81       	ldd	r25, Z+3	; 0x03
 810:	0c 5f       	subi	r16, 0xFC	; 252
 812:	1f 4f       	sbci	r17, 0xFF	; 255
 814:	06 c0       	rjmp	.+12     	; 0x822 <vfprintf+0x2b8>
 816:	60 81       	ld	r22, Z
 818:	71 81       	ldd	r23, Z+1	; 0x01
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0e 5f       	subi	r16, 0xFE	; 254
 820:	1f 4f       	sbci	r17, 0xFF	; 255
 822:	a3 01       	movw	r20, r6
 824:	f1 d0       	rcall	.+482    	; 0xa08 <__ultoa_invert>
 826:	88 2e       	mov	r8, r24
 828:	86 18       	sub	r8, r6
 82a:	fb 2d       	mov	r31, r11
 82c:	ff 77       	andi	r31, 0x7F	; 127
 82e:	3f 2e       	mov	r3, r31
 830:	36 fe       	sbrs	r3, 6
 832:	0d c0       	rjmp	.+26     	; 0x84e <vfprintf+0x2e4>
 834:	23 2d       	mov	r18, r3
 836:	2e 7f       	andi	r18, 0xFE	; 254
 838:	a2 2e       	mov	r10, r18
 83a:	89 14       	cp	r8, r9
 83c:	58 f4       	brcc	.+22     	; 0x854 <vfprintf+0x2ea>
 83e:	34 fe       	sbrs	r3, 4
 840:	0b c0       	rjmp	.+22     	; 0x858 <vfprintf+0x2ee>
 842:	32 fc       	sbrc	r3, 2
 844:	09 c0       	rjmp	.+18     	; 0x858 <vfprintf+0x2ee>
 846:	83 2d       	mov	r24, r3
 848:	8e 7e       	andi	r24, 0xEE	; 238
 84a:	a8 2e       	mov	r10, r24
 84c:	05 c0       	rjmp	.+10     	; 0x858 <vfprintf+0x2ee>
 84e:	b8 2c       	mov	r11, r8
 850:	a3 2c       	mov	r10, r3
 852:	03 c0       	rjmp	.+6      	; 0x85a <vfprintf+0x2f0>
 854:	b8 2c       	mov	r11, r8
 856:	01 c0       	rjmp	.+2      	; 0x85a <vfprintf+0x2f0>
 858:	b9 2c       	mov	r11, r9
 85a:	a4 fe       	sbrs	r10, 4
 85c:	0f c0       	rjmp	.+30     	; 0x87c <vfprintf+0x312>
 85e:	fe 01       	movw	r30, r28
 860:	e8 0d       	add	r30, r8
 862:	f1 1d       	adc	r31, r1
 864:	80 81       	ld	r24, Z
 866:	80 33       	cpi	r24, 0x30	; 48
 868:	21 f4       	brne	.+8      	; 0x872 <vfprintf+0x308>
 86a:	9a 2d       	mov	r25, r10
 86c:	99 7e       	andi	r25, 0xE9	; 233
 86e:	a9 2e       	mov	r10, r25
 870:	09 c0       	rjmp	.+18     	; 0x884 <vfprintf+0x31a>
 872:	a2 fe       	sbrs	r10, 2
 874:	06 c0       	rjmp	.+12     	; 0x882 <vfprintf+0x318>
 876:	b3 94       	inc	r11
 878:	b3 94       	inc	r11
 87a:	04 c0       	rjmp	.+8      	; 0x884 <vfprintf+0x31a>
 87c:	8a 2d       	mov	r24, r10
 87e:	86 78       	andi	r24, 0x86	; 134
 880:	09 f0       	breq	.+2      	; 0x884 <vfprintf+0x31a>
 882:	b3 94       	inc	r11
 884:	a3 fc       	sbrc	r10, 3
 886:	10 c0       	rjmp	.+32     	; 0x8a8 <vfprintf+0x33e>
 888:	a0 fe       	sbrs	r10, 0
 88a:	06 c0       	rjmp	.+12     	; 0x898 <vfprintf+0x32e>
 88c:	b2 14       	cp	r11, r2
 88e:	80 f4       	brcc	.+32     	; 0x8b0 <vfprintf+0x346>
 890:	28 0c       	add	r2, r8
 892:	92 2c       	mov	r9, r2
 894:	9b 18       	sub	r9, r11
 896:	0d c0       	rjmp	.+26     	; 0x8b2 <vfprintf+0x348>
 898:	b2 14       	cp	r11, r2
 89a:	58 f4       	brcc	.+22     	; 0x8b2 <vfprintf+0x348>
 89c:	b6 01       	movw	r22, r12
 89e:	80 e2       	ldi	r24, 0x20	; 32
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	76 d0       	rcall	.+236    	; 0x990 <fputc>
 8a4:	b3 94       	inc	r11
 8a6:	f8 cf       	rjmp	.-16     	; 0x898 <vfprintf+0x32e>
 8a8:	b2 14       	cp	r11, r2
 8aa:	18 f4       	brcc	.+6      	; 0x8b2 <vfprintf+0x348>
 8ac:	2b 18       	sub	r2, r11
 8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <vfprintf+0x34a>
 8b0:	98 2c       	mov	r9, r8
 8b2:	21 2c       	mov	r2, r1
 8b4:	a4 fe       	sbrs	r10, 4
 8b6:	0f c0       	rjmp	.+30     	; 0x8d6 <vfprintf+0x36c>
 8b8:	b6 01       	movw	r22, r12
 8ba:	80 e3       	ldi	r24, 0x30	; 48
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	68 d0       	rcall	.+208    	; 0x990 <fputc>
 8c0:	a2 fe       	sbrs	r10, 2
 8c2:	16 c0       	rjmp	.+44     	; 0x8f0 <vfprintf+0x386>
 8c4:	a1 fc       	sbrc	r10, 1
 8c6:	03 c0       	rjmp	.+6      	; 0x8ce <vfprintf+0x364>
 8c8:	88 e7       	ldi	r24, 0x78	; 120
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <vfprintf+0x368>
 8ce:	88 e5       	ldi	r24, 0x58	; 88
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	b6 01       	movw	r22, r12
 8d4:	0c c0       	rjmp	.+24     	; 0x8ee <vfprintf+0x384>
 8d6:	8a 2d       	mov	r24, r10
 8d8:	86 78       	andi	r24, 0x86	; 134
 8da:	51 f0       	breq	.+20     	; 0x8f0 <vfprintf+0x386>
 8dc:	a1 fe       	sbrs	r10, 1
 8de:	02 c0       	rjmp	.+4      	; 0x8e4 <vfprintf+0x37a>
 8e0:	8b e2       	ldi	r24, 0x2B	; 43
 8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <vfprintf+0x37c>
 8e4:	80 e2       	ldi	r24, 0x20	; 32
 8e6:	a7 fc       	sbrc	r10, 7
 8e8:	8d e2       	ldi	r24, 0x2D	; 45
 8ea:	b6 01       	movw	r22, r12
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	50 d0       	rcall	.+160    	; 0x990 <fputc>
 8f0:	89 14       	cp	r8, r9
 8f2:	30 f4       	brcc	.+12     	; 0x900 <vfprintf+0x396>
 8f4:	b6 01       	movw	r22, r12
 8f6:	80 e3       	ldi	r24, 0x30	; 48
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	4a d0       	rcall	.+148    	; 0x990 <fputc>
 8fc:	9a 94       	dec	r9
 8fe:	f8 cf       	rjmp	.-16     	; 0x8f0 <vfprintf+0x386>
 900:	8a 94       	dec	r8
 902:	f3 01       	movw	r30, r6
 904:	e8 0d       	add	r30, r8
 906:	f1 1d       	adc	r31, r1
 908:	80 81       	ld	r24, Z
 90a:	b6 01       	movw	r22, r12
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	40 d0       	rcall	.+128    	; 0x990 <fputc>
 910:	81 10       	cpse	r8, r1
 912:	f6 cf       	rjmp	.-20     	; 0x900 <vfprintf+0x396>
 914:	22 20       	and	r2, r2
 916:	09 f4       	brne	.+2      	; 0x91a <vfprintf+0x3b0>
 918:	4e ce       	rjmp	.-868    	; 0x5b6 <vfprintf+0x4c>
 91a:	b6 01       	movw	r22, r12
 91c:	80 e2       	ldi	r24, 0x20	; 32
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	37 d0       	rcall	.+110    	; 0x990 <fputc>
 922:	2a 94       	dec	r2
 924:	f7 cf       	rjmp	.-18     	; 0x914 <vfprintf+0x3aa>
 926:	f6 01       	movw	r30, r12
 928:	86 81       	ldd	r24, Z+6	; 0x06
 92a:	97 81       	ldd	r25, Z+7	; 0x07
 92c:	02 c0       	rjmp	.+4      	; 0x932 <vfprintf+0x3c8>
 92e:	8f ef       	ldi	r24, 0xFF	; 255
 930:	9f ef       	ldi	r25, 0xFF	; 255
 932:	2b 96       	adiw	r28, 0x0b	; 11
 934:	0f b6       	in	r0, 0x3f	; 63
 936:	f8 94       	cli
 938:	de bf       	out	0x3e, r29	; 62
 93a:	0f be       	out	0x3f, r0	; 63
 93c:	cd bf       	out	0x3d, r28	; 61
 93e:	df 91       	pop	r29
 940:	cf 91       	pop	r28
 942:	1f 91       	pop	r17
 944:	0f 91       	pop	r16
 946:	ff 90       	pop	r15
 948:	ef 90       	pop	r14
 94a:	df 90       	pop	r13
 94c:	cf 90       	pop	r12
 94e:	bf 90       	pop	r11
 950:	af 90       	pop	r10
 952:	9f 90       	pop	r9
 954:	8f 90       	pop	r8
 956:	7f 90       	pop	r7
 958:	6f 90       	pop	r6
 95a:	5f 90       	pop	r5
 95c:	4f 90       	pop	r4
 95e:	3f 90       	pop	r3
 960:	2f 90       	pop	r2
 962:	08 95       	ret

00000964 <strnlen_P>:
 964:	fc 01       	movw	r30, r24
 966:	05 90       	lpm	r0, Z+
 968:	61 50       	subi	r22, 0x01	; 1
 96a:	70 40       	sbci	r23, 0x00	; 0
 96c:	01 10       	cpse	r0, r1
 96e:	d8 f7       	brcc	.-10     	; 0x966 <strnlen_P+0x2>
 970:	80 95       	com	r24
 972:	90 95       	com	r25
 974:	8e 0f       	add	r24, r30
 976:	9f 1f       	adc	r25, r31
 978:	08 95       	ret

0000097a <strnlen>:
 97a:	fc 01       	movw	r30, r24
 97c:	61 50       	subi	r22, 0x01	; 1
 97e:	70 40       	sbci	r23, 0x00	; 0
 980:	01 90       	ld	r0, Z+
 982:	01 10       	cpse	r0, r1
 984:	d8 f7       	brcc	.-10     	; 0x97c <strnlen+0x2>
 986:	80 95       	com	r24
 988:	90 95       	com	r25
 98a:	8e 0f       	add	r24, r30
 98c:	9f 1f       	adc	r25, r31
 98e:	08 95       	ret

00000990 <fputc>:
 990:	0f 93       	push	r16
 992:	1f 93       	push	r17
 994:	cf 93       	push	r28
 996:	df 93       	push	r29
 998:	fb 01       	movw	r30, r22
 99a:	23 81       	ldd	r18, Z+3	; 0x03
 99c:	21 fd       	sbrc	r18, 1
 99e:	03 c0       	rjmp	.+6      	; 0x9a6 <fputc+0x16>
 9a0:	8f ef       	ldi	r24, 0xFF	; 255
 9a2:	9f ef       	ldi	r25, 0xFF	; 255
 9a4:	2c c0       	rjmp	.+88     	; 0x9fe <fputc+0x6e>
 9a6:	22 ff       	sbrs	r18, 2
 9a8:	16 c0       	rjmp	.+44     	; 0x9d6 <fputc+0x46>
 9aa:	46 81       	ldd	r20, Z+6	; 0x06
 9ac:	57 81       	ldd	r21, Z+7	; 0x07
 9ae:	24 81       	ldd	r18, Z+4	; 0x04
 9b0:	35 81       	ldd	r19, Z+5	; 0x05
 9b2:	42 17       	cp	r20, r18
 9b4:	53 07       	cpc	r21, r19
 9b6:	44 f4       	brge	.+16     	; 0x9c8 <fputc+0x38>
 9b8:	a0 81       	ld	r26, Z
 9ba:	b1 81       	ldd	r27, Z+1	; 0x01
 9bc:	9d 01       	movw	r18, r26
 9be:	2f 5f       	subi	r18, 0xFF	; 255
 9c0:	3f 4f       	sbci	r19, 0xFF	; 255
 9c2:	31 83       	std	Z+1, r19	; 0x01
 9c4:	20 83       	st	Z, r18
 9c6:	8c 93       	st	X, r24
 9c8:	26 81       	ldd	r18, Z+6	; 0x06
 9ca:	37 81       	ldd	r19, Z+7	; 0x07
 9cc:	2f 5f       	subi	r18, 0xFF	; 255
 9ce:	3f 4f       	sbci	r19, 0xFF	; 255
 9d0:	37 83       	std	Z+7, r19	; 0x07
 9d2:	26 83       	std	Z+6, r18	; 0x06
 9d4:	14 c0       	rjmp	.+40     	; 0x9fe <fputc+0x6e>
 9d6:	8b 01       	movw	r16, r22
 9d8:	ec 01       	movw	r28, r24
 9da:	fb 01       	movw	r30, r22
 9dc:	00 84       	ldd	r0, Z+8	; 0x08
 9de:	f1 85       	ldd	r31, Z+9	; 0x09
 9e0:	e0 2d       	mov	r30, r0
 9e2:	09 95       	icall
 9e4:	89 2b       	or	r24, r25
 9e6:	e1 f6       	brne	.-72     	; 0x9a0 <fputc+0x10>
 9e8:	d8 01       	movw	r26, r16
 9ea:	16 96       	adiw	r26, 0x06	; 6
 9ec:	8d 91       	ld	r24, X+
 9ee:	9c 91       	ld	r25, X
 9f0:	17 97       	sbiw	r26, 0x07	; 7
 9f2:	01 96       	adiw	r24, 0x01	; 1
 9f4:	17 96       	adiw	r26, 0x07	; 7
 9f6:	9c 93       	st	X, r25
 9f8:	8e 93       	st	-X, r24
 9fa:	16 97       	sbiw	r26, 0x06	; 6
 9fc:	ce 01       	movw	r24, r28
 9fe:	df 91       	pop	r29
 a00:	cf 91       	pop	r28
 a02:	1f 91       	pop	r17
 a04:	0f 91       	pop	r16
 a06:	08 95       	ret

00000a08 <__ultoa_invert>:
 a08:	fa 01       	movw	r30, r20
 a0a:	aa 27       	eor	r26, r26
 a0c:	28 30       	cpi	r18, 0x08	; 8
 a0e:	51 f1       	breq	.+84     	; 0xa64 <__ultoa_invert+0x5c>
 a10:	20 31       	cpi	r18, 0x10	; 16
 a12:	81 f1       	breq	.+96     	; 0xa74 <__ultoa_invert+0x6c>
 a14:	e8 94       	clt
 a16:	6f 93       	push	r22
 a18:	6e 7f       	andi	r22, 0xFE	; 254
 a1a:	6e 5f       	subi	r22, 0xFE	; 254
 a1c:	7f 4f       	sbci	r23, 0xFF	; 255
 a1e:	8f 4f       	sbci	r24, 0xFF	; 255
 a20:	9f 4f       	sbci	r25, 0xFF	; 255
 a22:	af 4f       	sbci	r26, 0xFF	; 255
 a24:	b1 e0       	ldi	r27, 0x01	; 1
 a26:	3e d0       	rcall	.+124    	; 0xaa4 <__ultoa_invert+0x9c>
 a28:	b4 e0       	ldi	r27, 0x04	; 4
 a2a:	3c d0       	rcall	.+120    	; 0xaa4 <__ultoa_invert+0x9c>
 a2c:	67 0f       	add	r22, r23
 a2e:	78 1f       	adc	r23, r24
 a30:	89 1f       	adc	r24, r25
 a32:	9a 1f       	adc	r25, r26
 a34:	a1 1d       	adc	r26, r1
 a36:	68 0f       	add	r22, r24
 a38:	79 1f       	adc	r23, r25
 a3a:	8a 1f       	adc	r24, r26
 a3c:	91 1d       	adc	r25, r1
 a3e:	a1 1d       	adc	r26, r1
 a40:	6a 0f       	add	r22, r26
 a42:	71 1d       	adc	r23, r1
 a44:	81 1d       	adc	r24, r1
 a46:	91 1d       	adc	r25, r1
 a48:	a1 1d       	adc	r26, r1
 a4a:	20 d0       	rcall	.+64     	; 0xa8c <__ultoa_invert+0x84>
 a4c:	09 f4       	brne	.+2      	; 0xa50 <__ultoa_invert+0x48>
 a4e:	68 94       	set
 a50:	3f 91       	pop	r19
 a52:	2a e0       	ldi	r18, 0x0A	; 10
 a54:	26 9f       	mul	r18, r22
 a56:	11 24       	eor	r1, r1
 a58:	30 19       	sub	r19, r0
 a5a:	30 5d       	subi	r19, 0xD0	; 208
 a5c:	31 93       	st	Z+, r19
 a5e:	de f6       	brtc	.-74     	; 0xa16 <__ultoa_invert+0xe>
 a60:	cf 01       	movw	r24, r30
 a62:	08 95       	ret
 a64:	46 2f       	mov	r20, r22
 a66:	47 70       	andi	r20, 0x07	; 7
 a68:	40 5d       	subi	r20, 0xD0	; 208
 a6a:	41 93       	st	Z+, r20
 a6c:	b3 e0       	ldi	r27, 0x03	; 3
 a6e:	0f d0       	rcall	.+30     	; 0xa8e <__ultoa_invert+0x86>
 a70:	c9 f7       	brne	.-14     	; 0xa64 <__ultoa_invert+0x5c>
 a72:	f6 cf       	rjmp	.-20     	; 0xa60 <__ultoa_invert+0x58>
 a74:	46 2f       	mov	r20, r22
 a76:	4f 70       	andi	r20, 0x0F	; 15
 a78:	40 5d       	subi	r20, 0xD0	; 208
 a7a:	4a 33       	cpi	r20, 0x3A	; 58
 a7c:	18 f0       	brcs	.+6      	; 0xa84 <__ultoa_invert+0x7c>
 a7e:	49 5d       	subi	r20, 0xD9	; 217
 a80:	31 fd       	sbrc	r19, 1
 a82:	40 52       	subi	r20, 0x20	; 32
 a84:	41 93       	st	Z+, r20
 a86:	02 d0       	rcall	.+4      	; 0xa8c <__ultoa_invert+0x84>
 a88:	a9 f7       	brne	.-22     	; 0xa74 <__ultoa_invert+0x6c>
 a8a:	ea cf       	rjmp	.-44     	; 0xa60 <__ultoa_invert+0x58>
 a8c:	b4 e0       	ldi	r27, 0x04	; 4
 a8e:	a6 95       	lsr	r26
 a90:	97 95       	ror	r25
 a92:	87 95       	ror	r24
 a94:	77 95       	ror	r23
 a96:	67 95       	ror	r22
 a98:	ba 95       	dec	r27
 a9a:	c9 f7       	brne	.-14     	; 0xa8e <__ultoa_invert+0x86>
 a9c:	00 97       	sbiw	r24, 0x00	; 0
 a9e:	61 05       	cpc	r22, r1
 aa0:	71 05       	cpc	r23, r1
 aa2:	08 95       	ret
 aa4:	9b 01       	movw	r18, r22
 aa6:	ac 01       	movw	r20, r24
 aa8:	0a 2e       	mov	r0, r26
 aaa:	06 94       	lsr	r0
 aac:	57 95       	ror	r21
 aae:	47 95       	ror	r20
 ab0:	37 95       	ror	r19
 ab2:	27 95       	ror	r18
 ab4:	ba 95       	dec	r27
 ab6:	c9 f7       	brne	.-14     	; 0xaaa <__ultoa_invert+0xa2>
 ab8:	62 0f       	add	r22, r18
 aba:	73 1f       	adc	r23, r19
 abc:	84 1f       	adc	r24, r20
 abe:	95 1f       	adc	r25, r21
 ac0:	a0 1d       	adc	r26, r0
 ac2:	08 95       	ret

00000ac4 <_exit>:
 ac4:	f8 94       	cli

00000ac6 <__stop_program>:
 ac6:	ff cf       	rjmp	.-2      	; 0xac6 <__stop_program>
