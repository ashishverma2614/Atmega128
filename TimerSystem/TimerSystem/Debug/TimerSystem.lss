
TimerSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00000c5e  00000cf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080015c  0080015c  00000d4e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000efb  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009df  00000000  00000000  00001ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082b  00000000  00000000  000027be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003fc  00000000  00000000  00002fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000601  00000000  00000000  000033e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000888  00000000  00000000  000039e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004271  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	0c c1       	rjmp	.+536    	; 0x226 <__vector_3>
   e:	00 00       	nop
  10:	43 c1       	rjmp	.+646    	; 0x298 <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7c c1       	rjmp	.+760    	; 0x316 <__vector_7>
  1e:	00 00       	nop
  20:	0f c2       	rjmp	.+1054   	; 0x440 <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	92 c0       	rjmp	.+292    	; 0x156 <__vector_12>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	61 c0       	rjmp	.+194    	; 0x100 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	91 c0       	rjmp	.+290    	; 0x18c <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e5       	ldi	r30, 0x5E	; 94
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 35       	cpi	r26, 0x5C	; 92
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e5       	ldi	r26, 0x5C	; 92
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 36       	cpi	r26, 0x6C	; 108
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b9 d2       	rcall	.+1394   	; 0x636 <main>
  c4:	ca c5       	rjmp	.+2964   	; 0xc5a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <UART0_Putch>:
    int i = 0;
    while(str[i] != 0)
    {
        UART1_Putch(str[i++]);
    }
}
  c8:	5d 9b       	sbis	0x0b, 5	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <UART0_Putch>
  cc:	8c b9       	out	0x0c, r24	; 12
  ce:	08 95       	ret

000000d0 <UART0_Init>:
  d0:	1b b8       	out	0x0b, r1	; 11
  d2:	28 e9       	ldi	r18, 0x98	; 152
  d4:	2a b9       	out	0x0a, r18	; 10
  d6:	26 e0       	ldi	r18, 0x06	; 6
  d8:	20 93 95 00 	sts	0x0095, r18	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  dc:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  e0:	89 b9       	out	0x09, r24	; 9
  e2:	08 95       	ret

000000e4 <UART0_Puts>:
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
  ea:	88 81       	ld	r24, Y
  ec:	88 23       	and	r24, r24
  ee:	29 f0       	breq	.+10     	; 0xfa <UART0_Puts+0x16>
  f0:	21 96       	adiw	r28, 0x01	; 1
  f2:	ea df       	rcall	.-44     	; 0xc8 <UART0_Putch>
  f4:	89 91       	ld	r24, Y+
  f6:	81 11       	cpse	r24, r1
  f8:	fc cf       	rjmp	.-8      	; 0xf2 <UART0_Puts+0xe>
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <__vector_15>:
    Debug ();
	printf("%d \n", mode);
}
///////////////////////////////////////////////////////////////////////////////
ISR(TIMER0_COMP_vect) // 1ms -> for 0.5sec interval blinking fnd
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	2f 93       	push	r18
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
	static unsigned int tick0_blinking;
    
    tick0_blinking++;
 110:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <tick0_blinking.2337>
 114:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <tick0_blinking.2337+0x1>
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <tick0_blinking.2337+0x1>
 11e:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <tick0_blinking.2337>
    if (tick0_blinking <= 500) isTurnOn = TRUE;
 122:	85 3f       	cpi	r24, 0xF5	; 245
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	92 07       	cpc	r25, r18
 128:	20 f4       	brcc	.+8      	; 0x132 <__vector_15+0x32>
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <isTurnOn>
 130:	0a c0       	rjmp	.+20     	; 0x146 <__vector_15+0x46>
    else if (tick0_blinking <= 1000) isTurnOn = FALSE;
 132:	89 3e       	cpi	r24, 0xE9	; 233
 134:	93 40       	sbci	r25, 0x03	; 3
 136:	18 f4       	brcc	.+6      	; 0x13e <__vector_15+0x3e>
 138:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <isTurnOn>
 13c:	04 c0       	rjmp	.+8      	; 0x146 <__vector_15+0x46>
    else tick0_blinking = 0;
 13e:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <tick0_blinking.2337+0x1>
 142:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <tick0_blinking.2337>
}
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <__vector_12>:

ISR(TIMER1_COMPA_vect) // 0.1ms for 1ms dynamic display
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	8f 93       	push	r24
    static unsigned char tick1_dynamicOp;
    
    tick1_dynamicOp++;
 162:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 166:	8f 5f       	subi	r24, 0xFF	; 255
 168:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
    if (tick1_dynamicOp <= 10) isChangeFnd = FALSE;
 16c:	8b 30       	cpi	r24, 0x0B	; 11
 16e:	18 f4       	brcc	.+6      	; 0x176 <__vector_12+0x20>
 170:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <isChangeFnd>
 174:	05 c0       	rjmp	.+10     	; 0x180 <__vector_12+0x2a>
    else
    {
        isChangeFnd = TRUE;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <isChangeFnd>
        tick1_dynamicOp = 0;
 17c:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end>
    }
}
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <__vector_26>:
//FIXME
ISR(TIMER3_COMPA_vect) // 100 ms count up
{
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	2f 93       	push	r18
 198:	8f 93       	push	r24
 19a:	9f 93       	push	r25
 19c:	af 93       	push	r26
 19e:	bf 93       	push	r27
    fndStartNum++;
 1a0:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <fndStartNum>
 1a4:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <fndStartNum+0x1>
 1a8:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <fndStartNum+0x2>
 1ac:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <fndStartNum+0x3>
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	a1 1d       	adc	r26, r1
 1b4:	b1 1d       	adc	r27, r1
 1b6:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <fndStartNum>
 1ba:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <fndStartNum+0x1>
 1be:	a0 93 63 01 	sts	0x0163, r26	; 0x800163 <fndStartNum+0x2>
 1c2:	b0 93 64 01 	sts	0x0164, r27	; 0x800164 <fndStartNum+0x3>
    if (fndStartNum > 9999) fndStartNum = 0;
 1c6:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <fndStartNum>
 1ca:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <fndStartNum+0x1>
 1ce:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <fndStartNum+0x2>
 1d2:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <fndStartNum+0x3>
 1d6:	80 31       	cpi	r24, 0x10	; 16
 1d8:	97 42       	sbci	r25, 0x27	; 39
 1da:	a1 05       	cpc	r26, r1
 1dc:	b1 05       	cpc	r27, r1
 1de:	40 f0       	brcs	.+16     	; 0x1f0 <__vector_26+0x64>
 1e0:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <fndStartNum>
 1e4:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <fndStartNum+0x1>
 1e8:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <fndStartNum+0x2>
 1ec:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <fndStartNum+0x3>
}
 1f0:	bf 91       	pop	r27
 1f2:	af 91       	pop	r26
 1f4:	9f 91       	pop	r25
 1f6:	8f 91       	pop	r24
 1f8:	2f 91       	pop	r18
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <Debug>:
///////////////////////////////////////////////////////////////////////////////
/*5. Function Implementation */

void Debug () // debug code using serial monitor and LED blinking
{
	UART0_Puts ("SW pressed!\r\n");
 204:	8d e1       	ldi	r24, 0x1D	; 29
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	6d df       	rcall	.-294    	; 0xe4 <UART0_Puts>
	DDRB = 0x01;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x01;
 20e:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 210:	2f ef       	ldi	r18, 0xFF	; 255
 212:	84 e3       	ldi	r24, 0x34	; 52
 214:	9c e0       	ldi	r25, 0x0C	; 12
 216:	21 50       	subi	r18, 0x01	; 1
 218:	80 40       	sbci	r24, 0x00	; 0
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <Debug+0x12>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <Debug+0x1c>
 220:	00 00       	nop
	_delay_ms(250);
	PORTB = 0x00;
 222:	18 ba       	out	0x18, r1	; 24
 224:	08 95       	ret

00000226 <__vector_3>:

///////////////////////////////////////////////////////////////////////////////

/* 3. ISR */
ISR(INT2_vect) // key1: enter count set mode, blink the first position
{
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	0b b6       	in	r0, 0x3b	; 59
 232:	0f 92       	push	r0
 234:	2f 93       	push	r18
 236:	3f 93       	push	r19
 238:	4f 93       	push	r20
 23a:	5f 93       	push	r21
 23c:	6f 93       	push	r22
 23e:	7f 93       	push	r23
 240:	8f 93       	push	r24
 242:	9f 93       	push	r25
 244:	af 93       	push	r26
 246:	bf 93       	push	r27
 248:	ef 93       	push	r30
 24a:	ff 93       	push	r31
	fndIndex = 0; // jump to the timer for blinking
 24c:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <fndIndex>
	mode = TIMER_SET;
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <mode>
    
    /* For debug */
    Debug ();
 256:	d6 df       	rcall	.-84     	; 0x204 <Debug>
    printf("%d \n", mode);
 258:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mode>
 25c:	1f 92       	push	r1
 25e:	8f 93       	push	r24
 260:	8b e2       	ldi	r24, 0x2B	; 43
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	9f 93       	push	r25
 266:	8f 93       	push	r24
 268:	0a d2       	rcall	.+1044   	; 0x67e <printf>
}
 26a:	0f 90       	pop	r0
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	0f 90       	pop	r0
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	bf 91       	pop	r27
 278:	af 91       	pop	r26
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	7f 91       	pop	r23
 280:	6f 91       	pop	r22
 282:	5f 91       	pop	r21
 284:	4f 91       	pop	r20
 286:	3f 91       	pop	r19
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0b be       	out	0x3b, r0	; 59
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <__vector_4>:
ISR(INT3_vect) // key2: change fnd blinking position
{
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	0b b6       	in	r0, 0x3b	; 59
 2a4:	0f 92       	push	r0
 2a6:	2f 93       	push	r18
 2a8:	3f 93       	push	r19
 2aa:	4f 93       	push	r20
 2ac:	5f 93       	push	r21
 2ae:	6f 93       	push	r22
 2b0:	7f 93       	push	r23
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
 2b6:	af 93       	push	r26
 2b8:	bf 93       	push	r27
 2ba:	ef 93       	push	r30
 2bc:	ff 93       	push	r31
	fndIndex++;
 2be:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <fndIndex>
 2c2:	8f 5f       	subi	r24, 0xFF	; 255
 2c4:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <fndIndex>
	if (fndIndex > 3) fndIndex = 0; // reset index
 2c8:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <fndIndex>
 2cc:	84 30       	cpi	r24, 0x04	; 4
 2ce:	10 f0       	brcs	.+4      	; 0x2d4 <__vector_4+0x3c>
 2d0:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <fndIndex>
    
    /* For debug */
    Debug ();
 2d4:	97 df       	rcall	.-210    	; 0x204 <Debug>
    printf("%d\n", fndIndex);
 2d6:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <fndIndex>
 2da:	1f 92       	push	r1
 2dc:	8f 93       	push	r24
 2de:	80 e3       	ldi	r24, 0x30	; 48
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	9f 93       	push	r25
 2e4:	8f 93       	push	r24
 2e6:	cb d1       	rcall	.+918    	; 0x67e <printf>
}
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
 2ec:	0f 90       	pop	r0
 2ee:	0f 90       	pop	r0
 2f0:	ff 91       	pop	r31
 2f2:	ef 91       	pop	r30
 2f4:	bf 91       	pop	r27
 2f6:	af 91       	pop	r26
 2f8:	9f 91       	pop	r25
 2fa:	8f 91       	pop	r24
 2fc:	7f 91       	pop	r23
 2fe:	6f 91       	pop	r22
 300:	5f 91       	pop	r21
 302:	4f 91       	pop	r20
 304:	3f 91       	pop	r19
 306:	2f 91       	pop	r18
 308:	0f 90       	pop	r0
 30a:	0b be       	out	0x3b, r0	; 59
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <__vector_7>:
ISR(INT6_vect) // key3 : count-up fnd number at current position
{
 316:	1f 92       	push	r1
 318:	0f 92       	push	r0
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	0f 92       	push	r0
 31e:	11 24       	eor	r1, r1
 320:	0b b6       	in	r0, 0x3b	; 59
 322:	0f 92       	push	r0
 324:	2f 93       	push	r18
 326:	3f 93       	push	r19
 328:	4f 93       	push	r20
 32a:	5f 93       	push	r21
 32c:	6f 93       	push	r22
 32e:	7f 93       	push	r23
 330:	8f 93       	push	r24
 332:	9f 93       	push	r25
 334:	af 93       	push	r26
 336:	bf 93       	push	r27
 338:	ef 93       	push	r30
 33a:	ff 93       	push	r31
	fndNum[fndIndex]++;
 33c:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <fndIndex>
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	e0 50       	subi	r30, 0x00	; 0
 344:	ff 4f       	sbci	r31, 0xFF	; 255
 346:	80 81       	ld	r24, Z
 348:	8f 5f       	subi	r24, 0xFF	; 255
 34a:	80 83       	st	Z, r24
	if (fndNum[fndIndex] > 0x39) fndNum[fndIndex] = 0x30; // reset value
 34c:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <fndIndex>
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	e0 50       	subi	r30, 0x00	; 0
 354:	ff 4f       	sbci	r31, 0xFF	; 255
 356:	80 81       	ld	r24, Z
 358:	8a 33       	cpi	r24, 0x3A	; 58
 35a:	38 f0       	brcs	.+14     	; 0x36a <__vector_7+0x54>
 35c:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <fndIndex>
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	e0 50       	subi	r30, 0x00	; 0
 364:	ff 4f       	sbci	r31, 0xFF	; 255
 366:	80 e3       	ldi	r24, 0x30	; 48
 368:	80 83       	st	Z, r24

    /* convert data to int for start count */
    // also possible to use atoi()
    fndStartNum = 1000 * (fndNum[3] - 0x30) + 100 * (fndNum[2] - 0x30) + 10 * (fndNum[1] - 0x30) + (fndNum[0] - 0x30);
 36a:	e0 e0       	ldi	r30, 0x00	; 0
 36c:	f1 e0       	ldi	r31, 0x01	; 1
 36e:	23 81       	ldd	r18, Z+3	; 0x03
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	20 53       	subi	r18, 0x30	; 48
 374:	31 09       	sbc	r19, r1
 376:	88 ee       	ldi	r24, 0xE8	; 232
 378:	93 e0       	ldi	r25, 0x03	; 3
 37a:	28 9f       	mul	r18, r24
 37c:	a0 01       	movw	r20, r0
 37e:	29 9f       	mul	r18, r25
 380:	50 0d       	add	r21, r0
 382:	38 9f       	mul	r19, r24
 384:	50 0d       	add	r21, r0
 386:	11 24       	eor	r1, r1
 388:	22 81       	ldd	r18, Z+2	; 0x02
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	20 53       	subi	r18, 0x30	; 48
 38e:	31 09       	sbc	r19, r1
 390:	64 e6       	ldi	r22, 0x64	; 100
 392:	62 9f       	mul	r22, r18
 394:	c0 01       	movw	r24, r0
 396:	63 9f       	mul	r22, r19
 398:	90 0d       	add	r25, r0
 39a:	11 24       	eor	r1, r1
 39c:	48 0f       	add	r20, r24
 39e:	59 1f       	adc	r21, r25
 3a0:	21 81       	ldd	r18, Z+1	; 0x01
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	c9 01       	movw	r24, r18
 3a6:	c0 97       	sbiw	r24, 0x30	; 48
 3a8:	bc 01       	movw	r22, r24
 3aa:	66 0f       	add	r22, r22
 3ac:	77 1f       	adc	r23, r23
 3ae:	9c 01       	movw	r18, r24
 3b0:	22 0f       	add	r18, r18
 3b2:	33 1f       	adc	r19, r19
 3b4:	22 0f       	add	r18, r18
 3b6:	33 1f       	adc	r19, r19
 3b8:	22 0f       	add	r18, r18
 3ba:	33 1f       	adc	r19, r19
 3bc:	cb 01       	movw	r24, r22
 3be:	82 0f       	add	r24, r18
 3c0:	93 1f       	adc	r25, r19
 3c2:	84 0f       	add	r24, r20
 3c4:	95 1f       	adc	r25, r21
 3c6:	20 81       	ld	r18, Z
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	20 53       	subi	r18, 0x30	; 48
 3cc:	31 09       	sbc	r19, r1
 3ce:	82 0f       	add	r24, r18
 3d0:	93 1f       	adc	r25, r19
 3d2:	09 2e       	mov	r0, r25
 3d4:	00 0c       	add	r0, r0
 3d6:	aa 0b       	sbc	r26, r26
 3d8:	bb 0b       	sbc	r27, r27
 3da:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <fndStartNum>
 3de:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <fndStartNum+0x1>
 3e2:	a0 93 63 01 	sts	0x0163, r26	; 0x800163 <fndStartNum+0x2>
 3e6:	b0 93 64 01 	sts	0x0164, r27	; 0x800164 <fndStartNum+0x3>
    
    /* For debug */
    Debug ();
 3ea:	0c df       	rcall	.-488    	; 0x204 <Debug>
    printf("Stored fnd start number is: %lu \n", fndStartNum);
 3ec:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <fndStartNum>
 3f0:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <fndStartNum+0x1>
 3f4:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <fndStartNum+0x2>
 3f8:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <fndStartNum+0x3>
 3fc:	bf 93       	push	r27
 3fe:	af 93       	push	r26
 400:	9f 93       	push	r25
 402:	8f 93       	push	r24
 404:	84 e3       	ldi	r24, 0x34	; 52
 406:	91 e0       	ldi	r25, 0x01	; 1
 408:	9f 93       	push	r25
 40a:	8f 93       	push	r24
 40c:	38 d1       	rcall	.+624    	; 0x67e <printf>
}
 40e:	0f 90       	pop	r0
 410:	0f 90       	pop	r0
 412:	0f 90       	pop	r0
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	0f 90       	pop	r0
 41a:	ff 91       	pop	r31
 41c:	ef 91       	pop	r30
 41e:	bf 91       	pop	r27
 420:	af 91       	pop	r26
 422:	9f 91       	pop	r25
 424:	8f 91       	pop	r24
 426:	7f 91       	pop	r23
 428:	6f 91       	pop	r22
 42a:	5f 91       	pop	r21
 42c:	4f 91       	pop	r20
 42e:	3f 91       	pop	r19
 430:	2f 91       	pop	r18
 432:	0f 90       	pop	r0
 434:	0b be       	out	0x3b, r0	; 59
 436:	0f 90       	pop	r0
 438:	0f be       	out	0x3f, r0	; 63
 43a:	0f 90       	pop	r0
 43c:	1f 90       	pop	r1
 43e:	18 95       	reti

00000440 <__vector_8>:
ISR(INT7_vect)
{
 440:	1f 92       	push	r1
 442:	0f 92       	push	r0
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	0f 92       	push	r0
 448:	11 24       	eor	r1, r1
 44a:	0b b6       	in	r0, 0x3b	; 59
 44c:	0f 92       	push	r0
 44e:	2f 93       	push	r18
 450:	3f 93       	push	r19
 452:	4f 93       	push	r20
 454:	5f 93       	push	r21
 456:	6f 93       	push	r22
 458:	7f 93       	push	r23
 45a:	8f 93       	push	r24
 45c:	9f 93       	push	r25
 45e:	af 93       	push	r26
 460:	bf 93       	push	r27
 462:	ef 93       	push	r30
 464:	ff 93       	push	r31
	mode = COUNT_UP; // jump to count-up mode
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <mode>
    
    /* For debug */
    Debug ();
 46c:	cb de       	rcall	.-618    	; 0x204 <Debug>
	printf("%d \n", mode);
 46e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mode>
 472:	1f 92       	push	r1
 474:	8f 93       	push	r24
 476:	8b e2       	ldi	r24, 0x2B	; 43
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	9f 93       	push	r25
 47c:	8f 93       	push	r24
 47e:	ff d0       	rcall	.+510    	; 0x67e <printf>
}
 480:	0f 90       	pop	r0
 482:	0f 90       	pop	r0
 484:	0f 90       	pop	r0
 486:	0f 90       	pop	r0
 488:	ff 91       	pop	r31
 48a:	ef 91       	pop	r30
 48c:	bf 91       	pop	r27
 48e:	af 91       	pop	r26
 490:	9f 91       	pop	r25
 492:	8f 91       	pop	r24
 494:	7f 91       	pop	r23
 496:	6f 91       	pop	r22
 498:	5f 91       	pop	r21
 49a:	4f 91       	pop	r20
 49c:	3f 91       	pop	r19
 49e:	2f 91       	pop	r18
 4a0:	0f 90       	pop	r0
 4a2:	0b be       	out	0x3b, r0	; 59
 4a4:	0f 90       	pop	r0
 4a6:	0f be       	out	0x3f, r0	; 63
 4a8:	0f 90       	pop	r0
 4aa:	1f 90       	pop	r1
 4ac:	18 95       	reti

000004ae <EXINT_init>:
	_delay_ms(250);
	PORTB = 0x00;
}
void EXINT_init()
{
	DDRD = 0b11110011; // PIND[2:3] as input
 4ae:	83 ef       	ldi	r24, 0xF3	; 243
 4b0:	81 bb       	out	0x11, r24	; 17
	DDRE = 0b00111111; // PINE[6:7] as input
 4b2:	8f e3       	ldi	r24, 0x3F	; 63
 4b4:	82 b9       	out	0x02, r24	; 2
	// internal pull-up resistor
	PORTD = 0b00001100; 
 4b6:	8c e0       	ldi	r24, 0x0C	; 12
 4b8:	82 bb       	out	0x12, r24	; 18
	PORTE = 0b11000000;
 4ba:	80 ec       	ldi	r24, 0xC0	; 192
 4bc:	83 b9       	out	0x03, r24	; 3

	// Reg. setting
	EICRA = (1 << ISC21) + (1 << ISC31); // falling edge trigger detection
 4be:	80 ea       	ldi	r24, 0xA0	; 160
 4c0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB = (1 << ISC61) + (1 << ISC71);
 4c4:	8a bf       	out	0x3a, r24	; 58
	EIMSK = (1 << INT2) + (1 << INT3) + (1 << INT6) + (1 << INT7);
 4c6:	8c ec       	ldi	r24, 0xCC	; 204
 4c8:	89 bf       	out	0x39, r24	; 57
 4ca:	08 95       	ret

000004cc <fnd_init>:
}
void fnd_init ()
{
	DDRA = 0xFF;
 4cc:	8f ef       	ldi	r24, 0xFF	; 255
 4ce:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0x0F;
 4d0:	8f e0       	ldi	r24, 0x0F	; 15
 4d2:	84 bb       	out	0x14, r24	; 20
 4d4:	08 95       	ret

000004d6 <sys_init>:
}
void sys_init ()
{
	stdout = &OUTPUT;
 4d6:	8f e0       	ldi	r24, 0x0F	; 15
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <__iob+0x3>
 4de:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__iob+0x2>
	UART0_Init(UBRR_9600_1X); // for debug
 4e2:	88 e6       	ldi	r24, 0x68	; 104
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	f4 dd       	rcall	.-1048   	; 0xd0 <UART0_Init>
	EXINT_init();
 4e8:	e2 df       	rcall	.-60     	; 0x4ae <EXINT_init>
	fnd_init ();
 4ea:	f0 df       	rcall	.-32     	; 0x4cc <fnd_init>
 4ec:	8f b7       	in	r24, 0x3f	; 63
	SREG |= 0x80; // GRBL INT enable
 4ee:	80 68       	ori	r24, 0x80	; 128
 4f0:	8f bf       	out	0x3f, r24	; 63
 4f2:	08 95       	ret

000004f4 <timer0_init>:
 4f4:	83 b7       	in	r24, 0x33	; 51
}
void timer0_init()
{
    TCCR0 |= (1 << WGM01) + (1 << CS02); // 64 pre-scale
 4f6:	8c 60       	ori	r24, 0x0C	; 12
 4f8:	83 bf       	out	0x33, r24	; 51
    OCR0 = 249; // 1ms
 4fa:	89 ef       	ldi	r24, 0xF9	; 249
 4fc:	81 bf       	out	0x31, r24	; 49
    TIMSK |= (1 << OCIE0);
 4fe:	87 b7       	in	r24, 0x37	; 55
 500:	82 60       	ori	r24, 0x02	; 2
 502:	87 bf       	out	0x37, r24	; 55
 504:	08 95       	ret

00000506 <timer0_off>:
}
void timer0_off()
{
    TCCR0 |= 0x00;
 506:	83 b7       	in	r24, 0x33	; 51
 508:	83 bf       	out	0x33, r24	; 51
    OCR0 = 0x00;
 50a:	11 be       	out	0x31, r1	; 49
    TIMSK &= ~(1 << OCIE0);
 50c:	87 b7       	in	r24, 0x37	; 55
 50e:	8d 7f       	andi	r24, 0xFD	; 253
 510:	87 bf       	out	0x37, r24	; 55
 512:	08 95       	ret

00000514 <timer1_init>:
}
void timer1_init()
{
    TCCR1B |= (1 << WGM12) + (1 << CS11) + (1 << CS10); // CTC(mode4), 64 pre-scale
 514:	8e b5       	in	r24, 0x2e	; 46
 516:	8b 60       	ori	r24, 0x0B	; 11
 518:	8e bd       	out	0x2e, r24	; 46
    OCR1A = 24; // 0.1ms
 51a:	88 e1       	ldi	r24, 0x18	; 24
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	9b bd       	out	0x2b, r25	; 43
 520:	8a bd       	out	0x2a, r24	; 42
    TIMSK = 1 << OCIE1A;
 522:	80 e1       	ldi	r24, 0x10	; 16
 524:	87 bf       	out	0x37, r24	; 55
 526:	08 95       	ret

00000528 <timer3_init>:
}
//TODO: re-check setting
void timer3_init()
{
    TCCR3B |= (1 << WGM32) + (1 << CS31) + (1 << CS30);
 528:	ea e8       	ldi	r30, 0x8A	; 138
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	80 81       	ld	r24, Z
 52e:	8b 60       	ori	r24, 0x0B	; 11
 530:	80 83       	st	Z, r24
    OCR3A = 24999; // 100ms
 532:	87 ea       	ldi	r24, 0xA7	; 167
 534:	91 e6       	ldi	r25, 0x61	; 97
 536:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 53a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    ETIMSK = 1 << OCIE3A;
 53e:	80 e1       	ldi	r24, 0x10	; 16
 540:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
 544:	08 95       	ret

00000546 <disp_setMode_fnd>:
}
void disp_setMode_fnd(void)
{
    switch(fndIndex)
 546:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <fndIndex>
 54a:	81 30       	cpi	r24, 0x01	; 1
 54c:	81 f0       	breq	.+32     	; 0x56e <disp_setMode_fnd+0x28>
 54e:	28 f0       	brcs	.+10     	; 0x55a <disp_setMode_fnd+0x14>
 550:	82 30       	cpi	r24, 0x02	; 2
 552:	b9 f0       	breq	.+46     	; 0x582 <disp_setMode_fnd+0x3c>
 554:	83 30       	cpi	r24, 0x03	; 3
 556:	f9 f0       	breq	.+62     	; 0x596 <disp_setMode_fnd+0x50>
 558:	08 95       	ret
    {
        case 0:
            PORTC = 0x01;
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	85 bb       	out	0x15, r24	; 21
            PORTA = fndPattern[fndNum[0] - 0x30];
 55e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	ec 52       	subi	r30, 0x2C	; 44
 566:	ff 4f       	sbci	r31, 0xFF	; 255
 568:	80 81       	ld	r24, Z
 56a:	8b bb       	out	0x1b, r24	; 27
            break;
 56c:	08 95       	ret
        case 1:
            PORTC = 0x02;
 56e:	82 e0       	ldi	r24, 0x02	; 2
 570:	85 bb       	out	0x15, r24	; 21
            PORTA = fndPattern[fndNum[1] - 0x30];
 572:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <__data_start+0x1>
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	ec 52       	subi	r30, 0x2C	; 44
 57a:	ff 4f       	sbci	r31, 0xFF	; 255
 57c:	80 81       	ld	r24, Z
 57e:	8b bb       	out	0x1b, r24	; 27
            break;
 580:	08 95       	ret
        case 2:
            PORTC = 0x04;
 582:	84 e0       	ldi	r24, 0x04	; 4
 584:	85 bb       	out	0x15, r24	; 21
            PORTA = fndPattern[fndNum[2] - 0x30];
 586:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_start+0x2>
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	ec 52       	subi	r30, 0x2C	; 44
 58e:	ff 4f       	sbci	r31, 0xFF	; 255
 590:	80 81       	ld	r24, Z
 592:	8b bb       	out	0x1b, r24	; 27
            break;
 594:	08 95       	ret
        case 3:
            PORTC = 0x08;
 596:	88 e0       	ldi	r24, 0x08	; 8
 598:	85 bb       	out	0x15, r24	; 21
            PORTA = fndPattern[fndNum[3] - 0x30];
 59a:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <__data_start+0x3>
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	ec 52       	subi	r30, 0x2C	; 44
 5a2:	ff 4f       	sbci	r31, 0xFF	; 255
 5a4:	80 81       	ld	r24, Z
 5a6:	8b bb       	out	0x1b, r24	; 27
 5a8:	08 95       	ret

000005aa <disp_countMode_fnd>:
    }
}
//TODO:recheck!
void disp_countMode_fnd()
{
    sprintf(fndNum, "%04lu", fndStartNum);
 5aa:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <fndStartNum>
 5ae:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <fndStartNum+0x1>
 5b2:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <fndStartNum+0x2>
 5b6:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <fndStartNum+0x3>
 5ba:	bf 93       	push	r27
 5bc:	af 93       	push	r26
 5be:	9f 93       	push	r25
 5c0:	8f 93       	push	r24
 5c2:	86 e5       	ldi	r24, 0x56	; 86
 5c4:	91 e0       	ldi	r25, 0x01	; 1
 5c6:	9f 93       	push	r25
 5c8:	8f 93       	push	r24
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	91 e0       	ldi	r25, 0x01	; 1
 5ce:	9f 93       	push	r25
 5d0:	8f 93       	push	r24
 5d2:	68 d0       	rcall	.+208    	; 0x6a4 <sprintf>
    if (isChangeFnd)
 5d4:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <isChangeFnd>
 5d8:	2d b7       	in	r18, 0x3d	; 61
 5da:	3e b7       	in	r19, 0x3e	; 62
 5dc:	28 5f       	subi	r18, 0xF8	; 248
 5de:	3f 4f       	sbci	r19, 0xFF	; 255
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	f8 94       	cli
 5e4:	3e bf       	out	0x3e, r19	; 62
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	2d bf       	out	0x3d, r18	; 61
 5ea:	88 23       	and	r24, r24
 5ec:	19 f1       	breq	.+70     	; 0x634 <disp_countMode_fnd+0x8a>
    {
        PORTC = (1 << fndIndex);
 5ee:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <fndIndex>
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <disp_countMode_fnd+0x52>
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	2a 95       	dec	r18
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <disp_countMode_fnd+0x4e>
 600:	85 bb       	out	0x15, r24	; 21
        PORTA = fndPattern[fndNum[3 - fndIndex] - 0x30];
 602:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <fndIndex>
 606:	e3 e0       	ldi	r30, 0x03	; 3
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	e8 1b       	sub	r30, r24
 60c:	f1 09       	sbc	r31, r1
 60e:	e0 50       	subi	r30, 0x00	; 0
 610:	ff 4f       	sbci	r31, 0xFF	; 255
 612:	e0 81       	ld	r30, Z
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	ec 52       	subi	r30, 0x2C	; 44
 618:	ff 4f       	sbci	r31, 0xFF	; 255
 61a:	80 81       	ld	r24, Z
 61c:	8b bb       	out	0x1b, r24	; 27
        fndIndex++;
 61e:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <fndIndex>
 622:	8f 5f       	subi	r24, 0xFF	; 255
 624:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <fndIndex>
        if (fndIndex > 3) fndIndex = 0;
 628:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <fndIndex>
 62c:	84 30       	cpi	r24, 0x04	; 4
 62e:	10 f0       	brcs	.+4      	; 0x634 <disp_countMode_fnd+0x8a>
 630:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <fndIndex>
 634:	08 95       	ret

00000636 <main>:

/* 4. Main method */
int main(void)
{
	// 1. system setting
	sys_init ();
 636:	4f df       	rcall	.-354    	; 0x4d6 <sys_init>
                disp_setMode_fnd();
                
			    // 3. blink port
			    if (isTurnOn) // turn on the current port
                {
                    DDRA = 0xFF; // turn on output
 638:	1f ef       	ldi	r17, 0xFF	; 255
                    PORTC = (0x01 << fndIndex);
 63a:	c1 e0       	ldi	r28, 0x01	; 1
 63c:	d0 e0       	ldi	r29, 0x00	; 0
	// 1. system setting
	sys_init ();
	// 2. system execution
	while(TRUE)
	{
		switch(mode)
 63e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mode>
 642:	81 30       	cpi	r24, 0x01	; 1
 644:	19 f0       	breq	.+6      	; 0x64c <main+0x16>
 646:	82 30       	cpi	r24, 0x02	; 2
 648:	a9 f0       	breq	.+42     	; 0x674 <main+0x3e>
		{
			case TIMER_SET:
			    // 1. turn on timer0 for blinking ON
			    timer0_init();
 64a:	fb cf       	rjmp	.-10     	; 0x642 <main+0xc>
                
                // 2. display set mode fnd
                disp_setMode_fnd();
 64c:	53 df       	rcall	.-346    	; 0x4f4 <timer0_init>
 64e:	7b df       	rcall	.-266    	; 0x546 <disp_setMode_fnd>
                
			    // 3. blink port
			    if (isTurnOn) // turn on the current port
 650:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <isTurnOn>
 654:	88 23       	and	r24, r24
 656:	59 f0       	breq	.+22     	; 0x66e <main+0x38>
                {
                    DDRA = 0xFF; // turn on output
 658:	1a bb       	out	0x1a, r17	; 26
                    PORTC = (0x01 << fndIndex);
 65a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <fndIndex>
 65e:	9e 01       	movw	r18, r28
 660:	02 c0       	rjmp	.+4      	; 0x666 <main+0x30>
 662:	22 0f       	add	r18, r18
 664:	33 1f       	adc	r19, r19
 666:	8a 95       	dec	r24
 668:	e2 f7       	brpl	.-8      	; 0x662 <main+0x2c>
 66a:	25 bb       	out	0x15, r18	; 21
 66c:	e8 cf       	rjmp	.-48     	; 0x63e <main+0x8>
                }
                else // turn off the current port
                {
                    PORTC = 0x00; // turn off fnd control port   
                    DDRA = 0x00; // turn off output
 66e:	15 ba       	out	0x15, r1	; 21
			break;
            
            ///////////////////////////////////////////////////////////////////
			case COUNT_UP:
            // 1. turn off timer0 for blinking OFF
            timer0_off();
 670:	1a ba       	out	0x1a, r1	; 26
            
			// 2. turn on timer for counting-up
            timer1_init();
 672:	e5 cf       	rjmp	.-54     	; 0x63e <main+0x8>
 674:	48 df       	rcall	.-368    	; 0x506 <timer0_off>
            timer3_init();
 676:	4e df       	rcall	.-356    	; 0x514 <timer1_init>
 678:	57 df       	rcall	.-338    	; 0x528 <timer3_init>
            // 3. disp countMode fnd
            disp_countMode_fnd();
 67a:	97 df       	rcall	.-210    	; 0x5aa <disp_countMode_fnd>
 67c:	e0 cf       	rjmp	.-64     	; 0x63e <main+0x8>

0000067e <printf>:
			
			
			break;
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
 682:	cd b7       	in	r28, 0x3d	; 61
 684:	de b7       	in	r29, 0x3e	; 62
 686:	ae 01       	movw	r20, r28
 688:	4b 5f       	subi	r20, 0xFB	; 251
 68a:	5f 4f       	sbci	r21, 0xFF	; 255
 68c:	fa 01       	movw	r30, r20
 68e:	61 91       	ld	r22, Z+
 690:	71 91       	ld	r23, Z+
 692:	af 01       	movw	r20, r30
 694:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__iob+0x2>
 698:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <__iob+0x3>
 69c:	31 d0       	rcall	.+98     	; 0x700 <vfprintf>
 69e:	df 91       	pop	r29
 6a0:	cf 91       	pop	r28
 6a2:	08 95       	ret

000006a4 <sprintf>:
 6a4:	0f 93       	push	r16
 6a6:	1f 93       	push	r17
 6a8:	cf 93       	push	r28
 6aa:	df 93       	push	r29
 6ac:	cd b7       	in	r28, 0x3d	; 61
 6ae:	de b7       	in	r29, 0x3e	; 62
 6b0:	2e 97       	sbiw	r28, 0x0e	; 14
 6b2:	0f b6       	in	r0, 0x3f	; 63
 6b4:	f8 94       	cli
 6b6:	de bf       	out	0x3e, r29	; 62
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	cd bf       	out	0x3d, r28	; 61
 6bc:	0d 89       	ldd	r16, Y+21	; 0x15
 6be:	1e 89       	ldd	r17, Y+22	; 0x16
 6c0:	86 e0       	ldi	r24, 0x06	; 6
 6c2:	8c 83       	std	Y+4, r24	; 0x04
 6c4:	1a 83       	std	Y+2, r17	; 0x02
 6c6:	09 83       	std	Y+1, r16	; 0x01
 6c8:	8f ef       	ldi	r24, 0xFF	; 255
 6ca:	9f e7       	ldi	r25, 0x7F	; 127
 6cc:	9e 83       	std	Y+6, r25	; 0x06
 6ce:	8d 83       	std	Y+5, r24	; 0x05
 6d0:	ae 01       	movw	r20, r28
 6d2:	47 5e       	subi	r20, 0xE7	; 231
 6d4:	5f 4f       	sbci	r21, 0xFF	; 255
 6d6:	6f 89       	ldd	r22, Y+23	; 0x17
 6d8:	78 8d       	ldd	r23, Y+24	; 0x18
 6da:	ce 01       	movw	r24, r28
 6dc:	01 96       	adiw	r24, 0x01	; 1
 6de:	10 d0       	rcall	.+32     	; 0x700 <vfprintf>
 6e0:	ef 81       	ldd	r30, Y+7	; 0x07
 6e2:	f8 85       	ldd	r31, Y+8	; 0x08
 6e4:	e0 0f       	add	r30, r16
 6e6:	f1 1f       	adc	r31, r17
 6e8:	10 82       	st	Z, r1
 6ea:	2e 96       	adiw	r28, 0x0e	; 14
 6ec:	0f b6       	in	r0, 0x3f	; 63
 6ee:	f8 94       	cli
 6f0:	de bf       	out	0x3e, r29	; 62
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	cd bf       	out	0x3d, r28	; 61
 6f6:	df 91       	pop	r29
 6f8:	cf 91       	pop	r28
 6fa:	1f 91       	pop	r17
 6fc:	0f 91       	pop	r16
 6fe:	08 95       	ret

00000700 <vfprintf>:
 700:	2f 92       	push	r2
 702:	3f 92       	push	r3
 704:	4f 92       	push	r4
 706:	5f 92       	push	r5
 708:	6f 92       	push	r6
 70a:	7f 92       	push	r7
 70c:	8f 92       	push	r8
 70e:	9f 92       	push	r9
 710:	af 92       	push	r10
 712:	bf 92       	push	r11
 714:	cf 92       	push	r12
 716:	df 92       	push	r13
 718:	ef 92       	push	r14
 71a:	ff 92       	push	r15
 71c:	0f 93       	push	r16
 71e:	1f 93       	push	r17
 720:	cf 93       	push	r28
 722:	df 93       	push	r29
 724:	cd b7       	in	r28, 0x3d	; 61
 726:	de b7       	in	r29, 0x3e	; 62
 728:	2b 97       	sbiw	r28, 0x0b	; 11
 72a:	0f b6       	in	r0, 0x3f	; 63
 72c:	f8 94       	cli
 72e:	de bf       	out	0x3e, r29	; 62
 730:	0f be       	out	0x3f, r0	; 63
 732:	cd bf       	out	0x3d, r28	; 61
 734:	6c 01       	movw	r12, r24
 736:	7b 01       	movw	r14, r22
 738:	8a 01       	movw	r16, r20
 73a:	fc 01       	movw	r30, r24
 73c:	17 82       	std	Z+7, r1	; 0x07
 73e:	16 82       	std	Z+6, r1	; 0x06
 740:	83 81       	ldd	r24, Z+3	; 0x03
 742:	81 ff       	sbrs	r24, 1
 744:	bf c1       	rjmp	.+894    	; 0xac4 <vfprintf+0x3c4>
 746:	ce 01       	movw	r24, r28
 748:	01 96       	adiw	r24, 0x01	; 1
 74a:	3c 01       	movw	r6, r24
 74c:	f6 01       	movw	r30, r12
 74e:	93 81       	ldd	r25, Z+3	; 0x03
 750:	f7 01       	movw	r30, r14
 752:	93 fd       	sbrc	r25, 3
 754:	85 91       	lpm	r24, Z+
 756:	93 ff       	sbrs	r25, 3
 758:	81 91       	ld	r24, Z+
 75a:	7f 01       	movw	r14, r30
 75c:	88 23       	and	r24, r24
 75e:	09 f4       	brne	.+2      	; 0x762 <vfprintf+0x62>
 760:	ad c1       	rjmp	.+858    	; 0xabc <vfprintf+0x3bc>
 762:	85 32       	cpi	r24, 0x25	; 37
 764:	39 f4       	brne	.+14     	; 0x774 <vfprintf+0x74>
 766:	93 fd       	sbrc	r25, 3
 768:	85 91       	lpm	r24, Z+
 76a:	93 ff       	sbrs	r25, 3
 76c:	81 91       	ld	r24, Z+
 76e:	7f 01       	movw	r14, r30
 770:	85 32       	cpi	r24, 0x25	; 37
 772:	21 f4       	brne	.+8      	; 0x77c <vfprintf+0x7c>
 774:	b6 01       	movw	r22, r12
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	d6 d1       	rcall	.+940    	; 0xb26 <fputc>
 77a:	e8 cf       	rjmp	.-48     	; 0x74c <vfprintf+0x4c>
 77c:	91 2c       	mov	r9, r1
 77e:	21 2c       	mov	r2, r1
 780:	31 2c       	mov	r3, r1
 782:	ff e1       	ldi	r31, 0x1F	; 31
 784:	f3 15       	cp	r31, r3
 786:	d8 f0       	brcs	.+54     	; 0x7be <vfprintf+0xbe>
 788:	8b 32       	cpi	r24, 0x2B	; 43
 78a:	79 f0       	breq	.+30     	; 0x7aa <vfprintf+0xaa>
 78c:	38 f4       	brcc	.+14     	; 0x79c <vfprintf+0x9c>
 78e:	80 32       	cpi	r24, 0x20	; 32
 790:	79 f0       	breq	.+30     	; 0x7b0 <vfprintf+0xb0>
 792:	83 32       	cpi	r24, 0x23	; 35
 794:	a1 f4       	brne	.+40     	; 0x7be <vfprintf+0xbe>
 796:	23 2d       	mov	r18, r3
 798:	20 61       	ori	r18, 0x10	; 16
 79a:	1d c0       	rjmp	.+58     	; 0x7d6 <vfprintf+0xd6>
 79c:	8d 32       	cpi	r24, 0x2D	; 45
 79e:	61 f0       	breq	.+24     	; 0x7b8 <vfprintf+0xb8>
 7a0:	80 33       	cpi	r24, 0x30	; 48
 7a2:	69 f4       	brne	.+26     	; 0x7be <vfprintf+0xbe>
 7a4:	23 2d       	mov	r18, r3
 7a6:	21 60       	ori	r18, 0x01	; 1
 7a8:	16 c0       	rjmp	.+44     	; 0x7d6 <vfprintf+0xd6>
 7aa:	83 2d       	mov	r24, r3
 7ac:	82 60       	ori	r24, 0x02	; 2
 7ae:	38 2e       	mov	r3, r24
 7b0:	e3 2d       	mov	r30, r3
 7b2:	e4 60       	ori	r30, 0x04	; 4
 7b4:	3e 2e       	mov	r3, r30
 7b6:	2a c0       	rjmp	.+84     	; 0x80c <vfprintf+0x10c>
 7b8:	f3 2d       	mov	r31, r3
 7ba:	f8 60       	ori	r31, 0x08	; 8
 7bc:	1d c0       	rjmp	.+58     	; 0x7f8 <vfprintf+0xf8>
 7be:	37 fc       	sbrc	r3, 7
 7c0:	2d c0       	rjmp	.+90     	; 0x81c <vfprintf+0x11c>
 7c2:	20 ed       	ldi	r18, 0xD0	; 208
 7c4:	28 0f       	add	r18, r24
 7c6:	2a 30       	cpi	r18, 0x0A	; 10
 7c8:	40 f0       	brcs	.+16     	; 0x7da <vfprintf+0xda>
 7ca:	8e 32       	cpi	r24, 0x2E	; 46
 7cc:	b9 f4       	brne	.+46     	; 0x7fc <vfprintf+0xfc>
 7ce:	36 fc       	sbrc	r3, 6
 7d0:	75 c1       	rjmp	.+746    	; 0xabc <vfprintf+0x3bc>
 7d2:	23 2d       	mov	r18, r3
 7d4:	20 64       	ori	r18, 0x40	; 64
 7d6:	32 2e       	mov	r3, r18
 7d8:	19 c0       	rjmp	.+50     	; 0x80c <vfprintf+0x10c>
 7da:	36 fe       	sbrs	r3, 6
 7dc:	06 c0       	rjmp	.+12     	; 0x7ea <vfprintf+0xea>
 7de:	8a e0       	ldi	r24, 0x0A	; 10
 7e0:	98 9e       	mul	r9, r24
 7e2:	20 0d       	add	r18, r0
 7e4:	11 24       	eor	r1, r1
 7e6:	92 2e       	mov	r9, r18
 7e8:	11 c0       	rjmp	.+34     	; 0x80c <vfprintf+0x10c>
 7ea:	ea e0       	ldi	r30, 0x0A	; 10
 7ec:	2e 9e       	mul	r2, r30
 7ee:	20 0d       	add	r18, r0
 7f0:	11 24       	eor	r1, r1
 7f2:	22 2e       	mov	r2, r18
 7f4:	f3 2d       	mov	r31, r3
 7f6:	f0 62       	ori	r31, 0x20	; 32
 7f8:	3f 2e       	mov	r3, r31
 7fa:	08 c0       	rjmp	.+16     	; 0x80c <vfprintf+0x10c>
 7fc:	8c 36       	cpi	r24, 0x6C	; 108
 7fe:	21 f4       	brne	.+8      	; 0x808 <vfprintf+0x108>
 800:	83 2d       	mov	r24, r3
 802:	80 68       	ori	r24, 0x80	; 128
 804:	38 2e       	mov	r3, r24
 806:	02 c0       	rjmp	.+4      	; 0x80c <vfprintf+0x10c>
 808:	88 36       	cpi	r24, 0x68	; 104
 80a:	41 f4       	brne	.+16     	; 0x81c <vfprintf+0x11c>
 80c:	f7 01       	movw	r30, r14
 80e:	93 fd       	sbrc	r25, 3
 810:	85 91       	lpm	r24, Z+
 812:	93 ff       	sbrs	r25, 3
 814:	81 91       	ld	r24, Z+
 816:	7f 01       	movw	r14, r30
 818:	81 11       	cpse	r24, r1
 81a:	b3 cf       	rjmp	.-154    	; 0x782 <vfprintf+0x82>
 81c:	98 2f       	mov	r25, r24
 81e:	9f 7d       	andi	r25, 0xDF	; 223
 820:	95 54       	subi	r25, 0x45	; 69
 822:	93 30       	cpi	r25, 0x03	; 3
 824:	28 f4       	brcc	.+10     	; 0x830 <vfprintf+0x130>
 826:	0c 5f       	subi	r16, 0xFC	; 252
 828:	1f 4f       	sbci	r17, 0xFF	; 255
 82a:	9f e3       	ldi	r25, 0x3F	; 63
 82c:	99 83       	std	Y+1, r25	; 0x01
 82e:	0d c0       	rjmp	.+26     	; 0x84a <vfprintf+0x14a>
 830:	83 36       	cpi	r24, 0x63	; 99
 832:	31 f0       	breq	.+12     	; 0x840 <vfprintf+0x140>
 834:	83 37       	cpi	r24, 0x73	; 115
 836:	71 f0       	breq	.+28     	; 0x854 <vfprintf+0x154>
 838:	83 35       	cpi	r24, 0x53	; 83
 83a:	09 f0       	breq	.+2      	; 0x83e <vfprintf+0x13e>
 83c:	55 c0       	rjmp	.+170    	; 0x8e8 <vfprintf+0x1e8>
 83e:	20 c0       	rjmp	.+64     	; 0x880 <vfprintf+0x180>
 840:	f8 01       	movw	r30, r16
 842:	80 81       	ld	r24, Z
 844:	89 83       	std	Y+1, r24	; 0x01
 846:	0e 5f       	subi	r16, 0xFE	; 254
 848:	1f 4f       	sbci	r17, 0xFF	; 255
 84a:	88 24       	eor	r8, r8
 84c:	83 94       	inc	r8
 84e:	91 2c       	mov	r9, r1
 850:	53 01       	movw	r10, r6
 852:	12 c0       	rjmp	.+36     	; 0x878 <vfprintf+0x178>
 854:	28 01       	movw	r4, r16
 856:	f2 e0       	ldi	r31, 0x02	; 2
 858:	4f 0e       	add	r4, r31
 85a:	51 1c       	adc	r5, r1
 85c:	f8 01       	movw	r30, r16
 85e:	a0 80       	ld	r10, Z
 860:	b1 80       	ldd	r11, Z+1	; 0x01
 862:	36 fe       	sbrs	r3, 6
 864:	03 c0       	rjmp	.+6      	; 0x86c <vfprintf+0x16c>
 866:	69 2d       	mov	r22, r9
 868:	70 e0       	ldi	r23, 0x00	; 0
 86a:	02 c0       	rjmp	.+4      	; 0x870 <vfprintf+0x170>
 86c:	6f ef       	ldi	r22, 0xFF	; 255
 86e:	7f ef       	ldi	r23, 0xFF	; 255
 870:	c5 01       	movw	r24, r10
 872:	4e d1       	rcall	.+668    	; 0xb10 <strnlen>
 874:	4c 01       	movw	r8, r24
 876:	82 01       	movw	r16, r4
 878:	f3 2d       	mov	r31, r3
 87a:	ff 77       	andi	r31, 0x7F	; 127
 87c:	3f 2e       	mov	r3, r31
 87e:	15 c0       	rjmp	.+42     	; 0x8aa <vfprintf+0x1aa>
 880:	28 01       	movw	r4, r16
 882:	22 e0       	ldi	r18, 0x02	; 2
 884:	42 0e       	add	r4, r18
 886:	51 1c       	adc	r5, r1
 888:	f8 01       	movw	r30, r16
 88a:	a0 80       	ld	r10, Z
 88c:	b1 80       	ldd	r11, Z+1	; 0x01
 88e:	36 fe       	sbrs	r3, 6
 890:	03 c0       	rjmp	.+6      	; 0x898 <vfprintf+0x198>
 892:	69 2d       	mov	r22, r9
 894:	70 e0       	ldi	r23, 0x00	; 0
 896:	02 c0       	rjmp	.+4      	; 0x89c <vfprintf+0x19c>
 898:	6f ef       	ldi	r22, 0xFF	; 255
 89a:	7f ef       	ldi	r23, 0xFF	; 255
 89c:	c5 01       	movw	r24, r10
 89e:	2d d1       	rcall	.+602    	; 0xafa <strnlen_P>
 8a0:	4c 01       	movw	r8, r24
 8a2:	f3 2d       	mov	r31, r3
 8a4:	f0 68       	ori	r31, 0x80	; 128
 8a6:	3f 2e       	mov	r3, r31
 8a8:	82 01       	movw	r16, r4
 8aa:	33 fc       	sbrc	r3, 3
 8ac:	19 c0       	rjmp	.+50     	; 0x8e0 <vfprintf+0x1e0>
 8ae:	82 2d       	mov	r24, r2
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	88 16       	cp	r8, r24
 8b4:	99 06       	cpc	r9, r25
 8b6:	a0 f4       	brcc	.+40     	; 0x8e0 <vfprintf+0x1e0>
 8b8:	b6 01       	movw	r22, r12
 8ba:	80 e2       	ldi	r24, 0x20	; 32
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	33 d1       	rcall	.+614    	; 0xb26 <fputc>
 8c0:	2a 94       	dec	r2
 8c2:	f5 cf       	rjmp	.-22     	; 0x8ae <vfprintf+0x1ae>
 8c4:	f5 01       	movw	r30, r10
 8c6:	37 fc       	sbrc	r3, 7
 8c8:	85 91       	lpm	r24, Z+
 8ca:	37 fe       	sbrs	r3, 7
 8cc:	81 91       	ld	r24, Z+
 8ce:	5f 01       	movw	r10, r30
 8d0:	b6 01       	movw	r22, r12
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	28 d1       	rcall	.+592    	; 0xb26 <fputc>
 8d6:	21 10       	cpse	r2, r1
 8d8:	2a 94       	dec	r2
 8da:	21 e0       	ldi	r18, 0x01	; 1
 8dc:	82 1a       	sub	r8, r18
 8de:	91 08       	sbc	r9, r1
 8e0:	81 14       	cp	r8, r1
 8e2:	91 04       	cpc	r9, r1
 8e4:	79 f7       	brne	.-34     	; 0x8c4 <vfprintf+0x1c4>
 8e6:	e1 c0       	rjmp	.+450    	; 0xaaa <vfprintf+0x3aa>
 8e8:	84 36       	cpi	r24, 0x64	; 100
 8ea:	11 f0       	breq	.+4      	; 0x8f0 <vfprintf+0x1f0>
 8ec:	89 36       	cpi	r24, 0x69	; 105
 8ee:	39 f5       	brne	.+78     	; 0x93e <vfprintf+0x23e>
 8f0:	f8 01       	movw	r30, r16
 8f2:	37 fe       	sbrs	r3, 7
 8f4:	07 c0       	rjmp	.+14     	; 0x904 <vfprintf+0x204>
 8f6:	60 81       	ld	r22, Z
 8f8:	71 81       	ldd	r23, Z+1	; 0x01
 8fa:	82 81       	ldd	r24, Z+2	; 0x02
 8fc:	93 81       	ldd	r25, Z+3	; 0x03
 8fe:	0c 5f       	subi	r16, 0xFC	; 252
 900:	1f 4f       	sbci	r17, 0xFF	; 255
 902:	08 c0       	rjmp	.+16     	; 0x914 <vfprintf+0x214>
 904:	60 81       	ld	r22, Z
 906:	71 81       	ldd	r23, Z+1	; 0x01
 908:	07 2e       	mov	r0, r23
 90a:	00 0c       	add	r0, r0
 90c:	88 0b       	sbc	r24, r24
 90e:	99 0b       	sbc	r25, r25
 910:	0e 5f       	subi	r16, 0xFE	; 254
 912:	1f 4f       	sbci	r17, 0xFF	; 255
 914:	f3 2d       	mov	r31, r3
 916:	ff 76       	andi	r31, 0x6F	; 111
 918:	3f 2e       	mov	r3, r31
 91a:	97 ff       	sbrs	r25, 7
 91c:	09 c0       	rjmp	.+18     	; 0x930 <vfprintf+0x230>
 91e:	90 95       	com	r25
 920:	80 95       	com	r24
 922:	70 95       	com	r23
 924:	61 95       	neg	r22
 926:	7f 4f       	sbci	r23, 0xFF	; 255
 928:	8f 4f       	sbci	r24, 0xFF	; 255
 92a:	9f 4f       	sbci	r25, 0xFF	; 255
 92c:	f0 68       	ori	r31, 0x80	; 128
 92e:	3f 2e       	mov	r3, r31
 930:	2a e0       	ldi	r18, 0x0A	; 10
 932:	30 e0       	ldi	r19, 0x00	; 0
 934:	a3 01       	movw	r20, r6
 936:	33 d1       	rcall	.+614    	; 0xb9e <__ultoa_invert>
 938:	88 2e       	mov	r8, r24
 93a:	86 18       	sub	r8, r6
 93c:	44 c0       	rjmp	.+136    	; 0x9c6 <vfprintf+0x2c6>
 93e:	85 37       	cpi	r24, 0x75	; 117
 940:	31 f4       	brne	.+12     	; 0x94e <vfprintf+0x24e>
 942:	23 2d       	mov	r18, r3
 944:	2f 7e       	andi	r18, 0xEF	; 239
 946:	b2 2e       	mov	r11, r18
 948:	2a e0       	ldi	r18, 0x0A	; 10
 94a:	30 e0       	ldi	r19, 0x00	; 0
 94c:	25 c0       	rjmp	.+74     	; 0x998 <vfprintf+0x298>
 94e:	93 2d       	mov	r25, r3
 950:	99 7f       	andi	r25, 0xF9	; 249
 952:	b9 2e       	mov	r11, r25
 954:	8f 36       	cpi	r24, 0x6F	; 111
 956:	c1 f0       	breq	.+48     	; 0x988 <vfprintf+0x288>
 958:	18 f4       	brcc	.+6      	; 0x960 <vfprintf+0x260>
 95a:	88 35       	cpi	r24, 0x58	; 88
 95c:	79 f0       	breq	.+30     	; 0x97c <vfprintf+0x27c>
 95e:	ae c0       	rjmp	.+348    	; 0xabc <vfprintf+0x3bc>
 960:	80 37       	cpi	r24, 0x70	; 112
 962:	19 f0       	breq	.+6      	; 0x96a <vfprintf+0x26a>
 964:	88 37       	cpi	r24, 0x78	; 120
 966:	21 f0       	breq	.+8      	; 0x970 <vfprintf+0x270>
 968:	a9 c0       	rjmp	.+338    	; 0xabc <vfprintf+0x3bc>
 96a:	e9 2f       	mov	r30, r25
 96c:	e0 61       	ori	r30, 0x10	; 16
 96e:	be 2e       	mov	r11, r30
 970:	b4 fe       	sbrs	r11, 4
 972:	0d c0       	rjmp	.+26     	; 0x98e <vfprintf+0x28e>
 974:	fb 2d       	mov	r31, r11
 976:	f4 60       	ori	r31, 0x04	; 4
 978:	bf 2e       	mov	r11, r31
 97a:	09 c0       	rjmp	.+18     	; 0x98e <vfprintf+0x28e>
 97c:	34 fe       	sbrs	r3, 4
 97e:	0a c0       	rjmp	.+20     	; 0x994 <vfprintf+0x294>
 980:	29 2f       	mov	r18, r25
 982:	26 60       	ori	r18, 0x06	; 6
 984:	b2 2e       	mov	r11, r18
 986:	06 c0       	rjmp	.+12     	; 0x994 <vfprintf+0x294>
 988:	28 e0       	ldi	r18, 0x08	; 8
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	05 c0       	rjmp	.+10     	; 0x998 <vfprintf+0x298>
 98e:	20 e1       	ldi	r18, 0x10	; 16
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	02 c0       	rjmp	.+4      	; 0x998 <vfprintf+0x298>
 994:	20 e1       	ldi	r18, 0x10	; 16
 996:	32 e0       	ldi	r19, 0x02	; 2
 998:	f8 01       	movw	r30, r16
 99a:	b7 fe       	sbrs	r11, 7
 99c:	07 c0       	rjmp	.+14     	; 0x9ac <vfprintf+0x2ac>
 99e:	60 81       	ld	r22, Z
 9a0:	71 81       	ldd	r23, Z+1	; 0x01
 9a2:	82 81       	ldd	r24, Z+2	; 0x02
 9a4:	93 81       	ldd	r25, Z+3	; 0x03
 9a6:	0c 5f       	subi	r16, 0xFC	; 252
 9a8:	1f 4f       	sbci	r17, 0xFF	; 255
 9aa:	06 c0       	rjmp	.+12     	; 0x9b8 <vfprintf+0x2b8>
 9ac:	60 81       	ld	r22, Z
 9ae:	71 81       	ldd	r23, Z+1	; 0x01
 9b0:	80 e0       	ldi	r24, 0x00	; 0
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	0e 5f       	subi	r16, 0xFE	; 254
 9b6:	1f 4f       	sbci	r17, 0xFF	; 255
 9b8:	a3 01       	movw	r20, r6
 9ba:	f1 d0       	rcall	.+482    	; 0xb9e <__ultoa_invert>
 9bc:	88 2e       	mov	r8, r24
 9be:	86 18       	sub	r8, r6
 9c0:	fb 2d       	mov	r31, r11
 9c2:	ff 77       	andi	r31, 0x7F	; 127
 9c4:	3f 2e       	mov	r3, r31
 9c6:	36 fe       	sbrs	r3, 6
 9c8:	0d c0       	rjmp	.+26     	; 0x9e4 <vfprintf+0x2e4>
 9ca:	23 2d       	mov	r18, r3
 9cc:	2e 7f       	andi	r18, 0xFE	; 254
 9ce:	a2 2e       	mov	r10, r18
 9d0:	89 14       	cp	r8, r9
 9d2:	58 f4       	brcc	.+22     	; 0x9ea <vfprintf+0x2ea>
 9d4:	34 fe       	sbrs	r3, 4
 9d6:	0b c0       	rjmp	.+22     	; 0x9ee <vfprintf+0x2ee>
 9d8:	32 fc       	sbrc	r3, 2
 9da:	09 c0       	rjmp	.+18     	; 0x9ee <vfprintf+0x2ee>
 9dc:	83 2d       	mov	r24, r3
 9de:	8e 7e       	andi	r24, 0xEE	; 238
 9e0:	a8 2e       	mov	r10, r24
 9e2:	05 c0       	rjmp	.+10     	; 0x9ee <vfprintf+0x2ee>
 9e4:	b8 2c       	mov	r11, r8
 9e6:	a3 2c       	mov	r10, r3
 9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <vfprintf+0x2f0>
 9ea:	b8 2c       	mov	r11, r8
 9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <vfprintf+0x2f0>
 9ee:	b9 2c       	mov	r11, r9
 9f0:	a4 fe       	sbrs	r10, 4
 9f2:	0f c0       	rjmp	.+30     	; 0xa12 <vfprintf+0x312>
 9f4:	fe 01       	movw	r30, r28
 9f6:	e8 0d       	add	r30, r8
 9f8:	f1 1d       	adc	r31, r1
 9fa:	80 81       	ld	r24, Z
 9fc:	80 33       	cpi	r24, 0x30	; 48
 9fe:	21 f4       	brne	.+8      	; 0xa08 <vfprintf+0x308>
 a00:	9a 2d       	mov	r25, r10
 a02:	99 7e       	andi	r25, 0xE9	; 233
 a04:	a9 2e       	mov	r10, r25
 a06:	09 c0       	rjmp	.+18     	; 0xa1a <vfprintf+0x31a>
 a08:	a2 fe       	sbrs	r10, 2
 a0a:	06 c0       	rjmp	.+12     	; 0xa18 <vfprintf+0x318>
 a0c:	b3 94       	inc	r11
 a0e:	b3 94       	inc	r11
 a10:	04 c0       	rjmp	.+8      	; 0xa1a <vfprintf+0x31a>
 a12:	8a 2d       	mov	r24, r10
 a14:	86 78       	andi	r24, 0x86	; 134
 a16:	09 f0       	breq	.+2      	; 0xa1a <vfprintf+0x31a>
 a18:	b3 94       	inc	r11
 a1a:	a3 fc       	sbrc	r10, 3
 a1c:	10 c0       	rjmp	.+32     	; 0xa3e <vfprintf+0x33e>
 a1e:	a0 fe       	sbrs	r10, 0
 a20:	06 c0       	rjmp	.+12     	; 0xa2e <vfprintf+0x32e>
 a22:	b2 14       	cp	r11, r2
 a24:	80 f4       	brcc	.+32     	; 0xa46 <vfprintf+0x346>
 a26:	28 0c       	add	r2, r8
 a28:	92 2c       	mov	r9, r2
 a2a:	9b 18       	sub	r9, r11
 a2c:	0d c0       	rjmp	.+26     	; 0xa48 <vfprintf+0x348>
 a2e:	b2 14       	cp	r11, r2
 a30:	58 f4       	brcc	.+22     	; 0xa48 <vfprintf+0x348>
 a32:	b6 01       	movw	r22, r12
 a34:	80 e2       	ldi	r24, 0x20	; 32
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	76 d0       	rcall	.+236    	; 0xb26 <fputc>
 a3a:	b3 94       	inc	r11
 a3c:	f8 cf       	rjmp	.-16     	; 0xa2e <vfprintf+0x32e>
 a3e:	b2 14       	cp	r11, r2
 a40:	18 f4       	brcc	.+6      	; 0xa48 <vfprintf+0x348>
 a42:	2b 18       	sub	r2, r11
 a44:	02 c0       	rjmp	.+4      	; 0xa4a <vfprintf+0x34a>
 a46:	98 2c       	mov	r9, r8
 a48:	21 2c       	mov	r2, r1
 a4a:	a4 fe       	sbrs	r10, 4
 a4c:	0f c0       	rjmp	.+30     	; 0xa6c <vfprintf+0x36c>
 a4e:	b6 01       	movw	r22, r12
 a50:	80 e3       	ldi	r24, 0x30	; 48
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	68 d0       	rcall	.+208    	; 0xb26 <fputc>
 a56:	a2 fe       	sbrs	r10, 2
 a58:	16 c0       	rjmp	.+44     	; 0xa86 <vfprintf+0x386>
 a5a:	a1 fc       	sbrc	r10, 1
 a5c:	03 c0       	rjmp	.+6      	; 0xa64 <vfprintf+0x364>
 a5e:	88 e7       	ldi	r24, 0x78	; 120
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	02 c0       	rjmp	.+4      	; 0xa68 <vfprintf+0x368>
 a64:	88 e5       	ldi	r24, 0x58	; 88
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	b6 01       	movw	r22, r12
 a6a:	0c c0       	rjmp	.+24     	; 0xa84 <vfprintf+0x384>
 a6c:	8a 2d       	mov	r24, r10
 a6e:	86 78       	andi	r24, 0x86	; 134
 a70:	51 f0       	breq	.+20     	; 0xa86 <vfprintf+0x386>
 a72:	a1 fe       	sbrs	r10, 1
 a74:	02 c0       	rjmp	.+4      	; 0xa7a <vfprintf+0x37a>
 a76:	8b e2       	ldi	r24, 0x2B	; 43
 a78:	01 c0       	rjmp	.+2      	; 0xa7c <vfprintf+0x37c>
 a7a:	80 e2       	ldi	r24, 0x20	; 32
 a7c:	a7 fc       	sbrc	r10, 7
 a7e:	8d e2       	ldi	r24, 0x2D	; 45
 a80:	b6 01       	movw	r22, r12
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	50 d0       	rcall	.+160    	; 0xb26 <fputc>
 a86:	89 14       	cp	r8, r9
 a88:	30 f4       	brcc	.+12     	; 0xa96 <vfprintf+0x396>
 a8a:	b6 01       	movw	r22, r12
 a8c:	80 e3       	ldi	r24, 0x30	; 48
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	4a d0       	rcall	.+148    	; 0xb26 <fputc>
 a92:	9a 94       	dec	r9
 a94:	f8 cf       	rjmp	.-16     	; 0xa86 <vfprintf+0x386>
 a96:	8a 94       	dec	r8
 a98:	f3 01       	movw	r30, r6
 a9a:	e8 0d       	add	r30, r8
 a9c:	f1 1d       	adc	r31, r1
 a9e:	80 81       	ld	r24, Z
 aa0:	b6 01       	movw	r22, r12
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	40 d0       	rcall	.+128    	; 0xb26 <fputc>
 aa6:	81 10       	cpse	r8, r1
 aa8:	f6 cf       	rjmp	.-20     	; 0xa96 <vfprintf+0x396>
 aaa:	22 20       	and	r2, r2
 aac:	09 f4       	brne	.+2      	; 0xab0 <vfprintf+0x3b0>
 aae:	4e ce       	rjmp	.-868    	; 0x74c <vfprintf+0x4c>
 ab0:	b6 01       	movw	r22, r12
 ab2:	80 e2       	ldi	r24, 0x20	; 32
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	37 d0       	rcall	.+110    	; 0xb26 <fputc>
 ab8:	2a 94       	dec	r2
 aba:	f7 cf       	rjmp	.-18     	; 0xaaa <vfprintf+0x3aa>
 abc:	f6 01       	movw	r30, r12
 abe:	86 81       	ldd	r24, Z+6	; 0x06
 ac0:	97 81       	ldd	r25, Z+7	; 0x07
 ac2:	02 c0       	rjmp	.+4      	; 0xac8 <vfprintf+0x3c8>
 ac4:	8f ef       	ldi	r24, 0xFF	; 255
 ac6:	9f ef       	ldi	r25, 0xFF	; 255
 ac8:	2b 96       	adiw	r28, 0x0b	; 11
 aca:	0f b6       	in	r0, 0x3f	; 63
 acc:	f8 94       	cli
 ace:	de bf       	out	0x3e, r29	; 62
 ad0:	0f be       	out	0x3f, r0	; 63
 ad2:	cd bf       	out	0x3d, r28	; 61
 ad4:	df 91       	pop	r29
 ad6:	cf 91       	pop	r28
 ad8:	1f 91       	pop	r17
 ada:	0f 91       	pop	r16
 adc:	ff 90       	pop	r15
 ade:	ef 90       	pop	r14
 ae0:	df 90       	pop	r13
 ae2:	cf 90       	pop	r12
 ae4:	bf 90       	pop	r11
 ae6:	af 90       	pop	r10
 ae8:	9f 90       	pop	r9
 aea:	8f 90       	pop	r8
 aec:	7f 90       	pop	r7
 aee:	6f 90       	pop	r6
 af0:	5f 90       	pop	r5
 af2:	4f 90       	pop	r4
 af4:	3f 90       	pop	r3
 af6:	2f 90       	pop	r2
 af8:	08 95       	ret

00000afa <strnlen_P>:
 afa:	fc 01       	movw	r30, r24
 afc:	05 90       	lpm	r0, Z+
 afe:	61 50       	subi	r22, 0x01	; 1
 b00:	70 40       	sbci	r23, 0x00	; 0
 b02:	01 10       	cpse	r0, r1
 b04:	d8 f7       	brcc	.-10     	; 0xafc <strnlen_P+0x2>
 b06:	80 95       	com	r24
 b08:	90 95       	com	r25
 b0a:	8e 0f       	add	r24, r30
 b0c:	9f 1f       	adc	r25, r31
 b0e:	08 95       	ret

00000b10 <strnlen>:
 b10:	fc 01       	movw	r30, r24
 b12:	61 50       	subi	r22, 0x01	; 1
 b14:	70 40       	sbci	r23, 0x00	; 0
 b16:	01 90       	ld	r0, Z+
 b18:	01 10       	cpse	r0, r1
 b1a:	d8 f7       	brcc	.-10     	; 0xb12 <strnlen+0x2>
 b1c:	80 95       	com	r24
 b1e:	90 95       	com	r25
 b20:	8e 0f       	add	r24, r30
 b22:	9f 1f       	adc	r25, r31
 b24:	08 95       	ret

00000b26 <fputc>:
 b26:	0f 93       	push	r16
 b28:	1f 93       	push	r17
 b2a:	cf 93       	push	r28
 b2c:	df 93       	push	r29
 b2e:	fb 01       	movw	r30, r22
 b30:	23 81       	ldd	r18, Z+3	; 0x03
 b32:	21 fd       	sbrc	r18, 1
 b34:	03 c0       	rjmp	.+6      	; 0xb3c <fputc+0x16>
 b36:	8f ef       	ldi	r24, 0xFF	; 255
 b38:	9f ef       	ldi	r25, 0xFF	; 255
 b3a:	2c c0       	rjmp	.+88     	; 0xb94 <fputc+0x6e>
 b3c:	22 ff       	sbrs	r18, 2
 b3e:	16 c0       	rjmp	.+44     	; 0xb6c <fputc+0x46>
 b40:	46 81       	ldd	r20, Z+6	; 0x06
 b42:	57 81       	ldd	r21, Z+7	; 0x07
 b44:	24 81       	ldd	r18, Z+4	; 0x04
 b46:	35 81       	ldd	r19, Z+5	; 0x05
 b48:	42 17       	cp	r20, r18
 b4a:	53 07       	cpc	r21, r19
 b4c:	44 f4       	brge	.+16     	; 0xb5e <fputc+0x38>
 b4e:	a0 81       	ld	r26, Z
 b50:	b1 81       	ldd	r27, Z+1	; 0x01
 b52:	9d 01       	movw	r18, r26
 b54:	2f 5f       	subi	r18, 0xFF	; 255
 b56:	3f 4f       	sbci	r19, 0xFF	; 255
 b58:	31 83       	std	Z+1, r19	; 0x01
 b5a:	20 83       	st	Z, r18
 b5c:	8c 93       	st	X, r24
 b5e:	26 81       	ldd	r18, Z+6	; 0x06
 b60:	37 81       	ldd	r19, Z+7	; 0x07
 b62:	2f 5f       	subi	r18, 0xFF	; 255
 b64:	3f 4f       	sbci	r19, 0xFF	; 255
 b66:	37 83       	std	Z+7, r19	; 0x07
 b68:	26 83       	std	Z+6, r18	; 0x06
 b6a:	14 c0       	rjmp	.+40     	; 0xb94 <fputc+0x6e>
 b6c:	8b 01       	movw	r16, r22
 b6e:	ec 01       	movw	r28, r24
 b70:	fb 01       	movw	r30, r22
 b72:	00 84       	ldd	r0, Z+8	; 0x08
 b74:	f1 85       	ldd	r31, Z+9	; 0x09
 b76:	e0 2d       	mov	r30, r0
 b78:	09 95       	icall
 b7a:	89 2b       	or	r24, r25
 b7c:	e1 f6       	brne	.-72     	; 0xb36 <fputc+0x10>
 b7e:	d8 01       	movw	r26, r16
 b80:	16 96       	adiw	r26, 0x06	; 6
 b82:	8d 91       	ld	r24, X+
 b84:	9c 91       	ld	r25, X
 b86:	17 97       	sbiw	r26, 0x07	; 7
 b88:	01 96       	adiw	r24, 0x01	; 1
 b8a:	17 96       	adiw	r26, 0x07	; 7
 b8c:	9c 93       	st	X, r25
 b8e:	8e 93       	st	-X, r24
 b90:	16 97       	sbiw	r26, 0x06	; 6
 b92:	ce 01       	movw	r24, r28
 b94:	df 91       	pop	r29
 b96:	cf 91       	pop	r28
 b98:	1f 91       	pop	r17
 b9a:	0f 91       	pop	r16
 b9c:	08 95       	ret

00000b9e <__ultoa_invert>:
 b9e:	fa 01       	movw	r30, r20
 ba0:	aa 27       	eor	r26, r26
 ba2:	28 30       	cpi	r18, 0x08	; 8
 ba4:	51 f1       	breq	.+84     	; 0xbfa <__ultoa_invert+0x5c>
 ba6:	20 31       	cpi	r18, 0x10	; 16
 ba8:	81 f1       	breq	.+96     	; 0xc0a <__ultoa_invert+0x6c>
 baa:	e8 94       	clt
 bac:	6f 93       	push	r22
 bae:	6e 7f       	andi	r22, 0xFE	; 254
 bb0:	6e 5f       	subi	r22, 0xFE	; 254
 bb2:	7f 4f       	sbci	r23, 0xFF	; 255
 bb4:	8f 4f       	sbci	r24, 0xFF	; 255
 bb6:	9f 4f       	sbci	r25, 0xFF	; 255
 bb8:	af 4f       	sbci	r26, 0xFF	; 255
 bba:	b1 e0       	ldi	r27, 0x01	; 1
 bbc:	3e d0       	rcall	.+124    	; 0xc3a <__ultoa_invert+0x9c>
 bbe:	b4 e0       	ldi	r27, 0x04	; 4
 bc0:	3c d0       	rcall	.+120    	; 0xc3a <__ultoa_invert+0x9c>
 bc2:	67 0f       	add	r22, r23
 bc4:	78 1f       	adc	r23, r24
 bc6:	89 1f       	adc	r24, r25
 bc8:	9a 1f       	adc	r25, r26
 bca:	a1 1d       	adc	r26, r1
 bcc:	68 0f       	add	r22, r24
 bce:	79 1f       	adc	r23, r25
 bd0:	8a 1f       	adc	r24, r26
 bd2:	91 1d       	adc	r25, r1
 bd4:	a1 1d       	adc	r26, r1
 bd6:	6a 0f       	add	r22, r26
 bd8:	71 1d       	adc	r23, r1
 bda:	81 1d       	adc	r24, r1
 bdc:	91 1d       	adc	r25, r1
 bde:	a1 1d       	adc	r26, r1
 be0:	20 d0       	rcall	.+64     	; 0xc22 <__ultoa_invert+0x84>
 be2:	09 f4       	brne	.+2      	; 0xbe6 <__ultoa_invert+0x48>
 be4:	68 94       	set
 be6:	3f 91       	pop	r19
 be8:	2a e0       	ldi	r18, 0x0A	; 10
 bea:	26 9f       	mul	r18, r22
 bec:	11 24       	eor	r1, r1
 bee:	30 19       	sub	r19, r0
 bf0:	30 5d       	subi	r19, 0xD0	; 208
 bf2:	31 93       	st	Z+, r19
 bf4:	de f6       	brtc	.-74     	; 0xbac <__ultoa_invert+0xe>
 bf6:	cf 01       	movw	r24, r30
 bf8:	08 95       	ret
 bfa:	46 2f       	mov	r20, r22
 bfc:	47 70       	andi	r20, 0x07	; 7
 bfe:	40 5d       	subi	r20, 0xD0	; 208
 c00:	41 93       	st	Z+, r20
 c02:	b3 e0       	ldi	r27, 0x03	; 3
 c04:	0f d0       	rcall	.+30     	; 0xc24 <__ultoa_invert+0x86>
 c06:	c9 f7       	brne	.-14     	; 0xbfa <__ultoa_invert+0x5c>
 c08:	f6 cf       	rjmp	.-20     	; 0xbf6 <__ultoa_invert+0x58>
 c0a:	46 2f       	mov	r20, r22
 c0c:	4f 70       	andi	r20, 0x0F	; 15
 c0e:	40 5d       	subi	r20, 0xD0	; 208
 c10:	4a 33       	cpi	r20, 0x3A	; 58
 c12:	18 f0       	brcs	.+6      	; 0xc1a <__ultoa_invert+0x7c>
 c14:	49 5d       	subi	r20, 0xD9	; 217
 c16:	31 fd       	sbrc	r19, 1
 c18:	40 52       	subi	r20, 0x20	; 32
 c1a:	41 93       	st	Z+, r20
 c1c:	02 d0       	rcall	.+4      	; 0xc22 <__ultoa_invert+0x84>
 c1e:	a9 f7       	brne	.-22     	; 0xc0a <__ultoa_invert+0x6c>
 c20:	ea cf       	rjmp	.-44     	; 0xbf6 <__ultoa_invert+0x58>
 c22:	b4 e0       	ldi	r27, 0x04	; 4
 c24:	a6 95       	lsr	r26
 c26:	97 95       	ror	r25
 c28:	87 95       	ror	r24
 c2a:	77 95       	ror	r23
 c2c:	67 95       	ror	r22
 c2e:	ba 95       	dec	r27
 c30:	c9 f7       	brne	.-14     	; 0xc24 <__ultoa_invert+0x86>
 c32:	00 97       	sbiw	r24, 0x00	; 0
 c34:	61 05       	cpc	r22, r1
 c36:	71 05       	cpc	r23, r1
 c38:	08 95       	ret
 c3a:	9b 01       	movw	r18, r22
 c3c:	ac 01       	movw	r20, r24
 c3e:	0a 2e       	mov	r0, r26
 c40:	06 94       	lsr	r0
 c42:	57 95       	ror	r21
 c44:	47 95       	ror	r20
 c46:	37 95       	ror	r19
 c48:	27 95       	ror	r18
 c4a:	ba 95       	dec	r27
 c4c:	c9 f7       	brne	.-14     	; 0xc40 <__ultoa_invert+0xa2>
 c4e:	62 0f       	add	r22, r18
 c50:	73 1f       	adc	r23, r19
 c52:	84 1f       	adc	r24, r20
 c54:	95 1f       	adc	r25, r21
 c56:	a0 1d       	adc	r26, r0
 c58:	08 95       	ret

00000c5a <_exit>:
 c5a:	f8 94       	cli

00000c5c <__stop_program>:
 c5c:	ff cf       	rjmp	.-2      	; 0xc5c <__stop_program>
