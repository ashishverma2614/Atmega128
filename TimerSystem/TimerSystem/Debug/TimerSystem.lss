
TimerSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00000a9e  00000b32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800150  00800150  00000b82  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000be0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e2c  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c5  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000739  00000000  00000000  000024e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000380  00000000  00000000  00002c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ac  00000000  00000000  00002fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000796  00000000  00000000  00003550  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003ce6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	c9 c0       	rjmp	.+402    	; 0x1a0 <__vector_3>
   e:	00 00       	nop
  10:	00 c1       	rjmp	.+512    	; 0x212 <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	39 c1       	rjmp	.+626    	; 0x290 <__vector_7>
  1e:	00 00       	nop
  20:	c3 c1       	rjmp	.+902    	; 0x3a8 <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	92 c0       	rjmp	.+292    	; 0x156 <__vector_12>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	61 c0       	rjmp	.+194    	; 0x100 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	80 c0       	rjmp	.+256    	; 0x16a <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e9       	ldi	r30, 0x9E	; 158
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 35       	cpi	r26, 0x50	; 80
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e5       	ldi	r26, 0x50	; 80
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 35       	cpi	r26, 0x5C	; 92
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	fe d1       	rcall	.+1020   	; 0x4c0 <main>
  c4:	ea c4       	rjmp	.+2516   	; 0xa9a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <UART0_Putch>:
    int i = 0;
    while(str[i] != 0)
    {
        UART1_Putch(str[i++]);
    }
}
  c8:	5d 9b       	sbis	0x0b, 5	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <UART0_Putch>
  cc:	8c b9       	out	0x0c, r24	; 12
  ce:	08 95       	ret

000000d0 <UART0_Init>:
  d0:	1b b8       	out	0x0b, r1	; 11
  d2:	28 e9       	ldi	r18, 0x98	; 152
  d4:	2a b9       	out	0x0a, r18	; 10
  d6:	26 e0       	ldi	r18, 0x06	; 6
  d8:	20 93 95 00 	sts	0x0095, r18	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  dc:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  e0:	89 b9       	out	0x09, r24	; 9
  e2:	08 95       	ret

000000e4 <UART0_Puts>:
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
  ea:	88 81       	ld	r24, Y
  ec:	88 23       	and	r24, r24
  ee:	29 f0       	breq	.+10     	; 0xfa <UART0_Puts+0x16>
  f0:	21 96       	adiw	r28, 0x01	; 1
  f2:	ea df       	rcall	.-44     	; 0xc8 <UART0_Putch>
  f4:	89 91       	ld	r24, Y+
  f6:	81 11       	cpse	r24, r1
  f8:	fc cf       	rjmp	.-8      	; 0xf2 <UART0_Puts+0xe>
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <__vector_15>:
    Debug ();
	printf("%d \n", mode);
}
///////////////////////////////////////////////////////////////////////////////
ISR(TIMER0_COMP_vect) // 1ms -> for 0.5sec interval blinking fnd
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	2f 93       	push	r18
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
	static unsigned int tick0_blinking;
    tick0_blinking++;
 110:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
 114:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <__data_end+0x1>
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <__data_end+0x1>
 11e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
    if (tick0_blinking <= 500) isTurnOn = TRUE;
 122:	85 3f       	cpi	r24, 0xF5	; 245
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	92 07       	cpc	r25, r18
 128:	20 f4       	brcc	.+8      	; 0x132 <__vector_15+0x32>
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <isTurnOn>
 130:	0a c0       	rjmp	.+20     	; 0x146 <__vector_15+0x46>
    else if (tick0_blinking <= 1000) isTurnOn = FALSE;
 132:	89 3e       	cpi	r24, 0xE9	; 233
 134:	93 40       	sbci	r25, 0x03	; 3
 136:	18 f4       	brcc	.+6      	; 0x13e <__vector_15+0x3e>
 138:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <isTurnOn>
 13c:	04 c0       	rjmp	.+8      	; 0x146 <__vector_15+0x46>
    else tick0_blinking = 0;
 13e:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <__data_end+0x1>
 142:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <__data_end>
}
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <__vector_12>:

ISR(TIMER1_COMPA_vect) // for 5ms dynamic display
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
}
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <__vector_26>:
ISR(TIMER3_COMPA_vect) // for 100 ms count up
{  
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
}
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <Debug>:
///////////////////////////////////////////////////////////////////////////////
/*5. Function Implementation */

void Debug () // debug code using serial monitor and LED blinking
{
	UART0_Puts ("SW pressed!\r\n");
 17e:	8d e1       	ldi	r24, 0x1D	; 29
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	b0 df       	rcall	.-160    	; 0xe4 <UART0_Puts>
	DDRB = 0x01;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x01;
 188:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	84 e3       	ldi	r24, 0x34	; 52
 18e:	9c e0       	ldi	r25, 0x0C	; 12
 190:	21 50       	subi	r18, 0x01	; 1
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <Debug+0x12>
 198:	00 c0       	rjmp	.+0      	; 0x19a <Debug+0x1c>
 19a:	00 00       	nop
	_delay_ms(250);
	PORTB = 0x00;
 19c:	18 ba       	out	0x18, r1	; 24
 19e:	08 95       	ret

000001a0 <__vector_3>:

///////////////////////////////////////////////////////////////////////////////

/* 3. ISR */
ISR(INT2_vect) // key1: enter count set mode, blink the first position
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	0b b6       	in	r0, 0x3b	; 59
 1ac:	0f 92       	push	r0
 1ae:	2f 93       	push	r18
 1b0:	3f 93       	push	r19
 1b2:	4f 93       	push	r20
 1b4:	5f 93       	push	r21
 1b6:	6f 93       	push	r22
 1b8:	7f 93       	push	r23
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
 1c2:	ef 93       	push	r30
 1c4:	ff 93       	push	r31
	fndIndex = 0; // jump to the timer for blinking
 1c6:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <fndIndex>
	mode = TIMER_SET;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <mode>
    
    /* For debug */
    Debug ();
 1d0:	d6 df       	rcall	.-84     	; 0x17e <Debug>
    printf("%d \n", mode);
 1d2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mode>
 1d6:	1f 92       	push	r1
 1d8:	8f 93       	push	r24
 1da:	8b e4       	ldi	r24, 0x4B	; 75
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	9f 93       	push	r25
 1e0:	8f 93       	push	r24
 1e2:	9b d1       	rcall	.+822    	; 0x51a <printf>
}
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	ff 91       	pop	r31
 1ee:	ef 91       	pop	r30
 1f0:	bf 91       	pop	r27
 1f2:	af 91       	pop	r26
 1f4:	9f 91       	pop	r25
 1f6:	8f 91       	pop	r24
 1f8:	7f 91       	pop	r23
 1fa:	6f 91       	pop	r22
 1fc:	5f 91       	pop	r21
 1fe:	4f 91       	pop	r20
 200:	3f 91       	pop	r19
 202:	2f 91       	pop	r18
 204:	0f 90       	pop	r0
 206:	0b be       	out	0x3b, r0	; 59
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <__vector_4>:
ISR(INT3_vect) // key2: change fnd blinking position
{
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	0b b6       	in	r0, 0x3b	; 59
 21e:	0f 92       	push	r0
 220:	2f 93       	push	r18
 222:	3f 93       	push	r19
 224:	4f 93       	push	r20
 226:	5f 93       	push	r21
 228:	6f 93       	push	r22
 22a:	7f 93       	push	r23
 22c:	8f 93       	push	r24
 22e:	9f 93       	push	r25
 230:	af 93       	push	r26
 232:	bf 93       	push	r27
 234:	ef 93       	push	r30
 236:	ff 93       	push	r31
	fndIndex++;
 238:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <fndIndex>
 23c:	8f 5f       	subi	r24, 0xFF	; 255
 23e:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <fndIndex>
	if (fndIndex > 3) fndIndex = 0; // reset index
 242:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <fndIndex>
 246:	84 30       	cpi	r24, 0x04	; 4
 248:	10 f0       	brcs	.+4      	; 0x24e <__vector_4+0x3c>
 24a:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <fndIndex>
    
    /* For debug */
    Debug ();
 24e:	97 df       	rcall	.-210    	; 0x17e <Debug>
    printf("%d\n", fndIndex);
 250:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <fndIndex>
 254:	1f 92       	push	r1
 256:	8f 93       	push	r24
 258:	8b e2       	ldi	r24, 0x2B	; 43
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	9f 93       	push	r25
 25e:	8f 93       	push	r24
 260:	5c d1       	rcall	.+696    	; 0x51a <printf>
}
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
 26a:	ff 91       	pop	r31
 26c:	ef 91       	pop	r30
 26e:	bf 91       	pop	r27
 270:	af 91       	pop	r26
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	7f 91       	pop	r23
 278:	6f 91       	pop	r22
 27a:	5f 91       	pop	r21
 27c:	4f 91       	pop	r20
 27e:	3f 91       	pop	r19
 280:	2f 91       	pop	r18
 282:	0f 90       	pop	r0
 284:	0b be       	out	0x3b, r0	; 59
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <__vector_7>:
ISR(INT6_vect) // key3 : count-up fnd number at current position
{
 290:	1f 92       	push	r1
 292:	0f 92       	push	r0
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	0f 92       	push	r0
 298:	11 24       	eor	r1, r1
 29a:	0b b6       	in	r0, 0x3b	; 59
 29c:	0f 92       	push	r0
 29e:	2f 93       	push	r18
 2a0:	3f 93       	push	r19
 2a2:	4f 93       	push	r20
 2a4:	5f 93       	push	r21
 2a6:	6f 93       	push	r22
 2a8:	7f 93       	push	r23
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	af 93       	push	r26
 2b0:	bf 93       	push	r27
 2b2:	ef 93       	push	r30
 2b4:	ff 93       	push	r31
	fndNum[fndIndex]++;
 2b6:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <fndIndex>
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	e0 50       	subi	r30, 0x00	; 0
 2be:	ff 4f       	sbci	r31, 0xFF	; 255
 2c0:	80 81       	ld	r24, Z
 2c2:	8f 5f       	subi	r24, 0xFF	; 255
 2c4:	80 83       	st	Z, r24
	if (fndNum[fndIndex] > '9') fndNum[fndIndex] = '0'; // reset value
 2c6:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <fndIndex>
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	e0 50       	subi	r30, 0x00	; 0
 2ce:	ff 4f       	sbci	r31, 0xFF	; 255
 2d0:	80 81       	ld	r24, Z
 2d2:	8a 33       	cpi	r24, 0x3A	; 58
 2d4:	38 f0       	brcs	.+14     	; 0x2e4 <__vector_7+0x54>
 2d6:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <fndIndex>
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	e0 50       	subi	r30, 0x00	; 0
 2de:	ff 4f       	sbci	r31, 0xFF	; 255
 2e0:	80 e3       	ldi	r24, 0x30	; 48
 2e2:	80 83       	st	Z, r24

    /* convert data to int for start count */
    // also possible to use atoi()
    fndStartNum = 1000 * (fndNum[3] - 0x30) + 100 * (fndNum[2] - 0x30) + 10 * (fndNum[1] - 0x30) + (fndNum[0] - 0x30);
 2e4:	a0 e0       	ldi	r26, 0x00	; 0
 2e6:	b1 e0       	ldi	r27, 0x01	; 1
 2e8:	13 96       	adiw	r26, 0x03	; 3
 2ea:	ec 91       	ld	r30, X
 2ec:	13 97       	sbiw	r26, 0x03	; 3
 2ee:	12 96       	adiw	r26, 0x02	; 2
 2f0:	6c 91       	ld	r22, X
 2f2:	12 97       	sbiw	r26, 0x02	; 2
 2f4:	11 96       	adiw	r26, 0x01	; 1
 2f6:	2c 91       	ld	r18, X
 2f8:	11 97       	sbiw	r26, 0x01	; 1
 2fa:	4c 91       	ld	r20, X
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	f0 97       	sbiw	r30, 0x30	; 48
 300:	88 ee       	ldi	r24, 0xE8	; 232
 302:	93 e0       	ldi	r25, 0x03	; 3
 304:	e8 9f       	mul	r30, r24
 306:	d0 01       	movw	r26, r0
 308:	e9 9f       	mul	r30, r25
 30a:	b0 0d       	add	r27, r0
 30c:	f8 9f       	mul	r31, r24
 30e:	b0 0d       	add	r27, r0
 310:	11 24       	eor	r1, r1
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	60 53       	subi	r22, 0x30	; 48
 316:	71 09       	sbc	r23, r1
 318:	34 e6       	ldi	r19, 0x64	; 100
 31a:	36 9f       	mul	r19, r22
 31c:	c0 01       	movw	r24, r0
 31e:	37 9f       	mul	r19, r23
 320:	90 0d       	add	r25, r0
 322:	11 24       	eor	r1, r1
 324:	bd 01       	movw	r22, r26
 326:	68 0f       	add	r22, r24
 328:	79 1f       	adc	r23, r25
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	c9 01       	movw	r24, r18
 32e:	c0 97       	sbiw	r24, 0x30	; 48
 330:	fc 01       	movw	r30, r24
 332:	ee 0f       	add	r30, r30
 334:	ff 1f       	adc	r31, r31
 336:	9c 01       	movw	r18, r24
 338:	22 0f       	add	r18, r18
 33a:	33 1f       	adc	r19, r19
 33c:	22 0f       	add	r18, r18
 33e:	33 1f       	adc	r19, r19
 340:	22 0f       	add	r18, r18
 342:	33 1f       	adc	r19, r19
 344:	cf 01       	movw	r24, r30
 346:	82 0f       	add	r24, r18
 348:	93 1f       	adc	r25, r19
 34a:	86 0f       	add	r24, r22
 34c:	97 1f       	adc	r25, r23
 34e:	24 2f       	mov	r18, r20
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	20 53       	subi	r18, 0x30	; 48
 354:	31 09       	sbc	r19, r1
 356:	82 0f       	add	r24, r18
 358:	93 1f       	adc	r25, r19
 35a:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <fndStartNum+0x1>
 35e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <fndStartNum>
    
    /* For debug */
    Debug ();
 362:	0d df       	rcall	.-486    	; 0x17e <Debug>
    printf("Stored fnd start number is: %d \n", fndStartNum);
 364:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <fndStartNum>
 368:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <fndStartNum+0x1>
 36c:	9f 93       	push	r25
 36e:	8f 93       	push	r24
 370:	8f e2       	ldi	r24, 0x2F	; 47
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	9f 93       	push	r25
 376:	8f 93       	push	r24
 378:	d0 d0       	rcall	.+416    	; 0x51a <printf>
}
 37a:	0f 90       	pop	r0
 37c:	0f 90       	pop	r0
 37e:	0f 90       	pop	r0
 380:	0f 90       	pop	r0
 382:	ff 91       	pop	r31
 384:	ef 91       	pop	r30
 386:	bf 91       	pop	r27
 388:	af 91       	pop	r26
 38a:	9f 91       	pop	r25
 38c:	8f 91       	pop	r24
 38e:	7f 91       	pop	r23
 390:	6f 91       	pop	r22
 392:	5f 91       	pop	r21
 394:	4f 91       	pop	r20
 396:	3f 91       	pop	r19
 398:	2f 91       	pop	r18
 39a:	0f 90       	pop	r0
 39c:	0b be       	out	0x3b, r0	; 59
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <__vector_8>:
ISR(INT7_vect)
{
 3a8:	1f 92       	push	r1
 3aa:	0f 92       	push	r0
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	0f 92       	push	r0
 3b0:	11 24       	eor	r1, r1
 3b2:	0b b6       	in	r0, 0x3b	; 59
 3b4:	0f 92       	push	r0
 3b6:	2f 93       	push	r18
 3b8:	3f 93       	push	r19
 3ba:	4f 93       	push	r20
 3bc:	5f 93       	push	r21
 3be:	6f 93       	push	r22
 3c0:	7f 93       	push	r23
 3c2:	8f 93       	push	r24
 3c4:	9f 93       	push	r25
 3c6:	af 93       	push	r26
 3c8:	bf 93       	push	r27
 3ca:	ef 93       	push	r30
 3cc:	ff 93       	push	r31
	mode = COUNT_UP; // jump to count-up mode
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <mode>
    
    /* For debug */
    Debug ();
 3d4:	d4 de       	rcall	.-600    	; 0x17e <Debug>
	printf("%d \n", mode);
 3d6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mode>
 3da:	1f 92       	push	r1
 3dc:	8f 93       	push	r24
 3de:	8b e4       	ldi	r24, 0x4B	; 75
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	9f 93       	push	r25
 3e4:	8f 93       	push	r24
 3e6:	99 d0       	rcall	.+306    	; 0x51a <printf>
}
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	ff 91       	pop	r31
 3f2:	ef 91       	pop	r30
 3f4:	bf 91       	pop	r27
 3f6:	af 91       	pop	r26
 3f8:	9f 91       	pop	r25
 3fa:	8f 91       	pop	r24
 3fc:	7f 91       	pop	r23
 3fe:	6f 91       	pop	r22
 400:	5f 91       	pop	r21
 402:	4f 91       	pop	r20
 404:	3f 91       	pop	r19
 406:	2f 91       	pop	r18
 408:	0f 90       	pop	r0
 40a:	0b be       	out	0x3b, r0	; 59
 40c:	0f 90       	pop	r0
 40e:	0f be       	out	0x3f, r0	; 63
 410:	0f 90       	pop	r0
 412:	1f 90       	pop	r1
 414:	18 95       	reti

00000416 <EXINT_init>:
	_delay_ms(250);
	PORTB = 0x00;
}
void EXINT_init()
{
	DDRD = 0b11110011; // PIND[2:3] as input
 416:	83 ef       	ldi	r24, 0xF3	; 243
 418:	81 bb       	out	0x11, r24	; 17
	DDRE = 0b00111111; // PINE[6:7] as input
 41a:	8f e3       	ldi	r24, 0x3F	; 63
 41c:	82 b9       	out	0x02, r24	; 2
	// internal pull-up resistor
	PORTD = 0b00001100; 
 41e:	8c e0       	ldi	r24, 0x0C	; 12
 420:	82 bb       	out	0x12, r24	; 18
	PORTE = 0b11000000;
 422:	80 ec       	ldi	r24, 0xC0	; 192
 424:	83 b9       	out	0x03, r24	; 3

	// Reg. setting
	EICRA = (1 << ISC21) + (1 << ISC31); // falling edge trigger detection
 426:	80 ea       	ldi	r24, 0xA0	; 160
 428:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB = (1 << ISC61) + (1 << ISC71);
 42c:	8a bf       	out	0x3a, r24	; 58
	EIMSK = (1 << INT2) + (1 << INT3) + (1 << INT6) + (1 << INT7);
 42e:	8c ec       	ldi	r24, 0xCC	; 204
 430:	89 bf       	out	0x39, r24	; 57
 432:	08 95       	ret

00000434 <fnd_init>:
}
void fnd_init ()
{
	DDRA = 0xFF;
 434:	8f ef       	ldi	r24, 0xFF	; 255
 436:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0x0F;
 438:	8f e0       	ldi	r24, 0x0F	; 15
 43a:	84 bb       	out	0x14, r24	; 20
 43c:	08 95       	ret

0000043e <sys_init>:
}
void sys_init ()
{
	stdout = &OUTPUT;
 43e:	8f e0       	ldi	r24, 0x0F	; 15
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <__iob+0x3>
 446:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <__iob+0x2>
	UART0_Init(UBRR_9600_1X); // for debug
 44a:	88 e6       	ldi	r24, 0x68	; 104
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	40 de       	rcall	.-896    	; 0xd0 <UART0_Init>
	EXINT_init();
 450:	e2 df       	rcall	.-60     	; 0x416 <EXINT_init>
	fnd_init ();
 452:	f0 df       	rcall	.-32     	; 0x434 <fnd_init>
 454:	8f b7       	in	r24, 0x3f	; 63
	SREG |= 0x80; // GRBL INT enable
 456:	80 68       	ori	r24, 0x80	; 128
 458:	8f bf       	out	0x3f, r24	; 63
 45a:	08 95       	ret

0000045c <disp_setMode_fnd>:
 45c:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <fndIndex>
}
void disp_setMode_fnd(void)
{
    switch(fndIndex)
 460:	81 30       	cpi	r24, 0x01	; 1
 462:	81 f0       	breq	.+32     	; 0x484 <disp_setMode_fnd+0x28>
 464:	28 f0       	brcs	.+10     	; 0x470 <disp_setMode_fnd+0x14>
 466:	82 30       	cpi	r24, 0x02	; 2
 468:	b9 f0       	breq	.+46     	; 0x498 <disp_setMode_fnd+0x3c>
 46a:	83 30       	cpi	r24, 0x03	; 3
 46c:	f9 f0       	breq	.+62     	; 0x4ac <disp_setMode_fnd+0x50>
 46e:	08 95       	ret
    {
        case 0:
            PORTC = 0x01;
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	85 bb       	out	0x15, r24	; 21
            PORTA = fndPattern[fndNum[0] - 0x30];
 474:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	ec 52       	subi	r30, 0x2C	; 44
 47c:	ff 4f       	sbci	r31, 0xFF	; 255
 47e:	80 81       	ld	r24, Z
 480:	8b bb       	out	0x1b, r24	; 27
            break;
 482:	08 95       	ret
        case 1:
            PORTC = 0x02;
 484:	82 e0       	ldi	r24, 0x02	; 2
 486:	85 bb       	out	0x15, r24	; 21
            PORTA = fndPattern[fndNum[1] - 0x30];
 488:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <__data_start+0x1>
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	ec 52       	subi	r30, 0x2C	; 44
 490:	ff 4f       	sbci	r31, 0xFF	; 255
 492:	80 81       	ld	r24, Z
 494:	8b bb       	out	0x1b, r24	; 27
            break;
 496:	08 95       	ret
        case 2:
            PORTC = 0x04;
 498:	84 e0       	ldi	r24, 0x04	; 4
 49a:	85 bb       	out	0x15, r24	; 21
            PORTA = fndPattern[fndNum[2] - 0x30];
 49c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_start+0x2>
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	ec 52       	subi	r30, 0x2C	; 44
 4a4:	ff 4f       	sbci	r31, 0xFF	; 255
 4a6:	80 81       	ld	r24, Z
 4a8:	8b bb       	out	0x1b, r24	; 27
            break;
 4aa:	08 95       	ret
        case 3:
            PORTC = 0x08;
 4ac:	88 e0       	ldi	r24, 0x08	; 8
 4ae:	85 bb       	out	0x15, r24	; 21
            PORTA = fndPattern[fndNum[3] - 0x30];
 4b0:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <__data_start+0x3>
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	ec 52       	subi	r30, 0x2C	; 44
 4b8:	ff 4f       	sbci	r31, 0xFF	; 255
 4ba:	80 81       	ld	r24, Z
 4bc:	8b bb       	out	0x1b, r24	; 27
 4be:	08 95       	ret

000004c0 <main>:

/* 4. Main method */
int main(void)
{
	// 1. system setting
	sys_init ();
 4c0:	be df       	rcall	.-132    	; 0x43e <sys_init>
		switch(mode)
		{
			case TIMER_SET:
			    // 1. turn on timer0 for blinking ON
			    TCCR0 |= (1 << WGM01) + (1 << CS02); // 64 pre-scale
                OCR0 = 249; // 1ms
 4c2:	19 ef       	ldi	r17, 0xF9	; 249
                disp_setMode_fnd();
                
			    // 3. turn off count timer 
			    if (isTurnOn) // turn on the current port
                {
                    DDRA = 0xFF; // turn on output
 4c4:	0f ef       	ldi	r16, 0xFF	; 255
                    PORTC = (0x01 << fndIndex);
 4c6:	c1 e0       	ldi	r28, 0x01	; 1
 4c8:	d0 e0       	ldi	r29, 0x00	; 0
	// 1. system setting
	sys_init ();
	// 2. system execution
	while(TRUE)
	{
		switch(mode)
 4ca:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mode>
 4ce:	81 30       	cpi	r24, 0x01	; 1
 4d0:	19 f0       	breq	.+6      	; 0x4d8 <main+0x18>
 4d2:	82 30       	cpi	r24, 0x02	; 2
 4d4:	d9 f0       	breq	.+54     	; 0x50c <main+0x4c>
 4d6:	fb cf       	rjmp	.-10     	; 0x4ce <main+0xe>
		{
			case TIMER_SET:
			    // 1. turn on timer0 for blinking ON
			    TCCR0 |= (1 << WGM01) + (1 << CS02); // 64 pre-scale
 4d8:	83 b7       	in	r24, 0x33	; 51
 4da:	8c 60       	ori	r24, 0x0C	; 12
 4dc:	83 bf       	out	0x33, r24	; 51
                OCR0 = 249; // 1ms
 4de:	11 bf       	out	0x31, r17	; 49
                TIMSK |= (1 << OCIE0);
 4e0:	87 b7       	in	r24, 0x37	; 55
 4e2:	82 60       	ori	r24, 0x02	; 2
                
                // 2. display set mode fnd
                disp_setMode_fnd();
 4e4:	87 bf       	out	0x37, r24	; 55
 4e6:	ba df       	rcall	.-140    	; 0x45c <disp_setMode_fnd>
                
			    // 3. turn off count timer 
			    if (isTurnOn) // turn on the current port
 4e8:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <isTurnOn>
 4ec:	88 23       	and	r24, r24
 4ee:	59 f0       	breq	.+22     	; 0x506 <main+0x46>
                {
                    DDRA = 0xFF; // turn on output
 4f0:	0a bb       	out	0x1a, r16	; 26
                    PORTC = (0x01 << fndIndex);
 4f2:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <fndIndex>
 4f6:	9e 01       	movw	r18, r28
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <main+0x3e>
 4fa:	22 0f       	add	r18, r18
 4fc:	33 1f       	adc	r19, r19
 4fe:	8a 95       	dec	r24
 500:	e2 f7       	brpl	.-8      	; 0x4fa <main+0x3a>
 502:	25 bb       	out	0x15, r18	; 21
 504:	e2 cf       	rjmp	.-60     	; 0x4ca <main+0xa>
                }
                else // turn off the current port
                {
                    PORTC = 0x00; // turn off fnd control port   
 506:	15 ba       	out	0x15, r1	; 21
                    DDRA = 0x00; // turn off output
 508:	1a ba       	out	0x1a, r1	; 26
 50a:	df cf       	rjmp	.-66     	; 0x4ca <main+0xa>
			break;
            
            ///////////////////////////////////////////////////////////////////
			case COUNT_UP:
            // 1. turn off timer0 for blinking OFF
            TCCR0 |= 0x00;
 50c:	83 b7       	in	r24, 0x33	; 51
 50e:	83 bf       	out	0x33, r24	; 51
            OCR0 = 0x00;
 510:	11 be       	out	0x31, r1	; 49
            TIMSK &= ~(1 << OCIE0);
 512:	87 b7       	in	r24, 0x37	; 55
 514:	8d 7f       	andi	r24, 0xFD	; 253
 516:	87 bf       	out	0x37, r24	; 55
            
			// 2. turn on timer for counting-up
			
			
			break;
 518:	d8 cf       	rjmp	.-80     	; 0x4ca <main+0xa>

0000051a <printf>:
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	cd b7       	in	r28, 0x3d	; 61
 520:	de b7       	in	r29, 0x3e	; 62
 522:	ae 01       	movw	r20, r28
 524:	4b 5f       	subi	r20, 0xFB	; 251
 526:	5f 4f       	sbci	r21, 0xFF	; 255
 528:	fa 01       	movw	r30, r20
 52a:	61 91       	ld	r22, Z+
 52c:	71 91       	ld	r23, Z+
 52e:	af 01       	movw	r20, r30
 530:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__iob+0x2>
 534:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <__iob+0x3>
 538:	03 d0       	rcall	.+6      	; 0x540 <vfprintf>
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	08 95       	ret

00000540 <vfprintf>:
 540:	2f 92       	push	r2
 542:	3f 92       	push	r3
 544:	4f 92       	push	r4
 546:	5f 92       	push	r5
 548:	6f 92       	push	r6
 54a:	7f 92       	push	r7
 54c:	8f 92       	push	r8
 54e:	9f 92       	push	r9
 550:	af 92       	push	r10
 552:	bf 92       	push	r11
 554:	cf 92       	push	r12
 556:	df 92       	push	r13
 558:	ef 92       	push	r14
 55a:	ff 92       	push	r15
 55c:	0f 93       	push	r16
 55e:	1f 93       	push	r17
 560:	cf 93       	push	r28
 562:	df 93       	push	r29
 564:	cd b7       	in	r28, 0x3d	; 61
 566:	de b7       	in	r29, 0x3e	; 62
 568:	2b 97       	sbiw	r28, 0x0b	; 11
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	f8 94       	cli
 56e:	de bf       	out	0x3e, r29	; 62
 570:	0f be       	out	0x3f, r0	; 63
 572:	cd bf       	out	0x3d, r28	; 61
 574:	6c 01       	movw	r12, r24
 576:	7b 01       	movw	r14, r22
 578:	8a 01       	movw	r16, r20
 57a:	fc 01       	movw	r30, r24
 57c:	17 82       	std	Z+7, r1	; 0x07
 57e:	16 82       	std	Z+6, r1	; 0x06
 580:	83 81       	ldd	r24, Z+3	; 0x03
 582:	81 ff       	sbrs	r24, 1
 584:	bf c1       	rjmp	.+894    	; 0x904 <vfprintf+0x3c4>
 586:	ce 01       	movw	r24, r28
 588:	01 96       	adiw	r24, 0x01	; 1
 58a:	3c 01       	movw	r6, r24
 58c:	f6 01       	movw	r30, r12
 58e:	93 81       	ldd	r25, Z+3	; 0x03
 590:	f7 01       	movw	r30, r14
 592:	93 fd       	sbrc	r25, 3
 594:	85 91       	lpm	r24, Z+
 596:	93 ff       	sbrs	r25, 3
 598:	81 91       	ld	r24, Z+
 59a:	7f 01       	movw	r14, r30
 59c:	88 23       	and	r24, r24
 59e:	09 f4       	brne	.+2      	; 0x5a2 <vfprintf+0x62>
 5a0:	ad c1       	rjmp	.+858    	; 0x8fc <vfprintf+0x3bc>
 5a2:	85 32       	cpi	r24, 0x25	; 37
 5a4:	39 f4       	brne	.+14     	; 0x5b4 <vfprintf+0x74>
 5a6:	93 fd       	sbrc	r25, 3
 5a8:	85 91       	lpm	r24, Z+
 5aa:	93 ff       	sbrs	r25, 3
 5ac:	81 91       	ld	r24, Z+
 5ae:	7f 01       	movw	r14, r30
 5b0:	85 32       	cpi	r24, 0x25	; 37
 5b2:	21 f4       	brne	.+8      	; 0x5bc <vfprintf+0x7c>
 5b4:	b6 01       	movw	r22, r12
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	d6 d1       	rcall	.+940    	; 0x966 <fputc>
 5ba:	e8 cf       	rjmp	.-48     	; 0x58c <vfprintf+0x4c>
 5bc:	91 2c       	mov	r9, r1
 5be:	21 2c       	mov	r2, r1
 5c0:	31 2c       	mov	r3, r1
 5c2:	ff e1       	ldi	r31, 0x1F	; 31
 5c4:	f3 15       	cp	r31, r3
 5c6:	d8 f0       	brcs	.+54     	; 0x5fe <vfprintf+0xbe>
 5c8:	8b 32       	cpi	r24, 0x2B	; 43
 5ca:	79 f0       	breq	.+30     	; 0x5ea <vfprintf+0xaa>
 5cc:	38 f4       	brcc	.+14     	; 0x5dc <vfprintf+0x9c>
 5ce:	80 32       	cpi	r24, 0x20	; 32
 5d0:	79 f0       	breq	.+30     	; 0x5f0 <vfprintf+0xb0>
 5d2:	83 32       	cpi	r24, 0x23	; 35
 5d4:	a1 f4       	brne	.+40     	; 0x5fe <vfprintf+0xbe>
 5d6:	23 2d       	mov	r18, r3
 5d8:	20 61       	ori	r18, 0x10	; 16
 5da:	1d c0       	rjmp	.+58     	; 0x616 <vfprintf+0xd6>
 5dc:	8d 32       	cpi	r24, 0x2D	; 45
 5de:	61 f0       	breq	.+24     	; 0x5f8 <vfprintf+0xb8>
 5e0:	80 33       	cpi	r24, 0x30	; 48
 5e2:	69 f4       	brne	.+26     	; 0x5fe <vfprintf+0xbe>
 5e4:	23 2d       	mov	r18, r3
 5e6:	21 60       	ori	r18, 0x01	; 1
 5e8:	16 c0       	rjmp	.+44     	; 0x616 <vfprintf+0xd6>
 5ea:	83 2d       	mov	r24, r3
 5ec:	82 60       	ori	r24, 0x02	; 2
 5ee:	38 2e       	mov	r3, r24
 5f0:	e3 2d       	mov	r30, r3
 5f2:	e4 60       	ori	r30, 0x04	; 4
 5f4:	3e 2e       	mov	r3, r30
 5f6:	2a c0       	rjmp	.+84     	; 0x64c <vfprintf+0x10c>
 5f8:	f3 2d       	mov	r31, r3
 5fa:	f8 60       	ori	r31, 0x08	; 8
 5fc:	1d c0       	rjmp	.+58     	; 0x638 <vfprintf+0xf8>
 5fe:	37 fc       	sbrc	r3, 7
 600:	2d c0       	rjmp	.+90     	; 0x65c <vfprintf+0x11c>
 602:	20 ed       	ldi	r18, 0xD0	; 208
 604:	28 0f       	add	r18, r24
 606:	2a 30       	cpi	r18, 0x0A	; 10
 608:	40 f0       	brcs	.+16     	; 0x61a <vfprintf+0xda>
 60a:	8e 32       	cpi	r24, 0x2E	; 46
 60c:	b9 f4       	brne	.+46     	; 0x63c <vfprintf+0xfc>
 60e:	36 fc       	sbrc	r3, 6
 610:	75 c1       	rjmp	.+746    	; 0x8fc <vfprintf+0x3bc>
 612:	23 2d       	mov	r18, r3
 614:	20 64       	ori	r18, 0x40	; 64
 616:	32 2e       	mov	r3, r18
 618:	19 c0       	rjmp	.+50     	; 0x64c <vfprintf+0x10c>
 61a:	36 fe       	sbrs	r3, 6
 61c:	06 c0       	rjmp	.+12     	; 0x62a <vfprintf+0xea>
 61e:	8a e0       	ldi	r24, 0x0A	; 10
 620:	98 9e       	mul	r9, r24
 622:	20 0d       	add	r18, r0
 624:	11 24       	eor	r1, r1
 626:	92 2e       	mov	r9, r18
 628:	11 c0       	rjmp	.+34     	; 0x64c <vfprintf+0x10c>
 62a:	ea e0       	ldi	r30, 0x0A	; 10
 62c:	2e 9e       	mul	r2, r30
 62e:	20 0d       	add	r18, r0
 630:	11 24       	eor	r1, r1
 632:	22 2e       	mov	r2, r18
 634:	f3 2d       	mov	r31, r3
 636:	f0 62       	ori	r31, 0x20	; 32
 638:	3f 2e       	mov	r3, r31
 63a:	08 c0       	rjmp	.+16     	; 0x64c <vfprintf+0x10c>
 63c:	8c 36       	cpi	r24, 0x6C	; 108
 63e:	21 f4       	brne	.+8      	; 0x648 <vfprintf+0x108>
 640:	83 2d       	mov	r24, r3
 642:	80 68       	ori	r24, 0x80	; 128
 644:	38 2e       	mov	r3, r24
 646:	02 c0       	rjmp	.+4      	; 0x64c <vfprintf+0x10c>
 648:	88 36       	cpi	r24, 0x68	; 104
 64a:	41 f4       	brne	.+16     	; 0x65c <vfprintf+0x11c>
 64c:	f7 01       	movw	r30, r14
 64e:	93 fd       	sbrc	r25, 3
 650:	85 91       	lpm	r24, Z+
 652:	93 ff       	sbrs	r25, 3
 654:	81 91       	ld	r24, Z+
 656:	7f 01       	movw	r14, r30
 658:	81 11       	cpse	r24, r1
 65a:	b3 cf       	rjmp	.-154    	; 0x5c2 <vfprintf+0x82>
 65c:	98 2f       	mov	r25, r24
 65e:	9f 7d       	andi	r25, 0xDF	; 223
 660:	95 54       	subi	r25, 0x45	; 69
 662:	93 30       	cpi	r25, 0x03	; 3
 664:	28 f4       	brcc	.+10     	; 0x670 <vfprintf+0x130>
 666:	0c 5f       	subi	r16, 0xFC	; 252
 668:	1f 4f       	sbci	r17, 0xFF	; 255
 66a:	9f e3       	ldi	r25, 0x3F	; 63
 66c:	99 83       	std	Y+1, r25	; 0x01
 66e:	0d c0       	rjmp	.+26     	; 0x68a <vfprintf+0x14a>
 670:	83 36       	cpi	r24, 0x63	; 99
 672:	31 f0       	breq	.+12     	; 0x680 <vfprintf+0x140>
 674:	83 37       	cpi	r24, 0x73	; 115
 676:	71 f0       	breq	.+28     	; 0x694 <vfprintf+0x154>
 678:	83 35       	cpi	r24, 0x53	; 83
 67a:	09 f0       	breq	.+2      	; 0x67e <vfprintf+0x13e>
 67c:	55 c0       	rjmp	.+170    	; 0x728 <vfprintf+0x1e8>
 67e:	20 c0       	rjmp	.+64     	; 0x6c0 <vfprintf+0x180>
 680:	f8 01       	movw	r30, r16
 682:	80 81       	ld	r24, Z
 684:	89 83       	std	Y+1, r24	; 0x01
 686:	0e 5f       	subi	r16, 0xFE	; 254
 688:	1f 4f       	sbci	r17, 0xFF	; 255
 68a:	88 24       	eor	r8, r8
 68c:	83 94       	inc	r8
 68e:	91 2c       	mov	r9, r1
 690:	53 01       	movw	r10, r6
 692:	12 c0       	rjmp	.+36     	; 0x6b8 <vfprintf+0x178>
 694:	28 01       	movw	r4, r16
 696:	f2 e0       	ldi	r31, 0x02	; 2
 698:	4f 0e       	add	r4, r31
 69a:	51 1c       	adc	r5, r1
 69c:	f8 01       	movw	r30, r16
 69e:	a0 80       	ld	r10, Z
 6a0:	b1 80       	ldd	r11, Z+1	; 0x01
 6a2:	36 fe       	sbrs	r3, 6
 6a4:	03 c0       	rjmp	.+6      	; 0x6ac <vfprintf+0x16c>
 6a6:	69 2d       	mov	r22, r9
 6a8:	70 e0       	ldi	r23, 0x00	; 0
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <vfprintf+0x170>
 6ac:	6f ef       	ldi	r22, 0xFF	; 255
 6ae:	7f ef       	ldi	r23, 0xFF	; 255
 6b0:	c5 01       	movw	r24, r10
 6b2:	4e d1       	rcall	.+668    	; 0x950 <strnlen>
 6b4:	4c 01       	movw	r8, r24
 6b6:	82 01       	movw	r16, r4
 6b8:	f3 2d       	mov	r31, r3
 6ba:	ff 77       	andi	r31, 0x7F	; 127
 6bc:	3f 2e       	mov	r3, r31
 6be:	15 c0       	rjmp	.+42     	; 0x6ea <vfprintf+0x1aa>
 6c0:	28 01       	movw	r4, r16
 6c2:	22 e0       	ldi	r18, 0x02	; 2
 6c4:	42 0e       	add	r4, r18
 6c6:	51 1c       	adc	r5, r1
 6c8:	f8 01       	movw	r30, r16
 6ca:	a0 80       	ld	r10, Z
 6cc:	b1 80       	ldd	r11, Z+1	; 0x01
 6ce:	36 fe       	sbrs	r3, 6
 6d0:	03 c0       	rjmp	.+6      	; 0x6d8 <vfprintf+0x198>
 6d2:	69 2d       	mov	r22, r9
 6d4:	70 e0       	ldi	r23, 0x00	; 0
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <vfprintf+0x19c>
 6d8:	6f ef       	ldi	r22, 0xFF	; 255
 6da:	7f ef       	ldi	r23, 0xFF	; 255
 6dc:	c5 01       	movw	r24, r10
 6de:	2d d1       	rcall	.+602    	; 0x93a <strnlen_P>
 6e0:	4c 01       	movw	r8, r24
 6e2:	f3 2d       	mov	r31, r3
 6e4:	f0 68       	ori	r31, 0x80	; 128
 6e6:	3f 2e       	mov	r3, r31
 6e8:	82 01       	movw	r16, r4
 6ea:	33 fc       	sbrc	r3, 3
 6ec:	19 c0       	rjmp	.+50     	; 0x720 <vfprintf+0x1e0>
 6ee:	82 2d       	mov	r24, r2
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	88 16       	cp	r8, r24
 6f4:	99 06       	cpc	r9, r25
 6f6:	a0 f4       	brcc	.+40     	; 0x720 <vfprintf+0x1e0>
 6f8:	b6 01       	movw	r22, r12
 6fa:	80 e2       	ldi	r24, 0x20	; 32
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	33 d1       	rcall	.+614    	; 0x966 <fputc>
 700:	2a 94       	dec	r2
 702:	f5 cf       	rjmp	.-22     	; 0x6ee <vfprintf+0x1ae>
 704:	f5 01       	movw	r30, r10
 706:	37 fc       	sbrc	r3, 7
 708:	85 91       	lpm	r24, Z+
 70a:	37 fe       	sbrs	r3, 7
 70c:	81 91       	ld	r24, Z+
 70e:	5f 01       	movw	r10, r30
 710:	b6 01       	movw	r22, r12
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	28 d1       	rcall	.+592    	; 0x966 <fputc>
 716:	21 10       	cpse	r2, r1
 718:	2a 94       	dec	r2
 71a:	21 e0       	ldi	r18, 0x01	; 1
 71c:	82 1a       	sub	r8, r18
 71e:	91 08       	sbc	r9, r1
 720:	81 14       	cp	r8, r1
 722:	91 04       	cpc	r9, r1
 724:	79 f7       	brne	.-34     	; 0x704 <vfprintf+0x1c4>
 726:	e1 c0       	rjmp	.+450    	; 0x8ea <vfprintf+0x3aa>
 728:	84 36       	cpi	r24, 0x64	; 100
 72a:	11 f0       	breq	.+4      	; 0x730 <vfprintf+0x1f0>
 72c:	89 36       	cpi	r24, 0x69	; 105
 72e:	39 f5       	brne	.+78     	; 0x77e <vfprintf+0x23e>
 730:	f8 01       	movw	r30, r16
 732:	37 fe       	sbrs	r3, 7
 734:	07 c0       	rjmp	.+14     	; 0x744 <vfprintf+0x204>
 736:	60 81       	ld	r22, Z
 738:	71 81       	ldd	r23, Z+1	; 0x01
 73a:	82 81       	ldd	r24, Z+2	; 0x02
 73c:	93 81       	ldd	r25, Z+3	; 0x03
 73e:	0c 5f       	subi	r16, 0xFC	; 252
 740:	1f 4f       	sbci	r17, 0xFF	; 255
 742:	08 c0       	rjmp	.+16     	; 0x754 <vfprintf+0x214>
 744:	60 81       	ld	r22, Z
 746:	71 81       	ldd	r23, Z+1	; 0x01
 748:	07 2e       	mov	r0, r23
 74a:	00 0c       	add	r0, r0
 74c:	88 0b       	sbc	r24, r24
 74e:	99 0b       	sbc	r25, r25
 750:	0e 5f       	subi	r16, 0xFE	; 254
 752:	1f 4f       	sbci	r17, 0xFF	; 255
 754:	f3 2d       	mov	r31, r3
 756:	ff 76       	andi	r31, 0x6F	; 111
 758:	3f 2e       	mov	r3, r31
 75a:	97 ff       	sbrs	r25, 7
 75c:	09 c0       	rjmp	.+18     	; 0x770 <vfprintf+0x230>
 75e:	90 95       	com	r25
 760:	80 95       	com	r24
 762:	70 95       	com	r23
 764:	61 95       	neg	r22
 766:	7f 4f       	sbci	r23, 0xFF	; 255
 768:	8f 4f       	sbci	r24, 0xFF	; 255
 76a:	9f 4f       	sbci	r25, 0xFF	; 255
 76c:	f0 68       	ori	r31, 0x80	; 128
 76e:	3f 2e       	mov	r3, r31
 770:	2a e0       	ldi	r18, 0x0A	; 10
 772:	30 e0       	ldi	r19, 0x00	; 0
 774:	a3 01       	movw	r20, r6
 776:	33 d1       	rcall	.+614    	; 0x9de <__ultoa_invert>
 778:	88 2e       	mov	r8, r24
 77a:	86 18       	sub	r8, r6
 77c:	44 c0       	rjmp	.+136    	; 0x806 <vfprintf+0x2c6>
 77e:	85 37       	cpi	r24, 0x75	; 117
 780:	31 f4       	brne	.+12     	; 0x78e <vfprintf+0x24e>
 782:	23 2d       	mov	r18, r3
 784:	2f 7e       	andi	r18, 0xEF	; 239
 786:	b2 2e       	mov	r11, r18
 788:	2a e0       	ldi	r18, 0x0A	; 10
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	25 c0       	rjmp	.+74     	; 0x7d8 <vfprintf+0x298>
 78e:	93 2d       	mov	r25, r3
 790:	99 7f       	andi	r25, 0xF9	; 249
 792:	b9 2e       	mov	r11, r25
 794:	8f 36       	cpi	r24, 0x6F	; 111
 796:	c1 f0       	breq	.+48     	; 0x7c8 <vfprintf+0x288>
 798:	18 f4       	brcc	.+6      	; 0x7a0 <vfprintf+0x260>
 79a:	88 35       	cpi	r24, 0x58	; 88
 79c:	79 f0       	breq	.+30     	; 0x7bc <vfprintf+0x27c>
 79e:	ae c0       	rjmp	.+348    	; 0x8fc <vfprintf+0x3bc>
 7a0:	80 37       	cpi	r24, 0x70	; 112
 7a2:	19 f0       	breq	.+6      	; 0x7aa <vfprintf+0x26a>
 7a4:	88 37       	cpi	r24, 0x78	; 120
 7a6:	21 f0       	breq	.+8      	; 0x7b0 <vfprintf+0x270>
 7a8:	a9 c0       	rjmp	.+338    	; 0x8fc <vfprintf+0x3bc>
 7aa:	e9 2f       	mov	r30, r25
 7ac:	e0 61       	ori	r30, 0x10	; 16
 7ae:	be 2e       	mov	r11, r30
 7b0:	b4 fe       	sbrs	r11, 4
 7b2:	0d c0       	rjmp	.+26     	; 0x7ce <vfprintf+0x28e>
 7b4:	fb 2d       	mov	r31, r11
 7b6:	f4 60       	ori	r31, 0x04	; 4
 7b8:	bf 2e       	mov	r11, r31
 7ba:	09 c0       	rjmp	.+18     	; 0x7ce <vfprintf+0x28e>
 7bc:	34 fe       	sbrs	r3, 4
 7be:	0a c0       	rjmp	.+20     	; 0x7d4 <vfprintf+0x294>
 7c0:	29 2f       	mov	r18, r25
 7c2:	26 60       	ori	r18, 0x06	; 6
 7c4:	b2 2e       	mov	r11, r18
 7c6:	06 c0       	rjmp	.+12     	; 0x7d4 <vfprintf+0x294>
 7c8:	28 e0       	ldi	r18, 0x08	; 8
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	05 c0       	rjmp	.+10     	; 0x7d8 <vfprintf+0x298>
 7ce:	20 e1       	ldi	r18, 0x10	; 16
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <vfprintf+0x298>
 7d4:	20 e1       	ldi	r18, 0x10	; 16
 7d6:	32 e0       	ldi	r19, 0x02	; 2
 7d8:	f8 01       	movw	r30, r16
 7da:	b7 fe       	sbrs	r11, 7
 7dc:	07 c0       	rjmp	.+14     	; 0x7ec <vfprintf+0x2ac>
 7de:	60 81       	ld	r22, Z
 7e0:	71 81       	ldd	r23, Z+1	; 0x01
 7e2:	82 81       	ldd	r24, Z+2	; 0x02
 7e4:	93 81       	ldd	r25, Z+3	; 0x03
 7e6:	0c 5f       	subi	r16, 0xFC	; 252
 7e8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ea:	06 c0       	rjmp	.+12     	; 0x7f8 <vfprintf+0x2b8>
 7ec:	60 81       	ld	r22, Z
 7ee:	71 81       	ldd	r23, Z+1	; 0x01
 7f0:	80 e0       	ldi	r24, 0x00	; 0
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	0e 5f       	subi	r16, 0xFE	; 254
 7f6:	1f 4f       	sbci	r17, 0xFF	; 255
 7f8:	a3 01       	movw	r20, r6
 7fa:	f1 d0       	rcall	.+482    	; 0x9de <__ultoa_invert>
 7fc:	88 2e       	mov	r8, r24
 7fe:	86 18       	sub	r8, r6
 800:	fb 2d       	mov	r31, r11
 802:	ff 77       	andi	r31, 0x7F	; 127
 804:	3f 2e       	mov	r3, r31
 806:	36 fe       	sbrs	r3, 6
 808:	0d c0       	rjmp	.+26     	; 0x824 <vfprintf+0x2e4>
 80a:	23 2d       	mov	r18, r3
 80c:	2e 7f       	andi	r18, 0xFE	; 254
 80e:	a2 2e       	mov	r10, r18
 810:	89 14       	cp	r8, r9
 812:	58 f4       	brcc	.+22     	; 0x82a <vfprintf+0x2ea>
 814:	34 fe       	sbrs	r3, 4
 816:	0b c0       	rjmp	.+22     	; 0x82e <vfprintf+0x2ee>
 818:	32 fc       	sbrc	r3, 2
 81a:	09 c0       	rjmp	.+18     	; 0x82e <vfprintf+0x2ee>
 81c:	83 2d       	mov	r24, r3
 81e:	8e 7e       	andi	r24, 0xEE	; 238
 820:	a8 2e       	mov	r10, r24
 822:	05 c0       	rjmp	.+10     	; 0x82e <vfprintf+0x2ee>
 824:	b8 2c       	mov	r11, r8
 826:	a3 2c       	mov	r10, r3
 828:	03 c0       	rjmp	.+6      	; 0x830 <vfprintf+0x2f0>
 82a:	b8 2c       	mov	r11, r8
 82c:	01 c0       	rjmp	.+2      	; 0x830 <vfprintf+0x2f0>
 82e:	b9 2c       	mov	r11, r9
 830:	a4 fe       	sbrs	r10, 4
 832:	0f c0       	rjmp	.+30     	; 0x852 <vfprintf+0x312>
 834:	fe 01       	movw	r30, r28
 836:	e8 0d       	add	r30, r8
 838:	f1 1d       	adc	r31, r1
 83a:	80 81       	ld	r24, Z
 83c:	80 33       	cpi	r24, 0x30	; 48
 83e:	21 f4       	brne	.+8      	; 0x848 <vfprintf+0x308>
 840:	9a 2d       	mov	r25, r10
 842:	99 7e       	andi	r25, 0xE9	; 233
 844:	a9 2e       	mov	r10, r25
 846:	09 c0       	rjmp	.+18     	; 0x85a <vfprintf+0x31a>
 848:	a2 fe       	sbrs	r10, 2
 84a:	06 c0       	rjmp	.+12     	; 0x858 <vfprintf+0x318>
 84c:	b3 94       	inc	r11
 84e:	b3 94       	inc	r11
 850:	04 c0       	rjmp	.+8      	; 0x85a <vfprintf+0x31a>
 852:	8a 2d       	mov	r24, r10
 854:	86 78       	andi	r24, 0x86	; 134
 856:	09 f0       	breq	.+2      	; 0x85a <vfprintf+0x31a>
 858:	b3 94       	inc	r11
 85a:	a3 fc       	sbrc	r10, 3
 85c:	10 c0       	rjmp	.+32     	; 0x87e <vfprintf+0x33e>
 85e:	a0 fe       	sbrs	r10, 0
 860:	06 c0       	rjmp	.+12     	; 0x86e <vfprintf+0x32e>
 862:	b2 14       	cp	r11, r2
 864:	80 f4       	brcc	.+32     	; 0x886 <vfprintf+0x346>
 866:	28 0c       	add	r2, r8
 868:	92 2c       	mov	r9, r2
 86a:	9b 18       	sub	r9, r11
 86c:	0d c0       	rjmp	.+26     	; 0x888 <vfprintf+0x348>
 86e:	b2 14       	cp	r11, r2
 870:	58 f4       	brcc	.+22     	; 0x888 <vfprintf+0x348>
 872:	b6 01       	movw	r22, r12
 874:	80 e2       	ldi	r24, 0x20	; 32
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	76 d0       	rcall	.+236    	; 0x966 <fputc>
 87a:	b3 94       	inc	r11
 87c:	f8 cf       	rjmp	.-16     	; 0x86e <vfprintf+0x32e>
 87e:	b2 14       	cp	r11, r2
 880:	18 f4       	brcc	.+6      	; 0x888 <vfprintf+0x348>
 882:	2b 18       	sub	r2, r11
 884:	02 c0       	rjmp	.+4      	; 0x88a <vfprintf+0x34a>
 886:	98 2c       	mov	r9, r8
 888:	21 2c       	mov	r2, r1
 88a:	a4 fe       	sbrs	r10, 4
 88c:	0f c0       	rjmp	.+30     	; 0x8ac <vfprintf+0x36c>
 88e:	b6 01       	movw	r22, r12
 890:	80 e3       	ldi	r24, 0x30	; 48
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	68 d0       	rcall	.+208    	; 0x966 <fputc>
 896:	a2 fe       	sbrs	r10, 2
 898:	16 c0       	rjmp	.+44     	; 0x8c6 <vfprintf+0x386>
 89a:	a1 fc       	sbrc	r10, 1
 89c:	03 c0       	rjmp	.+6      	; 0x8a4 <vfprintf+0x364>
 89e:	88 e7       	ldi	r24, 0x78	; 120
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <vfprintf+0x368>
 8a4:	88 e5       	ldi	r24, 0x58	; 88
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	b6 01       	movw	r22, r12
 8aa:	0c c0       	rjmp	.+24     	; 0x8c4 <vfprintf+0x384>
 8ac:	8a 2d       	mov	r24, r10
 8ae:	86 78       	andi	r24, 0x86	; 134
 8b0:	51 f0       	breq	.+20     	; 0x8c6 <vfprintf+0x386>
 8b2:	a1 fe       	sbrs	r10, 1
 8b4:	02 c0       	rjmp	.+4      	; 0x8ba <vfprintf+0x37a>
 8b6:	8b e2       	ldi	r24, 0x2B	; 43
 8b8:	01 c0       	rjmp	.+2      	; 0x8bc <vfprintf+0x37c>
 8ba:	80 e2       	ldi	r24, 0x20	; 32
 8bc:	a7 fc       	sbrc	r10, 7
 8be:	8d e2       	ldi	r24, 0x2D	; 45
 8c0:	b6 01       	movw	r22, r12
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	50 d0       	rcall	.+160    	; 0x966 <fputc>
 8c6:	89 14       	cp	r8, r9
 8c8:	30 f4       	brcc	.+12     	; 0x8d6 <vfprintf+0x396>
 8ca:	b6 01       	movw	r22, r12
 8cc:	80 e3       	ldi	r24, 0x30	; 48
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	4a d0       	rcall	.+148    	; 0x966 <fputc>
 8d2:	9a 94       	dec	r9
 8d4:	f8 cf       	rjmp	.-16     	; 0x8c6 <vfprintf+0x386>
 8d6:	8a 94       	dec	r8
 8d8:	f3 01       	movw	r30, r6
 8da:	e8 0d       	add	r30, r8
 8dc:	f1 1d       	adc	r31, r1
 8de:	80 81       	ld	r24, Z
 8e0:	b6 01       	movw	r22, r12
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	40 d0       	rcall	.+128    	; 0x966 <fputc>
 8e6:	81 10       	cpse	r8, r1
 8e8:	f6 cf       	rjmp	.-20     	; 0x8d6 <vfprintf+0x396>
 8ea:	22 20       	and	r2, r2
 8ec:	09 f4       	brne	.+2      	; 0x8f0 <vfprintf+0x3b0>
 8ee:	4e ce       	rjmp	.-868    	; 0x58c <vfprintf+0x4c>
 8f0:	b6 01       	movw	r22, r12
 8f2:	80 e2       	ldi	r24, 0x20	; 32
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	37 d0       	rcall	.+110    	; 0x966 <fputc>
 8f8:	2a 94       	dec	r2
 8fa:	f7 cf       	rjmp	.-18     	; 0x8ea <vfprintf+0x3aa>
 8fc:	f6 01       	movw	r30, r12
 8fe:	86 81       	ldd	r24, Z+6	; 0x06
 900:	97 81       	ldd	r25, Z+7	; 0x07
 902:	02 c0       	rjmp	.+4      	; 0x908 <vfprintf+0x3c8>
 904:	8f ef       	ldi	r24, 0xFF	; 255
 906:	9f ef       	ldi	r25, 0xFF	; 255
 908:	2b 96       	adiw	r28, 0x0b	; 11
 90a:	0f b6       	in	r0, 0x3f	; 63
 90c:	f8 94       	cli
 90e:	de bf       	out	0x3e, r29	; 62
 910:	0f be       	out	0x3f, r0	; 63
 912:	cd bf       	out	0x3d, r28	; 61
 914:	df 91       	pop	r29
 916:	cf 91       	pop	r28
 918:	1f 91       	pop	r17
 91a:	0f 91       	pop	r16
 91c:	ff 90       	pop	r15
 91e:	ef 90       	pop	r14
 920:	df 90       	pop	r13
 922:	cf 90       	pop	r12
 924:	bf 90       	pop	r11
 926:	af 90       	pop	r10
 928:	9f 90       	pop	r9
 92a:	8f 90       	pop	r8
 92c:	7f 90       	pop	r7
 92e:	6f 90       	pop	r6
 930:	5f 90       	pop	r5
 932:	4f 90       	pop	r4
 934:	3f 90       	pop	r3
 936:	2f 90       	pop	r2
 938:	08 95       	ret

0000093a <strnlen_P>:
 93a:	fc 01       	movw	r30, r24
 93c:	05 90       	lpm	r0, Z+
 93e:	61 50       	subi	r22, 0x01	; 1
 940:	70 40       	sbci	r23, 0x00	; 0
 942:	01 10       	cpse	r0, r1
 944:	d8 f7       	brcc	.-10     	; 0x93c <strnlen_P+0x2>
 946:	80 95       	com	r24
 948:	90 95       	com	r25
 94a:	8e 0f       	add	r24, r30
 94c:	9f 1f       	adc	r25, r31
 94e:	08 95       	ret

00000950 <strnlen>:
 950:	fc 01       	movw	r30, r24
 952:	61 50       	subi	r22, 0x01	; 1
 954:	70 40       	sbci	r23, 0x00	; 0
 956:	01 90       	ld	r0, Z+
 958:	01 10       	cpse	r0, r1
 95a:	d8 f7       	brcc	.-10     	; 0x952 <strnlen+0x2>
 95c:	80 95       	com	r24
 95e:	90 95       	com	r25
 960:	8e 0f       	add	r24, r30
 962:	9f 1f       	adc	r25, r31
 964:	08 95       	ret

00000966 <fputc>:
 966:	0f 93       	push	r16
 968:	1f 93       	push	r17
 96a:	cf 93       	push	r28
 96c:	df 93       	push	r29
 96e:	fb 01       	movw	r30, r22
 970:	23 81       	ldd	r18, Z+3	; 0x03
 972:	21 fd       	sbrc	r18, 1
 974:	03 c0       	rjmp	.+6      	; 0x97c <fputc+0x16>
 976:	8f ef       	ldi	r24, 0xFF	; 255
 978:	9f ef       	ldi	r25, 0xFF	; 255
 97a:	2c c0       	rjmp	.+88     	; 0x9d4 <fputc+0x6e>
 97c:	22 ff       	sbrs	r18, 2
 97e:	16 c0       	rjmp	.+44     	; 0x9ac <fputc+0x46>
 980:	46 81       	ldd	r20, Z+6	; 0x06
 982:	57 81       	ldd	r21, Z+7	; 0x07
 984:	24 81       	ldd	r18, Z+4	; 0x04
 986:	35 81       	ldd	r19, Z+5	; 0x05
 988:	42 17       	cp	r20, r18
 98a:	53 07       	cpc	r21, r19
 98c:	44 f4       	brge	.+16     	; 0x99e <fputc+0x38>
 98e:	a0 81       	ld	r26, Z
 990:	b1 81       	ldd	r27, Z+1	; 0x01
 992:	9d 01       	movw	r18, r26
 994:	2f 5f       	subi	r18, 0xFF	; 255
 996:	3f 4f       	sbci	r19, 0xFF	; 255
 998:	31 83       	std	Z+1, r19	; 0x01
 99a:	20 83       	st	Z, r18
 99c:	8c 93       	st	X, r24
 99e:	26 81       	ldd	r18, Z+6	; 0x06
 9a0:	37 81       	ldd	r19, Z+7	; 0x07
 9a2:	2f 5f       	subi	r18, 0xFF	; 255
 9a4:	3f 4f       	sbci	r19, 0xFF	; 255
 9a6:	37 83       	std	Z+7, r19	; 0x07
 9a8:	26 83       	std	Z+6, r18	; 0x06
 9aa:	14 c0       	rjmp	.+40     	; 0x9d4 <fputc+0x6e>
 9ac:	8b 01       	movw	r16, r22
 9ae:	ec 01       	movw	r28, r24
 9b0:	fb 01       	movw	r30, r22
 9b2:	00 84       	ldd	r0, Z+8	; 0x08
 9b4:	f1 85       	ldd	r31, Z+9	; 0x09
 9b6:	e0 2d       	mov	r30, r0
 9b8:	09 95       	icall
 9ba:	89 2b       	or	r24, r25
 9bc:	e1 f6       	brne	.-72     	; 0x976 <fputc+0x10>
 9be:	d8 01       	movw	r26, r16
 9c0:	16 96       	adiw	r26, 0x06	; 6
 9c2:	8d 91       	ld	r24, X+
 9c4:	9c 91       	ld	r25, X
 9c6:	17 97       	sbiw	r26, 0x07	; 7
 9c8:	01 96       	adiw	r24, 0x01	; 1
 9ca:	17 96       	adiw	r26, 0x07	; 7
 9cc:	9c 93       	st	X, r25
 9ce:	8e 93       	st	-X, r24
 9d0:	16 97       	sbiw	r26, 0x06	; 6
 9d2:	ce 01       	movw	r24, r28
 9d4:	df 91       	pop	r29
 9d6:	cf 91       	pop	r28
 9d8:	1f 91       	pop	r17
 9da:	0f 91       	pop	r16
 9dc:	08 95       	ret

000009de <__ultoa_invert>:
 9de:	fa 01       	movw	r30, r20
 9e0:	aa 27       	eor	r26, r26
 9e2:	28 30       	cpi	r18, 0x08	; 8
 9e4:	51 f1       	breq	.+84     	; 0xa3a <__ultoa_invert+0x5c>
 9e6:	20 31       	cpi	r18, 0x10	; 16
 9e8:	81 f1       	breq	.+96     	; 0xa4a <__ultoa_invert+0x6c>
 9ea:	e8 94       	clt
 9ec:	6f 93       	push	r22
 9ee:	6e 7f       	andi	r22, 0xFE	; 254
 9f0:	6e 5f       	subi	r22, 0xFE	; 254
 9f2:	7f 4f       	sbci	r23, 0xFF	; 255
 9f4:	8f 4f       	sbci	r24, 0xFF	; 255
 9f6:	9f 4f       	sbci	r25, 0xFF	; 255
 9f8:	af 4f       	sbci	r26, 0xFF	; 255
 9fa:	b1 e0       	ldi	r27, 0x01	; 1
 9fc:	3e d0       	rcall	.+124    	; 0xa7a <__ultoa_invert+0x9c>
 9fe:	b4 e0       	ldi	r27, 0x04	; 4
 a00:	3c d0       	rcall	.+120    	; 0xa7a <__ultoa_invert+0x9c>
 a02:	67 0f       	add	r22, r23
 a04:	78 1f       	adc	r23, r24
 a06:	89 1f       	adc	r24, r25
 a08:	9a 1f       	adc	r25, r26
 a0a:	a1 1d       	adc	r26, r1
 a0c:	68 0f       	add	r22, r24
 a0e:	79 1f       	adc	r23, r25
 a10:	8a 1f       	adc	r24, r26
 a12:	91 1d       	adc	r25, r1
 a14:	a1 1d       	adc	r26, r1
 a16:	6a 0f       	add	r22, r26
 a18:	71 1d       	adc	r23, r1
 a1a:	81 1d       	adc	r24, r1
 a1c:	91 1d       	adc	r25, r1
 a1e:	a1 1d       	adc	r26, r1
 a20:	20 d0       	rcall	.+64     	; 0xa62 <__ultoa_invert+0x84>
 a22:	09 f4       	brne	.+2      	; 0xa26 <__ultoa_invert+0x48>
 a24:	68 94       	set
 a26:	3f 91       	pop	r19
 a28:	2a e0       	ldi	r18, 0x0A	; 10
 a2a:	26 9f       	mul	r18, r22
 a2c:	11 24       	eor	r1, r1
 a2e:	30 19       	sub	r19, r0
 a30:	30 5d       	subi	r19, 0xD0	; 208
 a32:	31 93       	st	Z+, r19
 a34:	de f6       	brtc	.-74     	; 0x9ec <__ultoa_invert+0xe>
 a36:	cf 01       	movw	r24, r30
 a38:	08 95       	ret
 a3a:	46 2f       	mov	r20, r22
 a3c:	47 70       	andi	r20, 0x07	; 7
 a3e:	40 5d       	subi	r20, 0xD0	; 208
 a40:	41 93       	st	Z+, r20
 a42:	b3 e0       	ldi	r27, 0x03	; 3
 a44:	0f d0       	rcall	.+30     	; 0xa64 <__ultoa_invert+0x86>
 a46:	c9 f7       	brne	.-14     	; 0xa3a <__ultoa_invert+0x5c>
 a48:	f6 cf       	rjmp	.-20     	; 0xa36 <__ultoa_invert+0x58>
 a4a:	46 2f       	mov	r20, r22
 a4c:	4f 70       	andi	r20, 0x0F	; 15
 a4e:	40 5d       	subi	r20, 0xD0	; 208
 a50:	4a 33       	cpi	r20, 0x3A	; 58
 a52:	18 f0       	brcs	.+6      	; 0xa5a <__ultoa_invert+0x7c>
 a54:	49 5d       	subi	r20, 0xD9	; 217
 a56:	31 fd       	sbrc	r19, 1
 a58:	40 52       	subi	r20, 0x20	; 32
 a5a:	41 93       	st	Z+, r20
 a5c:	02 d0       	rcall	.+4      	; 0xa62 <__ultoa_invert+0x84>
 a5e:	a9 f7       	brne	.-22     	; 0xa4a <__ultoa_invert+0x6c>
 a60:	ea cf       	rjmp	.-44     	; 0xa36 <__ultoa_invert+0x58>
 a62:	b4 e0       	ldi	r27, 0x04	; 4
 a64:	a6 95       	lsr	r26
 a66:	97 95       	ror	r25
 a68:	87 95       	ror	r24
 a6a:	77 95       	ror	r23
 a6c:	67 95       	ror	r22
 a6e:	ba 95       	dec	r27
 a70:	c9 f7       	brne	.-14     	; 0xa64 <__ultoa_invert+0x86>
 a72:	00 97       	sbiw	r24, 0x00	; 0
 a74:	61 05       	cpc	r22, r1
 a76:	71 05       	cpc	r23, r1
 a78:	08 95       	ret
 a7a:	9b 01       	movw	r18, r22
 a7c:	ac 01       	movw	r20, r24
 a7e:	0a 2e       	mov	r0, r26
 a80:	06 94       	lsr	r0
 a82:	57 95       	ror	r21
 a84:	47 95       	ror	r20
 a86:	37 95       	ror	r19
 a88:	27 95       	ror	r18
 a8a:	ba 95       	dec	r27
 a8c:	c9 f7       	brne	.-14     	; 0xa80 <__ultoa_invert+0xa2>
 a8e:	62 0f       	add	r22, r18
 a90:	73 1f       	adc	r23, r19
 a92:	84 1f       	adc	r24, r20
 a94:	95 1f       	adc	r25, r21
 a96:	a0 1d       	adc	r26, r0
 a98:	08 95       	ret

00000a9a <_exit>:
 a9a:	f8 94       	cli

00000a9c <__stop_program>:
 a9c:	ff cf       	rjmp	.-2      	; 0xa9c <__stop_program>
