
MultipleCompareMatchINT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000208  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000027c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ac  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000797  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000364  00000000  00000000  0000136f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  000016d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041e  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000124  00000000  00000000  00001ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001cca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3e c0       	rjmp	.+124    	; 0xae <__vector_12>
  32:	00 00       	nop
  34:	56 c0       	rjmp	.+172    	; 0xe2 <__vector_13>
  36:	00 00       	nop
  38:	95 c0       	rjmp	.+298    	; 0x164 <__vector_14>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	66 c0       	rjmp	.+204    	; 0x12e <__vector_24>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	8f d0       	rcall	.+286    	; 0x1c8 <main>
  aa:	ac c0       	rjmp	.+344    	; 0x204 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_12>:
unit8_t state0 = 0, state1 = 0, state2 = 0; // each led state


// COMPA to make 1/4(.25) sec
ISR(TIMER1_COMPA_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
	state2 = !state2;
  bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	81 11       	cpse	r24, r1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
	if (state2) PORTB |= 0x04;
  ca:	81 11       	cpse	r24, r1
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <__vector_12+0x24>
  ce:	c2 9a       	sbi	0x18, 2	; 24
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <__vector_12+0x26>
	else PORTB &= ~ 0x04; 
  d2:	c2 98       	cbi	0x18, 2	; 24
}
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <__vector_13>:

// COMPB to make 1/2(.50) sec
ISR(TIMER1_COMPB_vect)
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
	state2 = !state2; 
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	81 11       	cpse	r24, r1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
	if (state2) PORTB |= 0x04; 
  fe:	81 11       	cpse	r24, r1
 100:	02 c0       	rjmp	.+4      	; 0x106 <__vector_13+0x24>
 102:	c2 9a       	sbi	0x18, 2	; 24
 104:	01 c0       	rjmp	.+2      	; 0x108 <__vector_13+0x26>
	else PORTB &= ~0x04; 
 106:	c2 98       	cbi	0x18, 2	; 24

	state1 = !state1; 
 108:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state1>
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	81 11       	cpse	r24, r1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <state1>
	if (state1) PORTB |= 0x02;
 116:	81 11       	cpse	r24, r1
 118:	02 c0       	rjmp	.+4      	; 0x11e <__vector_13+0x3c>
 11a:	c1 9a       	sbi	0x18, 1	; 24
 11c:	01 c0       	rjmp	.+2      	; 0x120 <__vector_13+0x3e>
	else PORTB &= ~0x02;
 11e:	c1 98       	cbi	0x18, 1	; 24

}
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <__vector_24>:

//COMPC to make 3/4(.75) sec
ISR(TIMER1_COMPC_vect)
{
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
	state2 = !state2;
 13c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	81 11       	cpse	r24, r1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
	if (state2) PORTB = 0x04; 
 14a:	81 11       	cpse	r24, r1
 14c:	03 c0       	rjmp	.+6      	; 0x154 <__vector_24+0x26>
 14e:	84 e0       	ldi	r24, 0x04	; 4
 150:	88 bb       	out	0x18, r24	; 24
 152:	01 c0       	rjmp	.+2      	; 0x156 <__vector_24+0x28>
	else PORTB &= ~0x04;
 154:	c2 98       	cbi	0x18, 2	; 24
}
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <__vector_14>:


// OVF of timer1 to make 1 sec
ISR(TIMER1_OVF_vect)
{
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
	state2 = !state2;
 172:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	81 11       	cpse	r24, r1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
	if(state2) PORTB |= 0x04;
 180:	81 11       	cpse	r24, r1
 182:	02 c0       	rjmp	.+4      	; 0x188 <__vector_14+0x24>
 184:	c2 9a       	sbi	0x18, 2	; 24
 186:	01 c0       	rjmp	.+2      	; 0x18a <__vector_14+0x26>
	else PORTB &= ~0x04;
 188:	c2 98       	cbi	0x18, 2	; 24

	state1 = !state1;
 18a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state1>
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	81 11       	cpse	r24, r1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <state1>
	if (state1) PORTB |= 0x02;
 198:	81 11       	cpse	r24, r1
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <__vector_14+0x3c>
 19c:	c1 9a       	sbi	0x18, 1	; 24
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <__vector_14+0x3e>
	else PORTB &= ~0x02;
 1a0:	c1 98       	cbi	0x18, 1	; 24

	state0 = !state0;
 1a2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state0>
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	81 11       	cpse	r24, r1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state0>
	if (state0) PORTB |= 0x01;
 1b0:	81 11       	cpse	r24, r1
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <__vector_14+0x54>
 1b4:	c0 9a       	sbi	0x18, 0	; 24
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <__vector_14+0x56>
	else PORTB &= ~0x01;
 1b8:	c0 98       	cbi	0x18, 0	; 24

}
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <main>:


int main(void)
{
	DDRB = (1 << DDRB0) | (1 << DDRB1) | (1 << DDRB2); // set port[0:2] as output
 1c8:	87 e0       	ldi	r24, 0x07	; 7
 1ca:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00; // initial state(all led[0:2] off)
 1cc:	18 ba       	out	0x18, r1	; 24

	// set each OCR1n value(max)
	OCR1A = 0x3FFF; // .25sec
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	9f e3       	ldi	r25, 0x3F	; 63
 1d2:	9b bd       	out	0x2b, r25	; 43
 1d4:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 0x7FFF; // .50sec
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	9f e7       	ldi	r25, 0x7F	; 127
 1da:	99 bd       	out	0x29, r25	; 41
 1dc:	88 bd       	out	0x28, r24	; 40
	OCR1C = 0xBFFF; // .75sec
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	9f eb       	ldi	r25, 0xBF	; 191
 1e2:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1e6:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	
	TCCR1B |= (1 << CS12); // pre-scale ratio 256
 1ea:	8e b5       	in	r24, 0x2e	; 46
 1ec:	84 60       	ori	r24, 0x04	; 4
 1ee:	8e bd       	out	0x2e, r24	; 46

	// compare & match A, B, and overflow INT of timer1 enable
	TIMSK |= (1 << OCIE1A) | (1 << OCIE1B) | (1 << TOIE1);
 1f0:	87 b7       	in	r24, 0x37	; 55
 1f2:	8c 61       	ori	r24, 0x1C	; 28
 1f4:	87 bf       	out	0x37, r24	; 55
	// compare and match C INT of timer1 enable
	ETIMSK |= (1 << OCIE1C);
 1f6:	ed e7       	ldi	r30, 0x7D	; 125
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	81 60       	ori	r24, 0x01	; 1
 1fe:	80 83       	st	Z, r24
	sei();
 200:	78 94       	sei
 202:	ff cf       	rjmp	.-2      	; 0x202 <main+0x3a>

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
