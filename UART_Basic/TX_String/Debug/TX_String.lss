
TX_String.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000138  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000097b  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a2  00000000  00000000  00000bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fd  00000000  00000000  00001481  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001780  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043b  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d1  00000000  00000000  00001c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001cfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e3       	ldi	r30, 0x38	; 56
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1d d0       	rcall	.+58     	; 0xee <main>
  b4:	3f c0       	rjmp	.+126    	; 0x134 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <USART0_INIT>:

#define UBRR 103 // 9600bps at 1x mode

void USART0_INIT(unsigned int ubrr0) // 8bit, no-parity, 1 stop-bit, TX-enable
{
	UBRR0H = (unsigned char)(ubrr0 >> 8);
  b8:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)(ubrr0);
  bc:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1 << TXEN0);
  be:	88 e0       	ldi	r24, 0x08	; 8
  c0:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // 8bit
  c2:	86 e0       	ldi	r24, 0x06	; 6
  c4:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  c8:	08 95       	ret

000000ca <TX0_ch>:
}

// This function will be summoned to TX0_STR to send accumulated character string 
void TX0_ch (unsigned char chData)
{
	while(!((UCSR0A & (1 << UDRE0)))); // check the transmit enable status
  ca:	5d 9b       	sbis	0x0b, 5	; 11
  cc:	fe cf       	rjmp	.-4      	; 0xca <TX0_ch>
	UDR0 = chData; // write chData, which means to transmit data
  ce:	8c b9       	out	0x0c, r24	; 12
  d0:	08 95       	ret

000000d2 <TX0_STR>:
}

// Basically, string is the succession(sum) of character, so that
// it is advised to re-use TX0_ch to send sum of character
void TX0_STR(const unsigned char *str)
{
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	ec 01       	movw	r28, r24
	while(*str) // until *str becomes 0
  d8:	88 81       	ld	r24, Y
  da:	88 23       	and	r24, r24
  dc:	29 f0       	breq	.+10     	; 0xe8 <TX0_STR+0x16>
  de:	21 96       	adiw	r28, 0x01	; 1
	{
		TX0_ch(*str++); // send character without stopping
  e0:	f4 df       	rcall	.-24     	; 0xca <TX0_ch>

// Basically, string is the succession(sum) of character, so that
// it is advised to re-use TX0_ch to send sum of character
void TX0_STR(const unsigned char *str)
{
	while(*str) // until *str becomes 0
  e2:	89 91       	ld	r24, Y+
  e4:	81 11       	cpse	r24, r1
  e6:	fc cf       	rjmp	.-8      	; 0xe0 <TX0_STR+0xe>
	{
		TX0_ch(*str++); // send character without stopping
	}
}
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <main>:

int main(void)
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	2e 97       	sbiw	r28, 0x0e	; 14
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	f8 94       	cli
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	0f be       	out	0x3f, r0	; 63
 100:	cd bf       	out	0x3d, r28	; 61
	const unsigned char str1[] = "Hello World\r\n";
 102:	8e e0       	ldi	r24, 0x0E	; 14
 104:	e0 e0       	ldi	r30, 0x00	; 0
 106:	f1 e0       	ldi	r31, 0x01	; 1
 108:	de 01       	movw	r26, r28
 10a:	11 96       	adiw	r26, 0x01	; 1
 10c:	01 90       	ld	r0, Z+
 10e:	0d 92       	st	X+, r0
 110:	8a 95       	dec	r24
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x1e>
	USART0_INIT(UBRR); // 9600 bps
 114:	87 e6       	ldi	r24, 0x67	; 103
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	cf df       	rcall	.-98     	; 0xb8 <USART0_INIT>
    while (1) 
    {
		TX0_STR(str1);
 11a:	ce 01       	movw	r24, r28
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	d9 df       	rcall	.-78     	; 0xd2 <TX0_STR>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	83 ed       	ldi	r24, 0xD3	; 211
 124:	90 e3       	ldi	r25, 0x30	; 48
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x38>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x42>
 130:	00 00       	nop
 132:	f3 cf       	rjmp	.-26     	; 0x11a <main+0x2c>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
