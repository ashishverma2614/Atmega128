
FNDSetControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000009d8  00000a6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800110  00800110  00000a7c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ad8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b16  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008dd  00000000  00000000  00001686  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000056f  00000000  00000000  00001f63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  000024d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049d  00000000  00000000  0000260c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000037c  00000000  00000000  00002aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002e25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5d c0       	rjmp	.+186    	; 0xc8 <__vector_3>
   e:	00 00       	nop
  10:	71 c0       	rjmp	.+226    	; 0xf4 <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	89 c0       	rjmp	.+274    	; 0x130 <__vector_7>
  1e:	00 00       	nop
  20:	cf c0       	rjmp	.+414    	; 0x1c0 <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e3 c0       	rjmp	.+454    	; 0x208 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ed       	ldi	r30, 0xD8	; 216
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 31       	cpi	r26, 0x1C	; 28
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	62 d1       	rcall	.+708    	; 0x388 <main>
  c4:	87 c4       	rjmp	.+2318   	; 0x9d4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_3>:
char fndPattern[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67};
char timerCnt;

// SW1
ISR(INT2_vect) //set initial val of count, blink start
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
	isBlink = 1; // start to blink(set-up mode)
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	fndNum = 0; // select the first fnd[0]
  da:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <fndNum>
	isCountUp = 0; // don't count up
  de:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <isCountUp>
	
	TCCR0 = 0x01; // turn on Timer INT
  e2:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
  e4:	12 be       	out	0x32, r1	; 50
	EIMSK = 0x00; // stop external INT temporarily
  e6:	19 be       	out	0x39, r1	; 57
}
  e8:	8f 91       	pop	r24
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <__vector_4>:

// SW2
ISR(INT3_vect) // move fndNum 0 -> 1 -> 2 -> 3 -> 0
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	8f 93       	push	r24
	if (isBlink == 1)
 100:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	51 f4       	brne	.+20     	; 0x11c <__vector_4+0x28>
	{
		fndNum++;
 108:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <fndNum>
 10c:	8f 5f       	subi	r24, 0xFF	; 255
		if(fndNum > 3) fndNum = 0; // move to the first fnd again
 10e:	84 30       	cpi	r24, 0x04	; 4
 110:	18 f4       	brcc	.+6      	; 0x118 <__vector_4+0x24>
// SW2
ISR(INT3_vect) // move fndNum 0 -> 1 -> 2 -> 3 -> 0
{
	if (isBlink == 1)
	{
		fndNum++;
 112:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <fndNum>
 116:	02 c0       	rjmp	.+4      	; 0x11c <__vector_4+0x28>
		if(fndNum > 3) fndNum = 0; // move to the first fnd again
 118:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <fndNum>
	}
	TCCR0 = 0x01;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
 120:	12 be       	out	0x32, r1	; 50
	EIMSK = 0x00;
 122:	19 be       	out	0x39, r1	; 57
}
 124:	8f 91       	pop	r24
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <__vector_7>:
// SW3
ISR(INT6_vect) // count-up number at the present fnd 0 ~ 9 -> 0
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	0b b6       	in	r0, 0x3b	; 59
 13c:	0f 92       	push	r0
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
	if(temp[3 - fndNum] == '9') temp[3 - fndNum] = '0';
 156:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <fndNum>
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	82 1b       	sub	r24, r18
 160:	91 09       	sbc	r25, r1
 162:	fc 01       	movw	r30, r24
 164:	ec 5e       	subi	r30, 0xEC	; 236
 166:	fe 4f       	sbci	r31, 0xFE	; 254
 168:	20 81       	ld	r18, Z
 16a:	29 33       	cpi	r18, 0x39	; 57
 16c:	31 f4       	brne	.+12     	; 0x17a <__vector_7+0x4a>
 16e:	fc 01       	movw	r30, r24
 170:	ec 5e       	subi	r30, 0xEC	; 236
 172:	fe 4f       	sbci	r31, 0xFE	; 254
 174:	20 e3       	ldi	r18, 0x30	; 48
 176:	20 83       	st	Z, r18
 178:	05 c0       	rjmp	.+10     	; 0x184 <__vector_7+0x54>
	else temp[3 - fndNum]++;
 17a:	fc 01       	movw	r30, r24
 17c:	ec 5e       	subi	r30, 0xEC	; 236
 17e:	fe 4f       	sbci	r31, 0xFE	; 254
 180:	2f 5f       	subi	r18, 0xFF	; 255
 182:	20 83       	st	Z, r18
	
	 // store current fnd num to the count(Remember: values in the temp are char)
	cnt = atoi(temp); // only can nums be converted, ignoring any kind of non-numerical value
 184:	84 e1       	ldi	r24, 0x14	; 20
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	25 d1       	rcall	.+586    	; 0x3d4 <atoi>
 18a:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <cnt+0x1>
 18e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <cnt>

	TCCR0 = 0x01;
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
 196:	12 be       	out	0x32, r1	; 50
	EIMSK = 0x00;
 198:	19 be       	out	0x39, r1	; 57
}
 19a:	ff 91       	pop	r31
 19c:	ef 91       	pop	r30
 19e:	bf 91       	pop	r27
 1a0:	af 91       	pop	r26
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	7f 91       	pop	r23
 1a8:	6f 91       	pop	r22
 1aa:	5f 91       	pop	r21
 1ac:	4f 91       	pop	r20
 1ae:	3f 91       	pop	r19
 1b0:	2f 91       	pop	r18
 1b2:	0f 90       	pop	r0
 1b4:	0b be       	out	0x3b, r0	; 59
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <__vector_8>:
// SW4
ISR(INT7_vect) // start to count-up(blink off), 0.1 sec delay
{
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
	isBlink = 0; // blink off(end-setup)
 1ce:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
	blinkState = 0; // blink state ON for 0.5s
 1d2:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <blinkState>
	isCountUp = (isCountUp + 1) % 2; // toggle count-up state
 1d6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <isCountUp>
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	81 70       	andi	r24, 0x01	; 1
 1e0:	90 78       	andi	r25, 0x80	; 128
 1e2:	99 23       	and	r25, r25
 1e4:	24 f4       	brge	.+8      	; 0x1ee <__vector_8+0x2e>
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	8e 6f       	ori	r24, 0xFE	; 254
 1ea:	9f 6f       	ori	r25, 0xFF	; 255
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <isCountUp>
	
	TCCR0 = 0x01;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
 1f6:	12 be       	out	0x32, r1	; 50
	EIMSK = 0x00;
 1f8:	19 be       	out	0x39, r1	; 57
}
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <__vector_16>:

ISR(TIMER0_OVF_vect) // timer for debounce
{
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	8f 93       	push	r24
	++timerCnt;
 214:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <timerCnt>
 218:	8f 5f       	subi	r24, 0xFF	; 255
	if(timerCnt == 30)
 21a:	8e 31       	cpi	r24, 0x1E	; 30
 21c:	19 f0       	breq	.+6      	; 0x224 <__vector_16+0x1c>
	EIMSK = 0x00;
}

ISR(TIMER0_OVF_vect) // timer for debounce
{
	++timerCnt;
 21e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <timerCnt>
 222:	07 c0       	rjmp	.+14     	; 0x232 <__vector_16+0x2a>
	if(timerCnt == 30)
	{
		timerCnt = 0; // reset counter
 224:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <timerCnt>
		EIMSK = (1 << INT2) | (1 << INT3) | (1 << INT6) | (1 << INT7); // re-start EXT. INT.
 228:	8c ec       	ldi	r24, 0xCC	; 204
 22a:	89 bf       	out	0x39, r24	; 57
		TCCR0 = 0; // stop timer INT
 22c:	13 be       	out	0x33, r1	; 51
		EIFR = 0x01; // make flag 0
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	88 bf       	out	0x38, r24	; 56
	}
}
 232:	8f 91       	pop	r24
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <INIT>:

void INIT(void)
{
	// port setting
	DDRA = 0xFF; // 0~9, blank
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF; // fnd 0 ~ 3
 242:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x00; // SW 1, 2
 244:	11 ba       	out	0x11, r1	; 17
	DDRE = 0x00; // SW 3, 4
 246:	12 b8       	out	0x02, r1	; 2
	
	// internal pull-up setting of all SW
	PORTD = 0x0C;
 248:	8c e0       	ldi	r24, 0x0C	; 12
 24a:	82 bb       	out	0x12, r24	; 18
	PORTE = 0xC0;
 24c:	80 ec       	ldi	r24, 0xC0	; 192
 24e:	83 b9       	out	0x03, r24	; 3
	
	// EXT. INT. setting
	EICRA = (1 << ISC21) | (1 << ISC31);
 250:	80 ea       	ldi	r24, 0xA0	; 160
 252:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB = (1 << ISC61) | (1 << ISC71);
 256:	8a bf       	out	0x3a, r24	; 58
	EIMSK = (1 << INT2) | (1 << INT3) | (1 << INT6) | (1 << INT7);
 258:	8c ec       	ldi	r24, 0xCC	; 204
 25a:	89 bf       	out	0x39, r24	; 57
	
	//Timer setting
	TCCR0 = 0x00; // timer stop
 25c:	13 be       	out	0x33, r1	; 51
	TIMSK = 0x01; // OVF enable
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 0; // set bottom
 262:	12 be       	out	0x32, r1	; 50
	sei();	
 264:	78 94       	sei
 266:	08 95       	ret

00000268 <displayFnd>:
}
void displayFnd(void)
{
	sprintf(temp, "%04d\0", cnt); // write count value to the temp array, temp stores *char
 268:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <cnt+0x1>
 26c:	8f 93       	push	r24
 26e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cnt>
 272:	8f 93       	push	r24
 274:	8a e0       	ldi	r24, 0x0A	; 10
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	9f 93       	push	r25
 27a:	8f 93       	push	r24
 27c:	84 e1       	ldi	r24, 0x14	; 20
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	9f 93       	push	r25
 282:	8f 93       	push	r24
 284:	cc d0       	rcall	.+408    	; 0x41e <sprintf>
	
	for (int i = 0; i <= (25 * isBlink); i++) // if blink(isBlink = 1) mode on set-up mode, it blinks by 0.5s
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	90 e0       	ldi	r25, 0x00	; 0
	{
		PORTC = 0x01; // fnd1
 296:	61 e0       	ldi	r22, 0x01	; 1
		if (blinkState == 1 && fndNum == 0)
			PORTA = 0xFF; // off fnd
		else
			PORTA = ~fndPattern[temp[3] - '0'];
 298:	a4 e1       	ldi	r26, 0x14	; 20
 29a:	b1 e0       	ldi	r27, 0x01	; 1
	
	for (int i = 0; i <= (25 * isBlink); i++) // if blink(isBlink = 1) mode on set-up mode, it blinks by 0.5s
	{
		PORTC = 0x01; // fnd1
		if (blinkState == 1 && fndNum == 0)
			PORTA = 0xFF; // off fnd
 29c:	7f ef       	ldi	r23, 0xFF	; 255
		else
			PORTA = ~fndPattern[temp[3] - '0'];
		_delay_ms(5); // time for dynamic display
		
		PORTC = 0x02; // fnd2
 29e:	52 e0       	ldi	r21, 0x02	; 2
			PORTA = 0xFF;
		else
			PORTA = ~fndPattern[temp[2] - '0'];
		_delay_ms(5);
		
		PORTC = 0x04; // fnd3
 2a0:	44 e0       	ldi	r20, 0x04	; 4
			PORTA = 0xFF;
		else
			PORTA = ~fndPattern[temp[1] - '0'];
		_delay_ms(5);
		
		PORTC = 0x08; // fnd4
 2a2:	38 e0       	ldi	r19, 0x08	; 8
}
void displayFnd(void)
{
	sprintf(temp, "%04d\0", cnt); // write count value to the temp array, temp stores *char
	
	for (int i = 0; i <= (25 * isBlink); i++) // if blink(isBlink = 1) mode on set-up mode, it blinks by 0.5s
 2a4:	29 e1       	ldi	r18, 0x19	; 25
	{
		PORTC = 0x01; // fnd1
 2a6:	65 bb       	out	0x15, r22	; 21
		if (blinkState == 1 && fndNum == 0)
 2a8:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <blinkState>
 2ac:	e1 30       	cpi	r30, 0x01	; 1
 2ae:	31 f4       	brne	.+12     	; 0x2bc <displayFnd+0x54>
 2b0:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <fndNum>
 2b4:	e1 11       	cpse	r30, r1
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <displayFnd+0x54>
			PORTA = 0xFF; // off fnd
 2b8:	7b bb       	out	0x1b, r23	; 27
 2ba:	09 c0       	rjmp	.+18     	; 0x2ce <displayFnd+0x66>
		else
			PORTA = ~fndPattern[temp[3] - '0'];
 2bc:	13 96       	adiw	r26, 0x03	; 3
 2be:	ec 91       	ld	r30, X
 2c0:	13 97       	sbiw	r26, 0x03	; 3
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	e0 53       	subi	r30, 0x30	; 48
 2c6:	ff 4f       	sbci	r31, 0xFF	; 255
 2c8:	e0 81       	ld	r30, Z
 2ca:	e0 95       	com	r30
 2cc:	eb bb       	out	0x1b, r30	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ce:	ef e1       	ldi	r30, 0x1F	; 31
 2d0:	fe e4       	ldi	r31, 0x4E	; 78
 2d2:	31 97       	sbiw	r30, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <displayFnd+0x6a>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <displayFnd+0x70>
 2d8:	00 00       	nop
		_delay_ms(5); // time for dynamic display
		
		PORTC = 0x02; // fnd2
 2da:	55 bb       	out	0x15, r21	; 21
		if(blinkState == 1 && fndNum == 1)
 2dc:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <blinkState>
 2e0:	e1 30       	cpi	r30, 0x01	; 1
 2e2:	31 f4       	brne	.+12     	; 0x2f0 <displayFnd+0x88>
 2e4:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <fndNum>
 2e8:	e1 30       	cpi	r30, 0x01	; 1
 2ea:	11 f4       	brne	.+4      	; 0x2f0 <displayFnd+0x88>
			PORTA = 0xFF;
 2ec:	7b bb       	out	0x1b, r23	; 27
 2ee:	09 c0       	rjmp	.+18     	; 0x302 <displayFnd+0x9a>
		else
			PORTA = ~fndPattern[temp[2] - '0'];
 2f0:	12 96       	adiw	r26, 0x02	; 2
 2f2:	ec 91       	ld	r30, X
 2f4:	12 97       	sbiw	r26, 0x02	; 2
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	e0 53       	subi	r30, 0x30	; 48
 2fa:	ff 4f       	sbci	r31, 0xFF	; 255
 2fc:	e0 81       	ld	r30, Z
 2fe:	e0 95       	com	r30
 300:	eb bb       	out	0x1b, r30	; 27
 302:	ef e1       	ldi	r30, 0x1F	; 31
 304:	fe e4       	ldi	r31, 0x4E	; 78
 306:	31 97       	sbiw	r30, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <displayFnd+0x9e>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <displayFnd+0xa4>
 30c:	00 00       	nop
		_delay_ms(5);
		
		PORTC = 0x04; // fnd3
 30e:	45 bb       	out	0x15, r20	; 21
		if(blinkState == 1 && fndNum == 2)
 310:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <blinkState>
 314:	e1 30       	cpi	r30, 0x01	; 1
 316:	31 f4       	brne	.+12     	; 0x324 <displayFnd+0xbc>
 318:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <fndNum>
 31c:	e2 30       	cpi	r30, 0x02	; 2
 31e:	11 f4       	brne	.+4      	; 0x324 <displayFnd+0xbc>
			PORTA = 0xFF;
 320:	7b bb       	out	0x1b, r23	; 27
 322:	09 c0       	rjmp	.+18     	; 0x336 <displayFnd+0xce>
		else
			PORTA = ~fndPattern[temp[1] - '0'];
 324:	11 96       	adiw	r26, 0x01	; 1
 326:	ec 91       	ld	r30, X
 328:	11 97       	sbiw	r26, 0x01	; 1
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	e0 53       	subi	r30, 0x30	; 48
 32e:	ff 4f       	sbci	r31, 0xFF	; 255
 330:	e0 81       	ld	r30, Z
 332:	e0 95       	com	r30
 334:	eb bb       	out	0x1b, r30	; 27
 336:	ef e1       	ldi	r30, 0x1F	; 31
 338:	fe e4       	ldi	r31, 0x4E	; 78
 33a:	31 97       	sbiw	r30, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <displayFnd+0xd2>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <displayFnd+0xd8>
 340:	00 00       	nop
		_delay_ms(5);
		
		PORTC = 0x08; // fnd4
 342:	35 bb       	out	0x15, r19	; 21
		if(blinkState == 1 && fndNum == 3)
 344:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <blinkState>
 348:	e1 30       	cpi	r30, 0x01	; 1
 34a:	31 f4       	brne	.+12     	; 0x358 <displayFnd+0xf0>
 34c:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <fndNum>
 350:	e3 30       	cpi	r30, 0x03	; 3
 352:	11 f4       	brne	.+4      	; 0x358 <displayFnd+0xf0>
			PORTA = 0xFF;
 354:	7b bb       	out	0x1b, r23	; 27
 356:	07 c0       	rjmp	.+14     	; 0x366 <displayFnd+0xfe>
		else
			PORTA = ~fndPattern[temp[0] - '0'];
 358:	ec 91       	ld	r30, X
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	e0 53       	subi	r30, 0x30	; 48
 35e:	ff 4f       	sbci	r31, 0xFF	; 255
 360:	e0 81       	ld	r30, Z
 362:	e0 95       	com	r30
 364:	eb bb       	out	0x1b, r30	; 27
 366:	ef e1       	ldi	r30, 0x1F	; 31
 368:	fe e4       	ldi	r31, 0x4E	; 78
 36a:	31 97       	sbiw	r30, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <displayFnd+0x102>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <displayFnd+0x108>
 370:	00 00       	nop
}
void displayFnd(void)
{
	sprintf(temp, "%04d\0", cnt); // write count value to the temp array, temp stores *char
	
	for (int i = 0; i <= (25 * isBlink); i++) // if blink(isBlink = 1) mode on set-up mode, it blinks by 0.5s
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 378:	2e 9f       	mul	r18, r30
 37a:	f0 01       	movw	r30, r0
 37c:	11 24       	eor	r1, r1
 37e:	e8 17       	cp	r30, r24
 380:	f9 07       	cpc	r31, r25
 382:	0c f0       	brlt	.+2      	; 0x386 <displayFnd+0x11e>
 384:	90 cf       	rjmp	.-224    	; 0x2a6 <displayFnd+0x3e>
			PORTA = 0xFF;
		else
			PORTA = ~fndPattern[temp[0] - '0'];
		_delay_ms(5);
	}
}
 386:	08 95       	ret

00000388 <main>:
int main(void)
{
	INIT();
 388:	5a df       	rcall	.-332    	; 0x23e <INIT>
			cnt++; // increase from 0 to 9999
			if(cnt > 9999) cnt = 0; // count reset
		}

		if (isBlink == 1) // if set-mode
			blinkState = !blinkState; // turn on blink state mode
 38a:	c1 e0       	ldi	r28, 0x01	; 1
{
	INIT();

    while (1) 
    {
		displayFnd();
 38c:	d0 e0       	ldi	r29, 0x00	; 0
 38e:	6c df       	rcall	.-296    	; 0x268 <displayFnd>
		if(isCountUp == 1) // count-up mode
 390:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <isCountUp>
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	91 f4       	brne	.+36     	; 0x3bc <main+0x34>
		{
			cnt++; // increase from 0 to 9999
 398:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cnt>
 39c:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <cnt+0x1>
 3a0:	01 96       	adiw	r24, 0x01	; 1
			if(cnt > 9999) cnt = 0; // count reset
 3a2:	80 31       	cpi	r24, 0x10	; 16
 3a4:	27 e2       	ldi	r18, 0x27	; 39
 3a6:	92 07       	cpc	r25, r18
 3a8:	2c f4       	brge	.+10     	; 0x3b4 <main+0x2c>
    while (1) 
    {
		displayFnd();
		if(isCountUp == 1) // count-up mode
		{
			cnt++; // increase from 0 to 9999
 3aa:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <cnt+0x1>
 3ae:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <cnt>
 3b2:	04 c0       	rjmp	.+8      	; 0x3bc <main+0x34>
			if(cnt > 9999) cnt = 0; // count reset
 3b4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <cnt+0x1>
 3b8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cnt>
		}

		if (isBlink == 1) // if set-mode
 3bc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	29 f7       	brne	.-54     	; 0x38e <main+0x6>
			blinkState = !blinkState; // turn on blink state mode
 3c4:	8c 2f       	mov	r24, r28
 3c6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <blinkState>
 3ca:	91 11       	cpse	r25, r1
 3cc:	8d 2f       	mov	r24, r29
 3ce:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <blinkState>
 3d2:	dd cf       	rjmp	.-70     	; 0x38e <main+0x6>

000003d4 <atoi>:
 3d4:	fc 01       	movw	r30, r24
 3d6:	88 27       	eor	r24, r24
 3d8:	99 27       	eor	r25, r25
 3da:	e8 94       	clt
 3dc:	21 91       	ld	r18, Z+
 3de:	20 32       	cpi	r18, 0x20	; 32
 3e0:	e9 f3       	breq	.-6      	; 0x3dc <atoi+0x8>
 3e2:	29 30       	cpi	r18, 0x09	; 9
 3e4:	10 f0       	brcs	.+4      	; 0x3ea <atoi+0x16>
 3e6:	2e 30       	cpi	r18, 0x0E	; 14
 3e8:	c8 f3       	brcs	.-14     	; 0x3dc <atoi+0x8>
 3ea:	2b 32       	cpi	r18, 0x2B	; 43
 3ec:	39 f0       	breq	.+14     	; 0x3fc <atoi+0x28>
 3ee:	2d 32       	cpi	r18, 0x2D	; 45
 3f0:	31 f4       	brne	.+12     	; 0x3fe <atoi+0x2a>
 3f2:	68 94       	set
 3f4:	03 c0       	rjmp	.+6      	; 0x3fc <atoi+0x28>
 3f6:	0b d0       	rcall	.+22     	; 0x40e <__mulhi_const_10>
 3f8:	82 0f       	add	r24, r18
 3fa:	91 1d       	adc	r25, r1
 3fc:	21 91       	ld	r18, Z+
 3fe:	20 53       	subi	r18, 0x30	; 48
 400:	2a 30       	cpi	r18, 0x0A	; 10
 402:	c8 f3       	brcs	.-14     	; 0x3f6 <atoi+0x22>
 404:	1e f4       	brtc	.+6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 406:	90 95       	com	r25
 408:	81 95       	neg	r24
 40a:	9f 4f       	sbci	r25, 0xFF	; 255
 40c:	08 95       	ret

0000040e <__mulhi_const_10>:
 40e:	7a e0       	ldi	r23, 0x0A	; 10
 410:	97 9f       	mul	r25, r23
 412:	90 2d       	mov	r25, r0
 414:	87 9f       	mul	r24, r23
 416:	80 2d       	mov	r24, r0
 418:	91 0d       	add	r25, r1
 41a:	11 24       	eor	r1, r1
 41c:	08 95       	ret

0000041e <sprintf>:
 41e:	0f 93       	push	r16
 420:	1f 93       	push	r17
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
 42a:	2e 97       	sbiw	r28, 0x0e	; 14
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	f8 94       	cli
 430:	de bf       	out	0x3e, r29	; 62
 432:	0f be       	out	0x3f, r0	; 63
 434:	cd bf       	out	0x3d, r28	; 61
 436:	0d 89       	ldd	r16, Y+21	; 0x15
 438:	1e 89       	ldd	r17, Y+22	; 0x16
 43a:	86 e0       	ldi	r24, 0x06	; 6
 43c:	8c 83       	std	Y+4, r24	; 0x04
 43e:	1a 83       	std	Y+2, r17	; 0x02
 440:	09 83       	std	Y+1, r16	; 0x01
 442:	8f ef       	ldi	r24, 0xFF	; 255
 444:	9f e7       	ldi	r25, 0x7F	; 127
 446:	9e 83       	std	Y+6, r25	; 0x06
 448:	8d 83       	std	Y+5, r24	; 0x05
 44a:	ae 01       	movw	r20, r28
 44c:	47 5e       	subi	r20, 0xE7	; 231
 44e:	5f 4f       	sbci	r21, 0xFF	; 255
 450:	6f 89       	ldd	r22, Y+23	; 0x17
 452:	78 8d       	ldd	r23, Y+24	; 0x18
 454:	ce 01       	movw	r24, r28
 456:	01 96       	adiw	r24, 0x01	; 1
 458:	10 d0       	rcall	.+32     	; 0x47a <vfprintf>
 45a:	ef 81       	ldd	r30, Y+7	; 0x07
 45c:	f8 85       	ldd	r31, Y+8	; 0x08
 45e:	e0 0f       	add	r30, r16
 460:	f1 1f       	adc	r31, r17
 462:	10 82       	st	Z, r1
 464:	2e 96       	adiw	r28, 0x0e	; 14
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	f8 94       	cli
 46a:	de bf       	out	0x3e, r29	; 62
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	cd bf       	out	0x3d, r28	; 61
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	1f 91       	pop	r17
 476:	0f 91       	pop	r16
 478:	08 95       	ret

0000047a <vfprintf>:
 47a:	2f 92       	push	r2
 47c:	3f 92       	push	r3
 47e:	4f 92       	push	r4
 480:	5f 92       	push	r5
 482:	6f 92       	push	r6
 484:	7f 92       	push	r7
 486:	8f 92       	push	r8
 488:	9f 92       	push	r9
 48a:	af 92       	push	r10
 48c:	bf 92       	push	r11
 48e:	cf 92       	push	r12
 490:	df 92       	push	r13
 492:	ef 92       	push	r14
 494:	ff 92       	push	r15
 496:	0f 93       	push	r16
 498:	1f 93       	push	r17
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	cd b7       	in	r28, 0x3d	; 61
 4a0:	de b7       	in	r29, 0x3e	; 62
 4a2:	2b 97       	sbiw	r28, 0x0b	; 11
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	f8 94       	cli
 4a8:	de bf       	out	0x3e, r29	; 62
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	cd bf       	out	0x3d, r28	; 61
 4ae:	6c 01       	movw	r12, r24
 4b0:	7b 01       	movw	r14, r22
 4b2:	8a 01       	movw	r16, r20
 4b4:	fc 01       	movw	r30, r24
 4b6:	17 82       	std	Z+7, r1	; 0x07
 4b8:	16 82       	std	Z+6, r1	; 0x06
 4ba:	83 81       	ldd	r24, Z+3	; 0x03
 4bc:	81 ff       	sbrs	r24, 1
 4be:	bf c1       	rjmp	.+894    	; 0x83e <vfprintf+0x3c4>
 4c0:	ce 01       	movw	r24, r28
 4c2:	01 96       	adiw	r24, 0x01	; 1
 4c4:	3c 01       	movw	r6, r24
 4c6:	f6 01       	movw	r30, r12
 4c8:	93 81       	ldd	r25, Z+3	; 0x03
 4ca:	f7 01       	movw	r30, r14
 4cc:	93 fd       	sbrc	r25, 3
 4ce:	85 91       	lpm	r24, Z+
 4d0:	93 ff       	sbrs	r25, 3
 4d2:	81 91       	ld	r24, Z+
 4d4:	7f 01       	movw	r14, r30
 4d6:	88 23       	and	r24, r24
 4d8:	09 f4       	brne	.+2      	; 0x4dc <vfprintf+0x62>
 4da:	ad c1       	rjmp	.+858    	; 0x836 <vfprintf+0x3bc>
 4dc:	85 32       	cpi	r24, 0x25	; 37
 4de:	39 f4       	brne	.+14     	; 0x4ee <vfprintf+0x74>
 4e0:	93 fd       	sbrc	r25, 3
 4e2:	85 91       	lpm	r24, Z+
 4e4:	93 ff       	sbrs	r25, 3
 4e6:	81 91       	ld	r24, Z+
 4e8:	7f 01       	movw	r14, r30
 4ea:	85 32       	cpi	r24, 0x25	; 37
 4ec:	21 f4       	brne	.+8      	; 0x4f6 <vfprintf+0x7c>
 4ee:	b6 01       	movw	r22, r12
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	d6 d1       	rcall	.+940    	; 0x8a0 <fputc>
 4f4:	e8 cf       	rjmp	.-48     	; 0x4c6 <vfprintf+0x4c>
 4f6:	91 2c       	mov	r9, r1
 4f8:	21 2c       	mov	r2, r1
 4fa:	31 2c       	mov	r3, r1
 4fc:	ff e1       	ldi	r31, 0x1F	; 31
 4fe:	f3 15       	cp	r31, r3
 500:	d8 f0       	brcs	.+54     	; 0x538 <vfprintf+0xbe>
 502:	8b 32       	cpi	r24, 0x2B	; 43
 504:	79 f0       	breq	.+30     	; 0x524 <vfprintf+0xaa>
 506:	38 f4       	brcc	.+14     	; 0x516 <vfprintf+0x9c>
 508:	80 32       	cpi	r24, 0x20	; 32
 50a:	79 f0       	breq	.+30     	; 0x52a <vfprintf+0xb0>
 50c:	83 32       	cpi	r24, 0x23	; 35
 50e:	a1 f4       	brne	.+40     	; 0x538 <vfprintf+0xbe>
 510:	23 2d       	mov	r18, r3
 512:	20 61       	ori	r18, 0x10	; 16
 514:	1d c0       	rjmp	.+58     	; 0x550 <vfprintf+0xd6>
 516:	8d 32       	cpi	r24, 0x2D	; 45
 518:	61 f0       	breq	.+24     	; 0x532 <vfprintf+0xb8>
 51a:	80 33       	cpi	r24, 0x30	; 48
 51c:	69 f4       	brne	.+26     	; 0x538 <vfprintf+0xbe>
 51e:	23 2d       	mov	r18, r3
 520:	21 60       	ori	r18, 0x01	; 1
 522:	16 c0       	rjmp	.+44     	; 0x550 <vfprintf+0xd6>
 524:	83 2d       	mov	r24, r3
 526:	82 60       	ori	r24, 0x02	; 2
 528:	38 2e       	mov	r3, r24
 52a:	e3 2d       	mov	r30, r3
 52c:	e4 60       	ori	r30, 0x04	; 4
 52e:	3e 2e       	mov	r3, r30
 530:	2a c0       	rjmp	.+84     	; 0x586 <vfprintf+0x10c>
 532:	f3 2d       	mov	r31, r3
 534:	f8 60       	ori	r31, 0x08	; 8
 536:	1d c0       	rjmp	.+58     	; 0x572 <vfprintf+0xf8>
 538:	37 fc       	sbrc	r3, 7
 53a:	2d c0       	rjmp	.+90     	; 0x596 <vfprintf+0x11c>
 53c:	20 ed       	ldi	r18, 0xD0	; 208
 53e:	28 0f       	add	r18, r24
 540:	2a 30       	cpi	r18, 0x0A	; 10
 542:	40 f0       	brcs	.+16     	; 0x554 <vfprintf+0xda>
 544:	8e 32       	cpi	r24, 0x2E	; 46
 546:	b9 f4       	brne	.+46     	; 0x576 <vfprintf+0xfc>
 548:	36 fc       	sbrc	r3, 6
 54a:	75 c1       	rjmp	.+746    	; 0x836 <vfprintf+0x3bc>
 54c:	23 2d       	mov	r18, r3
 54e:	20 64       	ori	r18, 0x40	; 64
 550:	32 2e       	mov	r3, r18
 552:	19 c0       	rjmp	.+50     	; 0x586 <vfprintf+0x10c>
 554:	36 fe       	sbrs	r3, 6
 556:	06 c0       	rjmp	.+12     	; 0x564 <vfprintf+0xea>
 558:	8a e0       	ldi	r24, 0x0A	; 10
 55a:	98 9e       	mul	r9, r24
 55c:	20 0d       	add	r18, r0
 55e:	11 24       	eor	r1, r1
 560:	92 2e       	mov	r9, r18
 562:	11 c0       	rjmp	.+34     	; 0x586 <vfprintf+0x10c>
 564:	ea e0       	ldi	r30, 0x0A	; 10
 566:	2e 9e       	mul	r2, r30
 568:	20 0d       	add	r18, r0
 56a:	11 24       	eor	r1, r1
 56c:	22 2e       	mov	r2, r18
 56e:	f3 2d       	mov	r31, r3
 570:	f0 62       	ori	r31, 0x20	; 32
 572:	3f 2e       	mov	r3, r31
 574:	08 c0       	rjmp	.+16     	; 0x586 <vfprintf+0x10c>
 576:	8c 36       	cpi	r24, 0x6C	; 108
 578:	21 f4       	brne	.+8      	; 0x582 <vfprintf+0x108>
 57a:	83 2d       	mov	r24, r3
 57c:	80 68       	ori	r24, 0x80	; 128
 57e:	38 2e       	mov	r3, r24
 580:	02 c0       	rjmp	.+4      	; 0x586 <vfprintf+0x10c>
 582:	88 36       	cpi	r24, 0x68	; 104
 584:	41 f4       	brne	.+16     	; 0x596 <vfprintf+0x11c>
 586:	f7 01       	movw	r30, r14
 588:	93 fd       	sbrc	r25, 3
 58a:	85 91       	lpm	r24, Z+
 58c:	93 ff       	sbrs	r25, 3
 58e:	81 91       	ld	r24, Z+
 590:	7f 01       	movw	r14, r30
 592:	81 11       	cpse	r24, r1
 594:	b3 cf       	rjmp	.-154    	; 0x4fc <vfprintf+0x82>
 596:	98 2f       	mov	r25, r24
 598:	9f 7d       	andi	r25, 0xDF	; 223
 59a:	95 54       	subi	r25, 0x45	; 69
 59c:	93 30       	cpi	r25, 0x03	; 3
 59e:	28 f4       	brcc	.+10     	; 0x5aa <vfprintf+0x130>
 5a0:	0c 5f       	subi	r16, 0xFC	; 252
 5a2:	1f 4f       	sbci	r17, 0xFF	; 255
 5a4:	9f e3       	ldi	r25, 0x3F	; 63
 5a6:	99 83       	std	Y+1, r25	; 0x01
 5a8:	0d c0       	rjmp	.+26     	; 0x5c4 <vfprintf+0x14a>
 5aa:	83 36       	cpi	r24, 0x63	; 99
 5ac:	31 f0       	breq	.+12     	; 0x5ba <vfprintf+0x140>
 5ae:	83 37       	cpi	r24, 0x73	; 115
 5b0:	71 f0       	breq	.+28     	; 0x5ce <vfprintf+0x154>
 5b2:	83 35       	cpi	r24, 0x53	; 83
 5b4:	09 f0       	breq	.+2      	; 0x5b8 <vfprintf+0x13e>
 5b6:	55 c0       	rjmp	.+170    	; 0x662 <vfprintf+0x1e8>
 5b8:	20 c0       	rjmp	.+64     	; 0x5fa <vfprintf+0x180>
 5ba:	f8 01       	movw	r30, r16
 5bc:	80 81       	ld	r24, Z
 5be:	89 83       	std	Y+1, r24	; 0x01
 5c0:	0e 5f       	subi	r16, 0xFE	; 254
 5c2:	1f 4f       	sbci	r17, 0xFF	; 255
 5c4:	88 24       	eor	r8, r8
 5c6:	83 94       	inc	r8
 5c8:	91 2c       	mov	r9, r1
 5ca:	53 01       	movw	r10, r6
 5cc:	12 c0       	rjmp	.+36     	; 0x5f2 <vfprintf+0x178>
 5ce:	28 01       	movw	r4, r16
 5d0:	f2 e0       	ldi	r31, 0x02	; 2
 5d2:	4f 0e       	add	r4, r31
 5d4:	51 1c       	adc	r5, r1
 5d6:	f8 01       	movw	r30, r16
 5d8:	a0 80       	ld	r10, Z
 5da:	b1 80       	ldd	r11, Z+1	; 0x01
 5dc:	36 fe       	sbrs	r3, 6
 5de:	03 c0       	rjmp	.+6      	; 0x5e6 <vfprintf+0x16c>
 5e0:	69 2d       	mov	r22, r9
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <vfprintf+0x170>
 5e6:	6f ef       	ldi	r22, 0xFF	; 255
 5e8:	7f ef       	ldi	r23, 0xFF	; 255
 5ea:	c5 01       	movw	r24, r10
 5ec:	4e d1       	rcall	.+668    	; 0x88a <strnlen>
 5ee:	4c 01       	movw	r8, r24
 5f0:	82 01       	movw	r16, r4
 5f2:	f3 2d       	mov	r31, r3
 5f4:	ff 77       	andi	r31, 0x7F	; 127
 5f6:	3f 2e       	mov	r3, r31
 5f8:	15 c0       	rjmp	.+42     	; 0x624 <vfprintf+0x1aa>
 5fa:	28 01       	movw	r4, r16
 5fc:	22 e0       	ldi	r18, 0x02	; 2
 5fe:	42 0e       	add	r4, r18
 600:	51 1c       	adc	r5, r1
 602:	f8 01       	movw	r30, r16
 604:	a0 80       	ld	r10, Z
 606:	b1 80       	ldd	r11, Z+1	; 0x01
 608:	36 fe       	sbrs	r3, 6
 60a:	03 c0       	rjmp	.+6      	; 0x612 <vfprintf+0x198>
 60c:	69 2d       	mov	r22, r9
 60e:	70 e0       	ldi	r23, 0x00	; 0
 610:	02 c0       	rjmp	.+4      	; 0x616 <vfprintf+0x19c>
 612:	6f ef       	ldi	r22, 0xFF	; 255
 614:	7f ef       	ldi	r23, 0xFF	; 255
 616:	c5 01       	movw	r24, r10
 618:	2d d1       	rcall	.+602    	; 0x874 <strnlen_P>
 61a:	4c 01       	movw	r8, r24
 61c:	f3 2d       	mov	r31, r3
 61e:	f0 68       	ori	r31, 0x80	; 128
 620:	3f 2e       	mov	r3, r31
 622:	82 01       	movw	r16, r4
 624:	33 fc       	sbrc	r3, 3
 626:	19 c0       	rjmp	.+50     	; 0x65a <vfprintf+0x1e0>
 628:	82 2d       	mov	r24, r2
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	88 16       	cp	r8, r24
 62e:	99 06       	cpc	r9, r25
 630:	a0 f4       	brcc	.+40     	; 0x65a <vfprintf+0x1e0>
 632:	b6 01       	movw	r22, r12
 634:	80 e2       	ldi	r24, 0x20	; 32
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	33 d1       	rcall	.+614    	; 0x8a0 <fputc>
 63a:	2a 94       	dec	r2
 63c:	f5 cf       	rjmp	.-22     	; 0x628 <vfprintf+0x1ae>
 63e:	f5 01       	movw	r30, r10
 640:	37 fc       	sbrc	r3, 7
 642:	85 91       	lpm	r24, Z+
 644:	37 fe       	sbrs	r3, 7
 646:	81 91       	ld	r24, Z+
 648:	5f 01       	movw	r10, r30
 64a:	b6 01       	movw	r22, r12
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	28 d1       	rcall	.+592    	; 0x8a0 <fputc>
 650:	21 10       	cpse	r2, r1
 652:	2a 94       	dec	r2
 654:	21 e0       	ldi	r18, 0x01	; 1
 656:	82 1a       	sub	r8, r18
 658:	91 08       	sbc	r9, r1
 65a:	81 14       	cp	r8, r1
 65c:	91 04       	cpc	r9, r1
 65e:	79 f7       	brne	.-34     	; 0x63e <vfprintf+0x1c4>
 660:	e1 c0       	rjmp	.+450    	; 0x824 <vfprintf+0x3aa>
 662:	84 36       	cpi	r24, 0x64	; 100
 664:	11 f0       	breq	.+4      	; 0x66a <vfprintf+0x1f0>
 666:	89 36       	cpi	r24, 0x69	; 105
 668:	39 f5       	brne	.+78     	; 0x6b8 <vfprintf+0x23e>
 66a:	f8 01       	movw	r30, r16
 66c:	37 fe       	sbrs	r3, 7
 66e:	07 c0       	rjmp	.+14     	; 0x67e <vfprintf+0x204>
 670:	60 81       	ld	r22, Z
 672:	71 81       	ldd	r23, Z+1	; 0x01
 674:	82 81       	ldd	r24, Z+2	; 0x02
 676:	93 81       	ldd	r25, Z+3	; 0x03
 678:	0c 5f       	subi	r16, 0xFC	; 252
 67a:	1f 4f       	sbci	r17, 0xFF	; 255
 67c:	08 c0       	rjmp	.+16     	; 0x68e <vfprintf+0x214>
 67e:	60 81       	ld	r22, Z
 680:	71 81       	ldd	r23, Z+1	; 0x01
 682:	07 2e       	mov	r0, r23
 684:	00 0c       	add	r0, r0
 686:	88 0b       	sbc	r24, r24
 688:	99 0b       	sbc	r25, r25
 68a:	0e 5f       	subi	r16, 0xFE	; 254
 68c:	1f 4f       	sbci	r17, 0xFF	; 255
 68e:	f3 2d       	mov	r31, r3
 690:	ff 76       	andi	r31, 0x6F	; 111
 692:	3f 2e       	mov	r3, r31
 694:	97 ff       	sbrs	r25, 7
 696:	09 c0       	rjmp	.+18     	; 0x6aa <vfprintf+0x230>
 698:	90 95       	com	r25
 69a:	80 95       	com	r24
 69c:	70 95       	com	r23
 69e:	61 95       	neg	r22
 6a0:	7f 4f       	sbci	r23, 0xFF	; 255
 6a2:	8f 4f       	sbci	r24, 0xFF	; 255
 6a4:	9f 4f       	sbci	r25, 0xFF	; 255
 6a6:	f0 68       	ori	r31, 0x80	; 128
 6a8:	3f 2e       	mov	r3, r31
 6aa:	2a e0       	ldi	r18, 0x0A	; 10
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	a3 01       	movw	r20, r6
 6b0:	33 d1       	rcall	.+614    	; 0x918 <__ultoa_invert>
 6b2:	88 2e       	mov	r8, r24
 6b4:	86 18       	sub	r8, r6
 6b6:	44 c0       	rjmp	.+136    	; 0x740 <vfprintf+0x2c6>
 6b8:	85 37       	cpi	r24, 0x75	; 117
 6ba:	31 f4       	brne	.+12     	; 0x6c8 <vfprintf+0x24e>
 6bc:	23 2d       	mov	r18, r3
 6be:	2f 7e       	andi	r18, 0xEF	; 239
 6c0:	b2 2e       	mov	r11, r18
 6c2:	2a e0       	ldi	r18, 0x0A	; 10
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	25 c0       	rjmp	.+74     	; 0x712 <vfprintf+0x298>
 6c8:	93 2d       	mov	r25, r3
 6ca:	99 7f       	andi	r25, 0xF9	; 249
 6cc:	b9 2e       	mov	r11, r25
 6ce:	8f 36       	cpi	r24, 0x6F	; 111
 6d0:	c1 f0       	breq	.+48     	; 0x702 <vfprintf+0x288>
 6d2:	18 f4       	brcc	.+6      	; 0x6da <vfprintf+0x260>
 6d4:	88 35       	cpi	r24, 0x58	; 88
 6d6:	79 f0       	breq	.+30     	; 0x6f6 <vfprintf+0x27c>
 6d8:	ae c0       	rjmp	.+348    	; 0x836 <vfprintf+0x3bc>
 6da:	80 37       	cpi	r24, 0x70	; 112
 6dc:	19 f0       	breq	.+6      	; 0x6e4 <vfprintf+0x26a>
 6de:	88 37       	cpi	r24, 0x78	; 120
 6e0:	21 f0       	breq	.+8      	; 0x6ea <vfprintf+0x270>
 6e2:	a9 c0       	rjmp	.+338    	; 0x836 <vfprintf+0x3bc>
 6e4:	e9 2f       	mov	r30, r25
 6e6:	e0 61       	ori	r30, 0x10	; 16
 6e8:	be 2e       	mov	r11, r30
 6ea:	b4 fe       	sbrs	r11, 4
 6ec:	0d c0       	rjmp	.+26     	; 0x708 <vfprintf+0x28e>
 6ee:	fb 2d       	mov	r31, r11
 6f0:	f4 60       	ori	r31, 0x04	; 4
 6f2:	bf 2e       	mov	r11, r31
 6f4:	09 c0       	rjmp	.+18     	; 0x708 <vfprintf+0x28e>
 6f6:	34 fe       	sbrs	r3, 4
 6f8:	0a c0       	rjmp	.+20     	; 0x70e <vfprintf+0x294>
 6fa:	29 2f       	mov	r18, r25
 6fc:	26 60       	ori	r18, 0x06	; 6
 6fe:	b2 2e       	mov	r11, r18
 700:	06 c0       	rjmp	.+12     	; 0x70e <vfprintf+0x294>
 702:	28 e0       	ldi	r18, 0x08	; 8
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	05 c0       	rjmp	.+10     	; 0x712 <vfprintf+0x298>
 708:	20 e1       	ldi	r18, 0x10	; 16
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	02 c0       	rjmp	.+4      	; 0x712 <vfprintf+0x298>
 70e:	20 e1       	ldi	r18, 0x10	; 16
 710:	32 e0       	ldi	r19, 0x02	; 2
 712:	f8 01       	movw	r30, r16
 714:	b7 fe       	sbrs	r11, 7
 716:	07 c0       	rjmp	.+14     	; 0x726 <vfprintf+0x2ac>
 718:	60 81       	ld	r22, Z
 71a:	71 81       	ldd	r23, Z+1	; 0x01
 71c:	82 81       	ldd	r24, Z+2	; 0x02
 71e:	93 81       	ldd	r25, Z+3	; 0x03
 720:	0c 5f       	subi	r16, 0xFC	; 252
 722:	1f 4f       	sbci	r17, 0xFF	; 255
 724:	06 c0       	rjmp	.+12     	; 0x732 <vfprintf+0x2b8>
 726:	60 81       	ld	r22, Z
 728:	71 81       	ldd	r23, Z+1	; 0x01
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	0e 5f       	subi	r16, 0xFE	; 254
 730:	1f 4f       	sbci	r17, 0xFF	; 255
 732:	a3 01       	movw	r20, r6
 734:	f1 d0       	rcall	.+482    	; 0x918 <__ultoa_invert>
 736:	88 2e       	mov	r8, r24
 738:	86 18       	sub	r8, r6
 73a:	fb 2d       	mov	r31, r11
 73c:	ff 77       	andi	r31, 0x7F	; 127
 73e:	3f 2e       	mov	r3, r31
 740:	36 fe       	sbrs	r3, 6
 742:	0d c0       	rjmp	.+26     	; 0x75e <vfprintf+0x2e4>
 744:	23 2d       	mov	r18, r3
 746:	2e 7f       	andi	r18, 0xFE	; 254
 748:	a2 2e       	mov	r10, r18
 74a:	89 14       	cp	r8, r9
 74c:	58 f4       	brcc	.+22     	; 0x764 <vfprintf+0x2ea>
 74e:	34 fe       	sbrs	r3, 4
 750:	0b c0       	rjmp	.+22     	; 0x768 <vfprintf+0x2ee>
 752:	32 fc       	sbrc	r3, 2
 754:	09 c0       	rjmp	.+18     	; 0x768 <vfprintf+0x2ee>
 756:	83 2d       	mov	r24, r3
 758:	8e 7e       	andi	r24, 0xEE	; 238
 75a:	a8 2e       	mov	r10, r24
 75c:	05 c0       	rjmp	.+10     	; 0x768 <vfprintf+0x2ee>
 75e:	b8 2c       	mov	r11, r8
 760:	a3 2c       	mov	r10, r3
 762:	03 c0       	rjmp	.+6      	; 0x76a <vfprintf+0x2f0>
 764:	b8 2c       	mov	r11, r8
 766:	01 c0       	rjmp	.+2      	; 0x76a <vfprintf+0x2f0>
 768:	b9 2c       	mov	r11, r9
 76a:	a4 fe       	sbrs	r10, 4
 76c:	0f c0       	rjmp	.+30     	; 0x78c <vfprintf+0x312>
 76e:	fe 01       	movw	r30, r28
 770:	e8 0d       	add	r30, r8
 772:	f1 1d       	adc	r31, r1
 774:	80 81       	ld	r24, Z
 776:	80 33       	cpi	r24, 0x30	; 48
 778:	21 f4       	brne	.+8      	; 0x782 <vfprintf+0x308>
 77a:	9a 2d       	mov	r25, r10
 77c:	99 7e       	andi	r25, 0xE9	; 233
 77e:	a9 2e       	mov	r10, r25
 780:	09 c0       	rjmp	.+18     	; 0x794 <vfprintf+0x31a>
 782:	a2 fe       	sbrs	r10, 2
 784:	06 c0       	rjmp	.+12     	; 0x792 <vfprintf+0x318>
 786:	b3 94       	inc	r11
 788:	b3 94       	inc	r11
 78a:	04 c0       	rjmp	.+8      	; 0x794 <vfprintf+0x31a>
 78c:	8a 2d       	mov	r24, r10
 78e:	86 78       	andi	r24, 0x86	; 134
 790:	09 f0       	breq	.+2      	; 0x794 <vfprintf+0x31a>
 792:	b3 94       	inc	r11
 794:	a3 fc       	sbrc	r10, 3
 796:	10 c0       	rjmp	.+32     	; 0x7b8 <vfprintf+0x33e>
 798:	a0 fe       	sbrs	r10, 0
 79a:	06 c0       	rjmp	.+12     	; 0x7a8 <vfprintf+0x32e>
 79c:	b2 14       	cp	r11, r2
 79e:	80 f4       	brcc	.+32     	; 0x7c0 <vfprintf+0x346>
 7a0:	28 0c       	add	r2, r8
 7a2:	92 2c       	mov	r9, r2
 7a4:	9b 18       	sub	r9, r11
 7a6:	0d c0       	rjmp	.+26     	; 0x7c2 <vfprintf+0x348>
 7a8:	b2 14       	cp	r11, r2
 7aa:	58 f4       	brcc	.+22     	; 0x7c2 <vfprintf+0x348>
 7ac:	b6 01       	movw	r22, r12
 7ae:	80 e2       	ldi	r24, 0x20	; 32
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	76 d0       	rcall	.+236    	; 0x8a0 <fputc>
 7b4:	b3 94       	inc	r11
 7b6:	f8 cf       	rjmp	.-16     	; 0x7a8 <vfprintf+0x32e>
 7b8:	b2 14       	cp	r11, r2
 7ba:	18 f4       	brcc	.+6      	; 0x7c2 <vfprintf+0x348>
 7bc:	2b 18       	sub	r2, r11
 7be:	02 c0       	rjmp	.+4      	; 0x7c4 <vfprintf+0x34a>
 7c0:	98 2c       	mov	r9, r8
 7c2:	21 2c       	mov	r2, r1
 7c4:	a4 fe       	sbrs	r10, 4
 7c6:	0f c0       	rjmp	.+30     	; 0x7e6 <vfprintf+0x36c>
 7c8:	b6 01       	movw	r22, r12
 7ca:	80 e3       	ldi	r24, 0x30	; 48
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	68 d0       	rcall	.+208    	; 0x8a0 <fputc>
 7d0:	a2 fe       	sbrs	r10, 2
 7d2:	16 c0       	rjmp	.+44     	; 0x800 <vfprintf+0x386>
 7d4:	a1 fc       	sbrc	r10, 1
 7d6:	03 c0       	rjmp	.+6      	; 0x7de <vfprintf+0x364>
 7d8:	88 e7       	ldi	r24, 0x78	; 120
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <vfprintf+0x368>
 7de:	88 e5       	ldi	r24, 0x58	; 88
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	b6 01       	movw	r22, r12
 7e4:	0c c0       	rjmp	.+24     	; 0x7fe <vfprintf+0x384>
 7e6:	8a 2d       	mov	r24, r10
 7e8:	86 78       	andi	r24, 0x86	; 134
 7ea:	51 f0       	breq	.+20     	; 0x800 <vfprintf+0x386>
 7ec:	a1 fe       	sbrs	r10, 1
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <vfprintf+0x37a>
 7f0:	8b e2       	ldi	r24, 0x2B	; 43
 7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <vfprintf+0x37c>
 7f4:	80 e2       	ldi	r24, 0x20	; 32
 7f6:	a7 fc       	sbrc	r10, 7
 7f8:	8d e2       	ldi	r24, 0x2D	; 45
 7fa:	b6 01       	movw	r22, r12
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	50 d0       	rcall	.+160    	; 0x8a0 <fputc>
 800:	89 14       	cp	r8, r9
 802:	30 f4       	brcc	.+12     	; 0x810 <vfprintf+0x396>
 804:	b6 01       	movw	r22, r12
 806:	80 e3       	ldi	r24, 0x30	; 48
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	4a d0       	rcall	.+148    	; 0x8a0 <fputc>
 80c:	9a 94       	dec	r9
 80e:	f8 cf       	rjmp	.-16     	; 0x800 <vfprintf+0x386>
 810:	8a 94       	dec	r8
 812:	f3 01       	movw	r30, r6
 814:	e8 0d       	add	r30, r8
 816:	f1 1d       	adc	r31, r1
 818:	80 81       	ld	r24, Z
 81a:	b6 01       	movw	r22, r12
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	40 d0       	rcall	.+128    	; 0x8a0 <fputc>
 820:	81 10       	cpse	r8, r1
 822:	f6 cf       	rjmp	.-20     	; 0x810 <vfprintf+0x396>
 824:	22 20       	and	r2, r2
 826:	09 f4       	brne	.+2      	; 0x82a <vfprintf+0x3b0>
 828:	4e ce       	rjmp	.-868    	; 0x4c6 <vfprintf+0x4c>
 82a:	b6 01       	movw	r22, r12
 82c:	80 e2       	ldi	r24, 0x20	; 32
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	37 d0       	rcall	.+110    	; 0x8a0 <fputc>
 832:	2a 94       	dec	r2
 834:	f7 cf       	rjmp	.-18     	; 0x824 <vfprintf+0x3aa>
 836:	f6 01       	movw	r30, r12
 838:	86 81       	ldd	r24, Z+6	; 0x06
 83a:	97 81       	ldd	r25, Z+7	; 0x07
 83c:	02 c0       	rjmp	.+4      	; 0x842 <vfprintf+0x3c8>
 83e:	8f ef       	ldi	r24, 0xFF	; 255
 840:	9f ef       	ldi	r25, 0xFF	; 255
 842:	2b 96       	adiw	r28, 0x0b	; 11
 844:	0f b6       	in	r0, 0x3f	; 63
 846:	f8 94       	cli
 848:	de bf       	out	0x3e, r29	; 62
 84a:	0f be       	out	0x3f, r0	; 63
 84c:	cd bf       	out	0x3d, r28	; 61
 84e:	df 91       	pop	r29
 850:	cf 91       	pop	r28
 852:	1f 91       	pop	r17
 854:	0f 91       	pop	r16
 856:	ff 90       	pop	r15
 858:	ef 90       	pop	r14
 85a:	df 90       	pop	r13
 85c:	cf 90       	pop	r12
 85e:	bf 90       	pop	r11
 860:	af 90       	pop	r10
 862:	9f 90       	pop	r9
 864:	8f 90       	pop	r8
 866:	7f 90       	pop	r7
 868:	6f 90       	pop	r6
 86a:	5f 90       	pop	r5
 86c:	4f 90       	pop	r4
 86e:	3f 90       	pop	r3
 870:	2f 90       	pop	r2
 872:	08 95       	ret

00000874 <strnlen_P>:
 874:	fc 01       	movw	r30, r24
 876:	05 90       	lpm	r0, Z+
 878:	61 50       	subi	r22, 0x01	; 1
 87a:	70 40       	sbci	r23, 0x00	; 0
 87c:	01 10       	cpse	r0, r1
 87e:	d8 f7       	brcc	.-10     	; 0x876 <strnlen_P+0x2>
 880:	80 95       	com	r24
 882:	90 95       	com	r25
 884:	8e 0f       	add	r24, r30
 886:	9f 1f       	adc	r25, r31
 888:	08 95       	ret

0000088a <strnlen>:
 88a:	fc 01       	movw	r30, r24
 88c:	61 50       	subi	r22, 0x01	; 1
 88e:	70 40       	sbci	r23, 0x00	; 0
 890:	01 90       	ld	r0, Z+
 892:	01 10       	cpse	r0, r1
 894:	d8 f7       	brcc	.-10     	; 0x88c <strnlen+0x2>
 896:	80 95       	com	r24
 898:	90 95       	com	r25
 89a:	8e 0f       	add	r24, r30
 89c:	9f 1f       	adc	r25, r31
 89e:	08 95       	ret

000008a0 <fputc>:
 8a0:	0f 93       	push	r16
 8a2:	1f 93       	push	r17
 8a4:	cf 93       	push	r28
 8a6:	df 93       	push	r29
 8a8:	fb 01       	movw	r30, r22
 8aa:	23 81       	ldd	r18, Z+3	; 0x03
 8ac:	21 fd       	sbrc	r18, 1
 8ae:	03 c0       	rjmp	.+6      	; 0x8b6 <fputc+0x16>
 8b0:	8f ef       	ldi	r24, 0xFF	; 255
 8b2:	9f ef       	ldi	r25, 0xFF	; 255
 8b4:	2c c0       	rjmp	.+88     	; 0x90e <fputc+0x6e>
 8b6:	22 ff       	sbrs	r18, 2
 8b8:	16 c0       	rjmp	.+44     	; 0x8e6 <fputc+0x46>
 8ba:	46 81       	ldd	r20, Z+6	; 0x06
 8bc:	57 81       	ldd	r21, Z+7	; 0x07
 8be:	24 81       	ldd	r18, Z+4	; 0x04
 8c0:	35 81       	ldd	r19, Z+5	; 0x05
 8c2:	42 17       	cp	r20, r18
 8c4:	53 07       	cpc	r21, r19
 8c6:	44 f4       	brge	.+16     	; 0x8d8 <fputc+0x38>
 8c8:	a0 81       	ld	r26, Z
 8ca:	b1 81       	ldd	r27, Z+1	; 0x01
 8cc:	9d 01       	movw	r18, r26
 8ce:	2f 5f       	subi	r18, 0xFF	; 255
 8d0:	3f 4f       	sbci	r19, 0xFF	; 255
 8d2:	31 83       	std	Z+1, r19	; 0x01
 8d4:	20 83       	st	Z, r18
 8d6:	8c 93       	st	X, r24
 8d8:	26 81       	ldd	r18, Z+6	; 0x06
 8da:	37 81       	ldd	r19, Z+7	; 0x07
 8dc:	2f 5f       	subi	r18, 0xFF	; 255
 8de:	3f 4f       	sbci	r19, 0xFF	; 255
 8e0:	37 83       	std	Z+7, r19	; 0x07
 8e2:	26 83       	std	Z+6, r18	; 0x06
 8e4:	14 c0       	rjmp	.+40     	; 0x90e <fputc+0x6e>
 8e6:	8b 01       	movw	r16, r22
 8e8:	ec 01       	movw	r28, r24
 8ea:	fb 01       	movw	r30, r22
 8ec:	00 84       	ldd	r0, Z+8	; 0x08
 8ee:	f1 85       	ldd	r31, Z+9	; 0x09
 8f0:	e0 2d       	mov	r30, r0
 8f2:	09 95       	icall
 8f4:	89 2b       	or	r24, r25
 8f6:	e1 f6       	brne	.-72     	; 0x8b0 <fputc+0x10>
 8f8:	d8 01       	movw	r26, r16
 8fa:	16 96       	adiw	r26, 0x06	; 6
 8fc:	8d 91       	ld	r24, X+
 8fe:	9c 91       	ld	r25, X
 900:	17 97       	sbiw	r26, 0x07	; 7
 902:	01 96       	adiw	r24, 0x01	; 1
 904:	17 96       	adiw	r26, 0x07	; 7
 906:	9c 93       	st	X, r25
 908:	8e 93       	st	-X, r24
 90a:	16 97       	sbiw	r26, 0x06	; 6
 90c:	ce 01       	movw	r24, r28
 90e:	df 91       	pop	r29
 910:	cf 91       	pop	r28
 912:	1f 91       	pop	r17
 914:	0f 91       	pop	r16
 916:	08 95       	ret

00000918 <__ultoa_invert>:
 918:	fa 01       	movw	r30, r20
 91a:	aa 27       	eor	r26, r26
 91c:	28 30       	cpi	r18, 0x08	; 8
 91e:	51 f1       	breq	.+84     	; 0x974 <__ultoa_invert+0x5c>
 920:	20 31       	cpi	r18, 0x10	; 16
 922:	81 f1       	breq	.+96     	; 0x984 <__ultoa_invert+0x6c>
 924:	e8 94       	clt
 926:	6f 93       	push	r22
 928:	6e 7f       	andi	r22, 0xFE	; 254
 92a:	6e 5f       	subi	r22, 0xFE	; 254
 92c:	7f 4f       	sbci	r23, 0xFF	; 255
 92e:	8f 4f       	sbci	r24, 0xFF	; 255
 930:	9f 4f       	sbci	r25, 0xFF	; 255
 932:	af 4f       	sbci	r26, 0xFF	; 255
 934:	b1 e0       	ldi	r27, 0x01	; 1
 936:	3e d0       	rcall	.+124    	; 0x9b4 <__ultoa_invert+0x9c>
 938:	b4 e0       	ldi	r27, 0x04	; 4
 93a:	3c d0       	rcall	.+120    	; 0x9b4 <__ultoa_invert+0x9c>
 93c:	67 0f       	add	r22, r23
 93e:	78 1f       	adc	r23, r24
 940:	89 1f       	adc	r24, r25
 942:	9a 1f       	adc	r25, r26
 944:	a1 1d       	adc	r26, r1
 946:	68 0f       	add	r22, r24
 948:	79 1f       	adc	r23, r25
 94a:	8a 1f       	adc	r24, r26
 94c:	91 1d       	adc	r25, r1
 94e:	a1 1d       	adc	r26, r1
 950:	6a 0f       	add	r22, r26
 952:	71 1d       	adc	r23, r1
 954:	81 1d       	adc	r24, r1
 956:	91 1d       	adc	r25, r1
 958:	a1 1d       	adc	r26, r1
 95a:	20 d0       	rcall	.+64     	; 0x99c <__ultoa_invert+0x84>
 95c:	09 f4       	brne	.+2      	; 0x960 <__ultoa_invert+0x48>
 95e:	68 94       	set
 960:	3f 91       	pop	r19
 962:	2a e0       	ldi	r18, 0x0A	; 10
 964:	26 9f       	mul	r18, r22
 966:	11 24       	eor	r1, r1
 968:	30 19       	sub	r19, r0
 96a:	30 5d       	subi	r19, 0xD0	; 208
 96c:	31 93       	st	Z+, r19
 96e:	de f6       	brtc	.-74     	; 0x926 <__ultoa_invert+0xe>
 970:	cf 01       	movw	r24, r30
 972:	08 95       	ret
 974:	46 2f       	mov	r20, r22
 976:	47 70       	andi	r20, 0x07	; 7
 978:	40 5d       	subi	r20, 0xD0	; 208
 97a:	41 93       	st	Z+, r20
 97c:	b3 e0       	ldi	r27, 0x03	; 3
 97e:	0f d0       	rcall	.+30     	; 0x99e <__ultoa_invert+0x86>
 980:	c9 f7       	brne	.-14     	; 0x974 <__ultoa_invert+0x5c>
 982:	f6 cf       	rjmp	.-20     	; 0x970 <__ultoa_invert+0x58>
 984:	46 2f       	mov	r20, r22
 986:	4f 70       	andi	r20, 0x0F	; 15
 988:	40 5d       	subi	r20, 0xD0	; 208
 98a:	4a 33       	cpi	r20, 0x3A	; 58
 98c:	18 f0       	brcs	.+6      	; 0x994 <__ultoa_invert+0x7c>
 98e:	49 5d       	subi	r20, 0xD9	; 217
 990:	31 fd       	sbrc	r19, 1
 992:	40 52       	subi	r20, 0x20	; 32
 994:	41 93       	st	Z+, r20
 996:	02 d0       	rcall	.+4      	; 0x99c <__ultoa_invert+0x84>
 998:	a9 f7       	brne	.-22     	; 0x984 <__ultoa_invert+0x6c>
 99a:	ea cf       	rjmp	.-44     	; 0x970 <__ultoa_invert+0x58>
 99c:	b4 e0       	ldi	r27, 0x04	; 4
 99e:	a6 95       	lsr	r26
 9a0:	97 95       	ror	r25
 9a2:	87 95       	ror	r24
 9a4:	77 95       	ror	r23
 9a6:	67 95       	ror	r22
 9a8:	ba 95       	dec	r27
 9aa:	c9 f7       	brne	.-14     	; 0x99e <__ultoa_invert+0x86>
 9ac:	00 97       	sbiw	r24, 0x00	; 0
 9ae:	61 05       	cpc	r22, r1
 9b0:	71 05       	cpc	r23, r1
 9b2:	08 95       	ret
 9b4:	9b 01       	movw	r18, r22
 9b6:	ac 01       	movw	r20, r24
 9b8:	0a 2e       	mov	r0, r26
 9ba:	06 94       	lsr	r0
 9bc:	57 95       	ror	r21
 9be:	47 95       	ror	r20
 9c0:	37 95       	ror	r19
 9c2:	27 95       	ror	r18
 9c4:	ba 95       	dec	r27
 9c6:	c9 f7       	brne	.-14     	; 0x9ba <__ultoa_invert+0xa2>
 9c8:	62 0f       	add	r22, r18
 9ca:	73 1f       	adc	r23, r19
 9cc:	84 1f       	adc	r24, r20
 9ce:	95 1f       	adc	r25, r21
 9d0:	a0 1d       	adc	r26, r0
 9d2:	08 95       	ret

000009d4 <_exit>:
 9d4:	f8 94       	cli

000009d6 <__stop_program>:
 9d6:	ff cf       	rjmp	.-2      	; 0x9d6 <__stop_program>
