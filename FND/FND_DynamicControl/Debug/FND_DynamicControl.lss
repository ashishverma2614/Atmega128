
FND_DynamicControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000210  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010a  0080010a  000002ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000986  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000890  00000000  00000000  00000cde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000331  00000000  00000000  0000156e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  000018a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000443  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010f  00000000  00000000  00001d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001e5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e1       	ldi	r30, 0x10	; 16
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 30       	cpi	r26, 0x0E	; 14
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8e d0       	rcall	.+284    	; 0x1e0 <main>
  c4:	a3 c0       	rjmp	.+326    	; 0x20c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:

char fndPattern[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66 ,0x6D, 0x7C, 0x07 ,0x7F, 0x6F};
unsigned int cnt = 0;

ISR(TIMER0_OVF_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	static int timer = 0;
	timer++;
  d6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  da:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
  e4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	if (timer == 250)
  e8:	8a 3f       	cpi	r24, 0xFA	; 250
  ea:	91 05       	cpc	r25, r1
  ec:	a1 f4       	brne	.+40     	; 0x116 <__vector_16+0x4e>
	{
		cnt++;
  ee:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <cnt>
  f2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cnt+0x1>
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <cnt+0x1>
  fc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <cnt>
		timer = 0;
 100:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
 104:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
		if (cnt == 99) cnt = 0;
 108:	83 36       	cpi	r24, 0x63	; 99
 10a:	91 05       	cpc	r25, r1
 10c:	21 f4       	brne	.+8      	; 0x116 <__vector_16+0x4e>
 10e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cnt+0x1>
 112:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <cnt>
	}
	TCNT0 += 0x06;
 116:	82 b7       	in	r24, 0x32	; 50
 118:	8a 5f       	subi	r24, 0xFA	; 250
 11a:	82 bf       	out	0x32, r24	; 50
}
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <INIT>:


void INIT(void)
{
	DDRA = 0xFF; // 0 ~ 9
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF; // fnd 1 ~4
 12e:	84 bb       	out	0x14, r24	; 20
	
	TCCR0 = 0x04; // 64 pre-scale, OVF interrupt
 130:	84 e0       	ldi	r24, 0x04	; 4
 132:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x06;
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	82 bf       	out	0x32, r24	; 50
	TIMSK = 0x01;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	87 bf       	out	0x37, r24	; 55
	sei();
 13c:	78 94       	sei
 13e:	08 95       	ret

00000140 <displayFnd>:
}

void displayFnd(unsigned count)
{
 140:	ac 01       	movw	r20, r24
	PORTC = (FND1_ON | FND2_OFF);
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	85 bb       	out	0x15, r24	; 21
	PORTA = ~fndPattern[(count % 100) / 10];
 146:	9a 01       	movw	r18, r20
 148:	36 95       	lsr	r19
 14a:	27 95       	ror	r18
 14c:	36 95       	lsr	r19
 14e:	27 95       	ror	r18
 150:	ab e7       	ldi	r26, 0x7B	; 123
 152:	b4 e1       	ldi	r27, 0x14	; 20
 154:	4c d0       	rcall	.+152    	; 0x1ee <__umulhisi3>
 156:	96 95       	lsr	r25
 158:	87 95       	ror	r24
 15a:	64 e6       	ldi	r22, 0x64	; 100
 15c:	68 9f       	mul	r22, r24
 15e:	90 01       	movw	r18, r0
 160:	69 9f       	mul	r22, r25
 162:	30 0d       	add	r19, r0
 164:	11 24       	eor	r1, r1
 166:	ca 01       	movw	r24, r20
 168:	82 1b       	sub	r24, r18
 16a:	93 0b       	sbc	r25, r19
 16c:	9c 01       	movw	r18, r24
 16e:	ad ec       	ldi	r26, 0xCD	; 205
 170:	bc ec       	ldi	r27, 0xCC	; 204
 172:	3d d0       	rcall	.+122    	; 0x1ee <__umulhisi3>
 174:	96 95       	lsr	r25
 176:	87 95       	ror	r24
 178:	96 95       	lsr	r25
 17a:	87 95       	ror	r24
 17c:	96 95       	lsr	r25
 17e:	87 95       	ror	r24
 180:	fc 01       	movw	r30, r24
 182:	e0 50       	subi	r30, 0x00	; 0
 184:	ff 4f       	sbci	r31, 0xFF	; 255
 186:	80 81       	ld	r24, Z
 188:	80 95       	com	r24
 18a:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	8f e1       	ldi	r24, 0x1F	; 31
 18e:	9e e4       	ldi	r25, 0x4E	; 78
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <displayFnd+0x50>
 194:	00 c0       	rjmp	.+0      	; 0x196 <displayFnd+0x56>
 196:	00 00       	nop
	_delay_ms(5);
	PORTC = (FND1_OFF | FND2_ON);
 198:	81 e0       	ldi	r24, 0x01	; 1
	PORTA = ~fndPattern[(count % 10)];
 19a:	85 bb       	out	0x15, r24	; 21
 19c:	9a 01       	movw	r18, r20
 19e:	27 d0       	rcall	.+78     	; 0x1ee <__umulhisi3>
 1a0:	96 95       	lsr	r25
 1a2:	87 95       	ror	r24
 1a4:	96 95       	lsr	r25
 1a6:	87 95       	ror	r24
 1a8:	96 95       	lsr	r25
 1aa:	87 95       	ror	r24
 1ac:	9c 01       	movw	r18, r24
 1ae:	22 0f       	add	r18, r18
 1b0:	33 1f       	adc	r19, r19
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	82 0f       	add	r24, r18
 1c0:	93 1f       	adc	r25, r19
 1c2:	48 1b       	sub	r20, r24
 1c4:	59 0b       	sbc	r21, r25
 1c6:	fa 01       	movw	r30, r20
 1c8:	e0 50       	subi	r30, 0x00	; 0
 1ca:	ff 4f       	sbci	r31, 0xFF	; 255
 1cc:	80 81       	ld	r24, Z
 1ce:	80 95       	com	r24
 1d0:	8b bb       	out	0x1b, r24	; 27
 1d2:	8f e1       	ldi	r24, 0x1F	; 31
 1d4:	9e e4       	ldi	r25, 0x4E	; 78
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <displayFnd+0x96>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <displayFnd+0x9c>
 1dc:	00 00       	nop
 1de:	08 95       	ret

000001e0 <main>:
}


int main(void)
{
	INIT();
 1e0:	a4 df       	rcall	.-184    	; 0x12a <INIT>
    
    while (1) 
    {
		displayFnd(cnt);
 1e2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <cnt>
 1e6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cnt+0x1>
 1ea:	aa df       	rcall	.-172    	; 0x140 <displayFnd>
 1ec:	fa cf       	rjmp	.-12     	; 0x1e2 <main+0x2>

000001ee <__umulhisi3>:
 1ee:	a2 9f       	mul	r26, r18
 1f0:	b0 01       	movw	r22, r0
 1f2:	b3 9f       	mul	r27, r19
 1f4:	c0 01       	movw	r24, r0
 1f6:	a3 9f       	mul	r26, r19
 1f8:	70 0d       	add	r23, r0
 1fa:	81 1d       	adc	r24, r1
 1fc:	11 24       	eor	r1, r1
 1fe:	91 1d       	adc	r25, r1
 200:	b2 9f       	mul	r27, r18
 202:	70 0d       	add	r23, r0
 204:	81 1d       	adc	r24, r1
 206:	11 24       	eor	r1, r1
 208:	91 1d       	adc	r25, r1
 20a:	08 95       	ret

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
