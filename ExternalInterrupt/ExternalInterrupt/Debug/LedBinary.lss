
LedBinary.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000182  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000860  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c3  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000276  00000000  00000000  00001247  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000014c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e1  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000018f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001931  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	50 c0       	rjmp	.+160    	; 0xae <__vector_3>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	2b d0       	rcall	.+86     	; 0x100 <main>
  aa:	2f c0       	rjmp	.+94     	; 0x10a <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_3>:
#include <avr/interrupt.h>

volatile char intNums = 0x00;

ISR(INT2_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
	intNums++; // how to convert to binary?
  ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  be:	8f 5f       	subi	r24, 0xFF	; 255
  c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if (intNums >= 0xFF)
  c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c8:	8f 3f       	cpi	r24, 0xFF	; 255
  ca:	11 f4       	brne	.+4      	; 0xd0 <__vector_3+0x22>
		intNums = 0x00;
  cc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
}
  d0:	8f 91       	pop	r24
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <INIT>:

void INIT(void)
{
	// Led port setting
	DDRB = 0xFF; // output
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00; // SW input
  e0:	11 ba       	out	0x11, r1	; 17
	PORTB = 0x00; // all led off
  e2:	18 ba       	out	0x18, r1	; 24
	PORTD = (1 << DDRD2); // internal pull-up resist
  e4:	84 e0       	ldi	r24, 0x04	; 4
  e6:	82 bb       	out	0x12, r24	; 18
	
	// INT setting
	EIMSK |= (1 << INT2); // turn on external INT2
  e8:	89 b7       	in	r24, 0x39	; 57
  ea:	84 60       	ori	r24, 0x04	; 4
  ec:	89 bf       	out	0x39, r24	; 57
	EICRA |= (1 << ISC21); // detect INT from SW at falling-edge
  ee:	ea e6       	ldi	r30, 0x6A	; 106
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 62       	ori	r24, 0x20	; 32
  f6:	80 83       	st	Z, r24
	SREG |= 0x80; // GBL. INT. enable
  f8:	8f b7       	in	r24, 0x3f	; 63
  fa:	80 68       	ori	r24, 0x80	; 128
  fc:	8f bf       	out	0x3f, r24	; 63
  fe:	08 95       	ret

00000100 <main>:
}

int main(void)
{
	INIT();   
 100:	ed df       	rcall	.-38     	; 0xdc <INIT>
    while (1) 
    {
		PORTB = intNums;
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 106:	88 bb       	out	0x18, r24	; 24
 108:	fc cf       	rjmp	.-8      	; 0x102 <main+0x2>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
