
AtomicOperation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000087d  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e3  00000000  00000000  00000ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000029c  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e8  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000019dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__vector_3>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	3b d0       	rcall	.+118    	; 0x120 <main>
  aa:	4a c0       	rjmp	.+148    	; 0x140 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <INIT>:
#define INIT_H_

void INIT(void)
{
	// Led port setting
	DDRB = 0xFF; // output
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00; // SW input
  b2:	11 ba       	out	0x11, r1	; 17
	PORTB = 0x00; // all led off
  b4:	18 ba       	out	0x18, r1	; 24
	PORTD = (1 << DDRD2); // internal pull-up resist
  b6:	84 e0       	ldi	r24, 0x04	; 4
  b8:	82 bb       	out	0x12, r24	; 18
	
	// INT setting
	EIMSK |= (1 << INT2); // turn on external INT2
  ba:	89 b7       	in	r24, 0x39	; 57
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	89 bf       	out	0x39, r24	; 57
	EICRA |= (1 << ISC21); // detect INT from SW at falling-edge
  c0:	ea e6       	ldi	r30, 0x6A	; 106
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 62       	ori	r24, 0x20	; 32
  c8:	80 83       	st	Z, r24
	SREG |= 0x80; // GBL. INT. enable
  ca:	8f b7       	in	r24, 0x3f	; 63
  cc:	80 68       	ori	r24, 0x80	; 128
  ce:	8f bf       	out	0x3f, r24	; 63
  d0:	08 95       	ret

000000d2 <__vector_3>:

volatile unsigned int num = 0x0000; // 16bit(2byte), which is possible to break its data
unsigned char intFlag = 0x00;

ISR(INT2_vect)
{
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
	intFlag |= 0x01; // becomes 1
  e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	num++;
  ea:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <num>
  ee:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <num+0x1>
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <num+0x1>
  f8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <num>
	if (num > 0x80)
  fc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <num>
 100:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <num+0x1>
 104:	81 38       	cpi	r24, 0x81	; 129
 106:	91 05       	cpc	r25, r1
 108:	20 f0       	brcs	.+8      	; 0x112 <__vector_3+0x40>
		num = 0x00;
 10a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <num+0x1>
 10e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <num>
}
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <main>:

int main(void)
{
	unsigned int localNum;
	INIT(); // already defined in the header file
 120:	c6 df       	rcall	.-116    	; 0xae <INIT>
	
    while (1) 
    {
		/* start ATOMIC_BLOCK */
		
		SREG |= 0x00; // off GBL INT: while reading 16bit int num, turn-off external interrupt
 122:	8f b7       	in	r24, 0x3f	; 63
 124:	8f bf       	out	0x3f, r24	; 63
		localNum = num;
 126:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <num>
 12a:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <num+0x1>
		SREG |= 0x80; // restore INT: restore interrupt
 12e:	8f b7       	in	r24, 0x3f	; 63
 130:	80 68       	ori	r24, 0x80	; 128
 132:	8f bf       	out	0x3f, r24	; 63
		
		/* end ATOMIC_BLOCK */
		
		if (intFlag == 1) 
 134:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	99 f7       	brne	.-26     	; 0x122 <main+0x2>
			PORTB = localNum;
 13c:	28 bb       	out	0x18, r18	; 24
 13e:	f1 cf       	rjmp	.-30     	; 0x122 <main+0x2>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
