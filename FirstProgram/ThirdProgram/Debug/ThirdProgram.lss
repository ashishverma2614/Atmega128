
ThirdProgram.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  000001ba  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800152  00800152  000002a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cdd  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fd  00000000  00000000  0000107d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055e  00000000  00000000  00001a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00001fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f8  00000000  00000000  00002128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002bb  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000028db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea eb       	ldi	r30, 0xBA	; 186
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 35       	cpi	r26, 0x52	; 82
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e5       	ldi	r26, 0x52	; 82
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 35       	cpi	r26, 0x58	; 88
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	1d d0       	rcall	.+58     	; 0xfe <main>
  c4:	78 c0       	rjmp	.+240    	; 0x1b6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <debug_LED>:
}
/* function definition */

void debug_LED(char led)
{
    switch(led) // serial monitor debug
  c8:	80 32       	cpi	r24, 0x20	; 32
  ca:	69 f0       	breq	.+26     	; 0xe6 <debug_LED+0x1e>
  cc:	18 f4       	brcc	.+6      	; 0xd4 <debug_LED+0xc>
  ce:	80 31       	cpi	r24, 0x10	; 16
  d0:	31 f0       	breq	.+12     	; 0xde <debug_LED+0x16>
  d2:	08 95       	ret
  d4:	80 34       	cpi	r24, 0x40	; 64
  d6:	59 f0       	breq	.+22     	; 0xee <debug_LED+0x26>
  d8:	80 38       	cpi	r24, 0x80	; 128
  da:	69 f0       	breq	.+26     	; 0xf6 <debug_LED+0x2e>
  dc:	08 95       	ret
    {
        case 0x10:
        printf("LED ON: X X X O\r\n");
  de:	8e e0       	ldi	r24, 0x0E	; 14
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	39 c0       	rjmp	.+114    	; 0x156 <puts>
        break;
  e4:	08 95       	ret
        case 0x20:
        printf("LED ON: X X O X\r\n");
  e6:	8f e1       	ldi	r24, 0x1F	; 31
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	35 c0       	rjmp	.+106    	; 0x156 <puts>
        break;
  ec:	08 95       	ret
        case 0x40:
        printf("LED ON: X O X X\r\n");
  ee:	80 e3       	ldi	r24, 0x30	; 48
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	31 c0       	rjmp	.+98     	; 0x156 <puts>
        break;
        case 0x80:
        printf("LED ON: O X X X\r\n");
  f4:	08 95       	ret
  f6:	81 e4       	ldi	r24, 0x41	; 65
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	2d c0       	rjmp	.+90     	; 0x156 <puts>
  fc:	08 95       	ret

000000fe <main>:
void debug_LED(char led);

///////////////////////////////////////////////////////////////////////////////
int main(void)
{
    stdout = &OUTPUT;
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <__data_end+0x3>
 106:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end+0x2>
    //stdin = &INPUT;
    USART0_Init(UBRR_9600_1X);
 10a:	87 e6       	ldi	r24, 0x67	; 103
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	15 d0       	rcall	.+42     	; 0x13a <USART0_Init>
	char ledOnLocation = 0x10; // init LED
	DDRB = 0xF0;
 110:	80 ef       	ldi	r24, 0xF0	; 240
 112:	87 bb       	out	0x17, r24	; 23
int main(void)
{
    stdout = &OUTPUT;
    //stdin = &INPUT;
    USART0_Init(UBRR_9600_1X);
	char ledOnLocation = 0x10; // init LED
 114:	c0 e1       	ldi	r28, 0x10	; 16
	DDRB = 0xF0;
    while (TRUE) 
    {
        PORTB = ledOnLocation;
 116:	c8 bb       	out	0x18, r28	; 24
        debug_LED(ledOnLocation);
 118:	8c 2f       	mov	r24, r28
 11a:	d6 df       	rcall	.-84     	; 0xc8 <debug_LED>
        
        // check led position & come back to original state
		if (ledOnLocation == 0x80) // if 4th led is on
 11c:	c0 38       	cpi	r28, 0x80	; 128
 11e:	11 f0       	breq	.+4      	; 0x124 <main+0x26>
			ledOnLocation = 0x10; // come back to the 1st led
		else
			ledOnLocation <<= 1; // shift led from 0 to 8
 120:	cc 0f       	add	r28, r28
 122:	01 c0       	rjmp	.+2      	; 0x126 <main+0x28>
        PORTB = ledOnLocation;
        debug_LED(ledOnLocation);
        
        // check led position & come back to original state
		if (ledOnLocation == 0x80) // if 4th led is on
			ledOnLocation = 0x10; // come back to the 1st led
 124:	c0 e1       	ldi	r28, 0x10	; 16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	87 ea       	ldi	r24, 0xA7	; 167
 12a:	91 e6       	ldi	r25, 0x61	; 97
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x2e>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x38>
 136:	00 00       	nop
 138:	ee cf       	rjmp	.-36     	; 0x116 <main+0x18>

0000013a <USART0_Init>:
    static int i = 0;
    do 
    {
        str[i] = USART1_GetCh();
    } while (str[i++] != '\r' && str[i++] != '\n');
}
 13a:	1b b8       	out	0x0b, r1	; 11
 13c:	28 e9       	ldi	r18, 0x98	; 152
 13e:	2a b9       	out	0x0a, r18	; 10
 140:	26 e0       	ldi	r18, 0x06	; 6
 142:	20 93 95 00 	sts	0x0095, r18	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 146:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 14a:	89 b9       	out	0x09, r24	; 9
 14c:	08 95       	ret

0000014e <USART0_PutCh>:
void USART0_PutCh(char ch)
{
    while (!(UCSR0A & (0x01 << UDRE0)));
 14e:	5d 9b       	sbis	0x0b, 5	; 11
 150:	fe cf       	rjmp	.-4      	; 0x14e <USART0_PutCh>
    UDR0 = ch;
 152:	8c b9       	out	0x0c, r24	; 12
 154:	08 95       	ret

00000156 <puts>:
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <__data_end+0x2>
 162:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <__data_end+0x3>
 166:	23 81       	ldd	r18, Z+3	; 0x03
 168:	21 ff       	sbrs	r18, 1
 16a:	1b c0       	rjmp	.+54     	; 0x1a2 <puts+0x4c>
 16c:	8c 01       	movw	r16, r24
 16e:	d0 e0       	ldi	r29, 0x00	; 0
 170:	c0 e0       	ldi	r28, 0x00	; 0
 172:	f8 01       	movw	r30, r16
 174:	81 91       	ld	r24, Z+
 176:	8f 01       	movw	r16, r30
 178:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <__data_end+0x2>
 17c:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <__data_end+0x3>
 180:	db 01       	movw	r26, r22
 182:	18 96       	adiw	r26, 0x08	; 8
 184:	ed 91       	ld	r30, X+
 186:	fc 91       	ld	r31, X
 188:	19 97       	sbiw	r26, 0x09	; 9
 18a:	88 23       	and	r24, r24
 18c:	31 f0       	breq	.+12     	; 0x19a <puts+0x44>
 18e:	09 95       	icall
 190:	89 2b       	or	r24, r25
 192:	79 f3       	breq	.-34     	; 0x172 <puts+0x1c>
 194:	df ef       	ldi	r29, 0xFF	; 255
 196:	cf ef       	ldi	r28, 0xFF	; 255
 198:	ec cf       	rjmp	.-40     	; 0x172 <puts+0x1c>
 19a:	8a e0       	ldi	r24, 0x0A	; 10
 19c:	09 95       	icall
 19e:	89 2b       	or	r24, r25
 1a0:	19 f0       	breq	.+6      	; 0x1a8 <puts+0x52>
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	9f ef       	ldi	r25, 0xFF	; 255
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <puts+0x56>
 1a8:	8d 2f       	mov	r24, r29
 1aa:	9c 2f       	mov	r25, r28
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	08 95       	ret

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
