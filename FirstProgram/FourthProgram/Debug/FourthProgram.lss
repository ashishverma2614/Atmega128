
FourthProgram.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b4  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ee  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c1  00000000  00000000  00001272  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001534  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000409  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007f  00000000  00000000  00001961  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	25 c0       	rjmp	.+74     	; 0xe6 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
{
	/* Replace with your application code */
	char led = 0x01;
	int dir = 0; // 0 is left shift

	DDRB = 0xFF; // set PORTB
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	87 bb       	out	0x17, r24	; 23

int main(void)
{
	/* Replace with your application code */
	char led = 0x01;
	int dir = 0; // 0 is left shift
  a2:	20 e0       	ldi	r18, 0x00	; 0
  a4:	30 e0       	ldi	r19, 0x00	; 0
#include <util/delay.h>

int main(void)
{
	/* Replace with your application code */
	char led = 0x01;
  a6:	81 e0       	ldi	r24, 0x01	; 1
				led <<= 1; // move led-on to the left until 8th is on
		}
		else // right shift
		{
			 if (led == 0x01) // led 1st is on
				dir = 0; // change direction to the left
  a8:	60 e0       	ldi	r22, 0x00	; 0
  aa:	50 e0       	ldi	r21, 0x00	; 0
	{
		PORTB = led;
		if (dir == 0) // left shift
		{
			if (led == 0x80) // led 8 is on
				dir = 1; //change direction to the right
  ac:	41 e0       	ldi	r20, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0

	DDRB = 0xFF; // set PORTB

	while(1)
	{
		PORTB = led;
  b0:	88 bb       	out	0x18, r24	; 24
		if (dir == 0) // left shift
  b2:	21 15       	cp	r18, r1
  b4:	31 05       	cpc	r19, r1
  b6:	21 f4       	brne	.+8      	; 0xc0 <main+0x22>
		{
			if (led == 0x80) // led 8 is on
  b8:	80 38       	cpi	r24, 0x80	; 128
  ba:	31 f0       	breq	.+12     	; 0xc8 <main+0x2a>
				dir = 1; //change direction to the right
			else
				led <<= 1; // move led-on to the left until 8th is on
  bc:	88 0f       	add	r24, r24
  be:	09 c0       	rjmp	.+18     	; 0xd2 <main+0x34>
		}
		else // right shift
		{
			 if (led == 0x01) // led 1st is on
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	29 f0       	breq	.+10     	; 0xce <main+0x30>
				dir = 0; // change direction to the left
			else
				led >>= 1;
  c4:	86 95       	lsr	r24
  c6:	05 c0       	rjmp	.+10     	; 0xd2 <main+0x34>
	{
		PORTB = led;
		if (dir == 0) // left shift
		{
			if (led == 0x80) // led 8 is on
				dir = 1; //change direction to the right
  c8:	24 2f       	mov	r18, r20
  ca:	39 2f       	mov	r19, r25
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <main+0x34>
				led <<= 1; // move led-on to the left until 8th is on
		}
		else // right shift
		{
			 if (led == 0x01) // led 1st is on
				dir = 0; // change direction to the left
  ce:	26 2f       	mov	r18, r22
  d0:	35 2f       	mov	r19, r21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	7f ef       	ldi	r23, 0xFF	; 255
  d4:	e9 e6       	ldi	r30, 0x69	; 105
  d6:	f8 e1       	ldi	r31, 0x18	; 24
  d8:	71 50       	subi	r23, 0x01	; 1
  da:	e0 40       	sbci	r30, 0x00	; 0
  dc:	f0 40       	sbci	r31, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x3a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x44>
  e2:	00 00       	nop
  e4:	e5 cf       	rjmp	.-54     	; 0xb0 <main+0x12>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
