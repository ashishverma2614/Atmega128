
FirstProgram.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  0000019a  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800130  00800130  0000025e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c95  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d7  00000000  00000000  00000fed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053e  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00001f04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e0  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000278  00000000  00000000  00002524  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000279c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e9       	ldi	r30, 0x9A	; 154
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 33       	cpi	r26, 0x30	; 48
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e3       	ldi	r26, 0x30	; 48
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 33       	cpi	r26, 0x36	; 54
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	68 c0       	rjmp	.+208    	; 0x196 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
//FILE INPUT = FDEV_SETUP_STREAM(NULL, USART0_GetCh, _FDEV_SETUP_READ);

///////////////////////////////////////////////////////////////////////////////
int main(void)
{
	stdout = &OUTPUT;
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <__data_end+0x3>
  d0:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end+0x2>
	//stdin = &INPUT;

    USART0_Init(UBRR_9600_1X);
  d4:	87 e6       	ldi	r24, 0x67	; 103
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	20 d0       	rcall	.+64     	; 0x11a <USART0_Init>
	DDRB = 0xFF; // set pin7 of PORTB as output
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	87 bb       	out	0x17, r24	; 23
    while (TRUE) 
    {
		PORTB |= 0xFF; // turn on LED connected to PA0
  de:	cf ef       	ldi	r28, 0xFF	; 255
  e0:	88 b3       	in	r24, 0x18	; 24
  e2:	c8 bb       	out	0x18, r28	; 24
		printf ("LED turned on!\r\n"); // for debug
  e4:	8e e0       	ldi	r24, 0x0E	; 14
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	26 d0       	rcall	.+76     	; 0x136 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	89 e6       	ldi	r24, 0x69	; 105
  ee:	98 e1       	ldi	r25, 0x18	; 24
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x28>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x32>
  fa:	00 00       	nop
		//USART0_PutS("LED turned on!");
        _delay_ms(500);
		PORTB &=  ~(0xFF); // turn off LED connected to PA0
  fc:	88 b3       	in	r24, 0x18	; 24
  fe:	18 ba       	out	0x18, r1	; 24
		printf("LED turned off!\r\n");
 100:	8e e1       	ldi	r24, 0x1E	; 30
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	18 d0       	rcall	.+48     	; 0x136 <puts>
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	89 e6       	ldi	r24, 0x69	; 105
 10a:	98 e1       	ldi	r25, 0x18	; 24
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x44>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x4e>
 116:	00 00       	nop
 118:	e3 cf       	rjmp	.-58     	; 0xe0 <main+0x18>

0000011a <USART0_Init>:
    static int i = 0;
    do 
    {
        str[i] = USART1_GetCh();
    } while (str[i++] != '\r' && str[i++] != '\n');
}
 11a:	1b b8       	out	0x0b, r1	; 11
 11c:	28 e9       	ldi	r18, 0x98	; 152
 11e:	2a b9       	out	0x0a, r18	; 10
 120:	26 e0       	ldi	r18, 0x06	; 6
 122:	20 93 95 00 	sts	0x0095, r18	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 126:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 12a:	89 b9       	out	0x09, r24	; 9
 12c:	08 95       	ret

0000012e <USART0_PutCh>:
void USART0_PutCh(char ch)
{
    while (!(UCSR0A & (0x01 << UDRE0)));
 12e:	5d 9b       	sbis	0x0b, 5	; 11
 130:	fe cf       	rjmp	.-4      	; 0x12e <USART0_PutCh>
    UDR0 = ch;
 132:	8c b9       	out	0x0c, r24	; 12
 134:	08 95       	ret

00000136 <puts>:
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <__data_end+0x2>
 142:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <__data_end+0x3>
 146:	23 81       	ldd	r18, Z+3	; 0x03
 148:	21 ff       	sbrs	r18, 1
 14a:	1b c0       	rjmp	.+54     	; 0x182 <puts+0x4c>
 14c:	8c 01       	movw	r16, r24
 14e:	d0 e0       	ldi	r29, 0x00	; 0
 150:	c0 e0       	ldi	r28, 0x00	; 0
 152:	f8 01       	movw	r30, r16
 154:	81 91       	ld	r24, Z+
 156:	8f 01       	movw	r16, r30
 158:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <__data_end+0x2>
 15c:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <__data_end+0x3>
 160:	db 01       	movw	r26, r22
 162:	18 96       	adiw	r26, 0x08	; 8
 164:	ed 91       	ld	r30, X+
 166:	fc 91       	ld	r31, X
 168:	19 97       	sbiw	r26, 0x09	; 9
 16a:	88 23       	and	r24, r24
 16c:	31 f0       	breq	.+12     	; 0x17a <puts+0x44>
 16e:	09 95       	icall
 170:	89 2b       	or	r24, r25
 172:	79 f3       	breq	.-34     	; 0x152 <puts+0x1c>
 174:	df ef       	ldi	r29, 0xFF	; 255
 176:	cf ef       	ldi	r28, 0xFF	; 255
 178:	ec cf       	rjmp	.-40     	; 0x152 <puts+0x1c>
 17a:	8a e0       	ldi	r24, 0x0A	; 10
 17c:	09 95       	icall
 17e:	89 2b       	or	r24, r25
 180:	19 f0       	breq	.+6      	; 0x188 <puts+0x52>
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	9f ef       	ldi	r25, 0xFF	; 255
 186:	02 c0       	rjmp	.+4      	; 0x18c <puts+0x56>
 188:	8d 2f       	mov	r24, r29
 18a:	9c 2f       	mov	r25, r28
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	08 95       	ret

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
