
SixthProgram.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000832  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078e  00000000  00000000  000009ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000270  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000013e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c5  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000055  00000000  00000000  000017d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001826  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	1a c0       	rjmp	.+52     	; 0xd0 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
    /* Replace with your application code */

	char led = 0x01; // INIT of led(first on)
	char swState = 0;
	
	DDRB = 0xFF; // led, output
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00; //SW, input
  a2:	11 ba       	out	0x11, r1	; 17
int main(void)
{
    /* Replace with your application code */

	char led = 0x01; // INIT of led(first on)
	char swState = 0;
  a4:	90 e0       	ldi	r25, 0x00	; 0

int main(void)
{
    /* Replace with your application code */

	char led = 0x01; // INIT of led(first on)
  a6:	81 e0       	ldi	r24, 0x01	; 1
    while (1) 
    {
		PORTB = led; // set led to PORTB
		if ((PIND & 0x01) != 0 && swState == 0)
		{
			swState = 1; // change state of led
  a8:	21 e0       	ldi	r18, 0x01	; 1
			else
				led <<= 1;

		}
		if ((PIND & 0x01) == 0 && swState == 1)
			swState = 0;
  aa:	30 e0       	ldi	r19, 0x00	; 0
	
	DDRB = 0xFF; // led, output
	DDRD = 0x00; //SW, input
    while (1) 
    {
		PORTB = led; // set led to PORTB
  ac:	88 bb       	out	0x18, r24	; 24
		if ((PIND & 0x01) != 0 && swState == 0)
  ae:	80 9b       	sbis	0x10, 0	; 16
  b0:	09 c0       	rjmp	.+18     	; 0xc4 <main+0x26>
  b2:	91 11       	cpse	r25, r1
  b4:	07 c0       	rjmp	.+14     	; 0xc4 <main+0x26>
		{
			swState = 1; // change state of led
			if (led == 0x08) // if 8th led is on
  b6:	88 30       	cpi	r24, 0x08	; 8
  b8:	19 f0       	breq	.+6      	; 0xc0 <main+0x22>
				led = 0x01;
			else
				led <<= 1;
  ba:	88 0f       	add	r24, r24
    while (1) 
    {
		PORTB = led; // set led to PORTB
		if ((PIND & 0x01) != 0 && swState == 0)
		{
			swState = 1; // change state of led
  bc:	92 2f       	mov	r25, r18
  be:	02 c0       	rjmp	.+4      	; 0xc4 <main+0x26>
  c0:	92 2f       	mov	r25, r18
			if (led == 0x08) // if 8th led is on
				led = 0x01;
  c2:	81 e0       	ldi	r24, 0x01	; 1
			else
				led <<= 1;

		}
		if ((PIND & 0x01) == 0 && swState == 1)
  c4:	80 99       	sbic	0x10, 0	; 16
  c6:	f2 cf       	rjmp	.-28     	; 0xac <main+0xe>
  c8:	91 30       	cpi	r25, 0x01	; 1
  ca:	81 f7       	brne	.-32     	; 0xac <main+0xe>
			swState = 0;
  cc:	93 2f       	mov	r25, r19
  ce:	ee cf       	rjmp	.-36     	; 0xac <main+0xe>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
