
OVFBasic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000859  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c1  00000000  00000000  00000aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000028b  00000000  00000000  00001262  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  000014f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d4  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001965  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	36 c0       	rjmp	.+108    	; 0xae <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	40 d0       	rcall	.+128    	; 0x12a <main>
  aa:	41 c0       	rjmp	.+130    	; 0x12e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_16>:

typedef unsigned char unit8_t;
//unit8_t tick0_OvF = 0;

ISR(TIMER0_OVF_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
	volatile static unsigned int tick0_OVF; // better way than using global var
	tick0_OVF++; // max = 125, total 126cnt
  bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	// how to make 1sec by using 8bit OVF T/C
	if (tick0_OVF == 125) // 8ms * 125 = 1sec(1000ms)
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  d6:	8d 37       	cpi	r24, 0x7D	; 125
  d8:	91 05       	cpc	r25, r1
  da:	71 f4       	brne	.+28     	; 0xf8 <__vector_16+0x4a>
	{
		switch (PINB) // read the value of PINB
  dc:	86 b3       	in	r24, 0x16	; 22
  de:	88 23       	and	r24, r24
  e0:	19 f0       	breq	.+6      	; 0xe8 <__vector_16+0x3a>
  e2:	8f 3f       	cpi	r24, 0xFF	; 255
  e4:	21 f0       	breq	.+8      	; 0xee <__vector_16+0x40>
  e6:	04 c0       	rjmp	.+8      	; 0xf0 <__vector_16+0x42>
		{
			case 0x00: // PINB = 0x00, if PINB is off then turn on
				PORTB = 0xFF;
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	88 bb       	out	0x18, r24	; 24
				break;
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <__vector_16+0x42>
			case 0xFF: // PINB = 0xFF, if PINB is on then turn off
				PORTB = 0x00;
  ee:	18 ba       	out	0x18, r1	; 24
				break;
		}
		tick0_OVF = 0; // reset counter
  f0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  f4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
	TCNT0 = 131; // enforce to reset TCNT0, which means to adjust the value of start 
  f8:	83 e8       	ldi	r24, 0x83	; 131
  fa:	82 bf       	out	0x32, r24	; 50
				// 255 - 131  + 1 = 125
}
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <INIT>:
}

void INIT(void)
{
	/* Port Setting */
	cbi(SREG, 7); // same as cli(), all INT disabled
 10a:	8f b7       	in	r24, 0x3f	; 63
 10c:	8f 77       	andi	r24, 0x7F	; 127
 10e:	8f bf       	out	0x3f, r24	; 63
	PORTB = 0xFF; // set PB as output
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	88 bb       	out	0x18, r24	; 24
	DDRB = 0xFF; // turn on all LED at first
 114:	87 bb       	out	0x17, r24	; 23

	/* Timer Setting  */
	TCCR0 = (1 << CS02) | (1 << CS01) | (1 << CS00); // set Timer Counter Control Reg., pre-scale: 1024(approx. 64us)
 116:	87 e0       	ldi	r24, 0x07	; 7
 118:	83 bf       	out	0x33, r24	; 51
	//TCCR0 = 0x07;
	TCNT0 = 131; // set start value, 1 / clkt0 = 64us, 64us X 125 = 8ms
 11a:	83 e8       	ldi	r24, 0x83	; 131
 11c:	82 bf       	out	0x32, r24	; 50
	TIMSK = (1 << TOIE0); // set Timer0 Overflow Interrupt Enable
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	87 bf       	out	0x37, r24	; 55
	sbi(SREG, 7); // global INT enable
 122:	8f b7       	in	r24, 0x3f	; 63
 124:	80 68       	ori	r24, 0x80	; 128
 126:	8f bf       	out	0x3f, r24	; 63
 128:	08 95       	ret

0000012a <main>:

void INIT(void);

int main(void)
{
	INIT();
 12a:	ef df       	rcall	.-34     	; 0x10a <INIT>
 12c:	ff cf       	rjmp	.-2      	; 0x12c <main+0x2>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
