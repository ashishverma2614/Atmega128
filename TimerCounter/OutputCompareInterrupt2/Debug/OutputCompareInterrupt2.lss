
OutputCompareInterrupt2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000847  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007af  00000000  00000000  00000a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000280  00000000  00000000  0000123e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  000014c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003dd  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000018e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000192e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	38 c0       	rjmp	.+112    	; 0xae <__vector_15>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	1a d0       	rcall	.+52     	; 0xde <main>
  aa:	45 c0       	rjmp	.+138    	; 0x136 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_15>:

volatile unsigned int cnt = 0; // set cnt as volatile b/c this value can be changed only in ISR
unsigned char ledState = 0;

ISR(TIMER0_COMP_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
	++cnt;
  bc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cnt>
  c0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <cnt+0x1>
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <cnt+0x1>
  ca:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <cnt>
	TCNT0 = 0; // forcefully empty the number of timer interrupt
  ce:	12 be       	out	0x32, r1	; 50
			   // since OCR0 is not 0
}
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <main>:

int main(void)
{
	DDRB = 0xFF; // set portB as output
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(0xFF); // initial state: all led off
  e2:	88 b3       	in	r24, 0x18	; 24
  e4:	18 ba       	out	0x18, r1	; 24

	// set pre-scale of timer0 to use compare and match interrupt
	TCCR0 |= (1 << CS02)  | (1 << CS01) | (1 << CS00);
  e6:	83 b7       	in	r24, 0x33	; 51
  e8:	87 60       	ori	r24, 0x07	; 7
  ea:	83 bf       	out	0x33, r24	; 51
	
	// set bottom matching line
	OCR0 = 128;
  ec:	80 e8       	ldi	r24, 0x80	; 128
  ee:	81 bf       	out	0x31, r24	; 49

	// compare and match interrupt enable
	TIMSK |= (1 << OCIE0); 
  f0:	87 b7       	in	r24, 0x37	; 55
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	87 bf       	out	0x37, r24	; 55

	// global interrupt enable
	SREG |= 0x80;
  f6:	8f b7       	in	r24, 0x3f	; 63
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	8f bf       	out	0x3f, r24	; 63
	while(1)
	{
		if(cnt == 64)
		{
			cnt = 0;
			ledState = !ledState;
  fc:	21 e0       	ldi	r18, 0x01	; 1
  fe:	30 e0       	ldi	r19, 0x00	; 0
			if (ledState == 1) PORTB |= 0xFF;
 100:	4f ef       	ldi	r20, 0xFF	; 255
	// global interrupt enable
	SREG |= 0x80;

	while(1)
	{
		if(cnt == 64)
 102:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <cnt>
 106:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <cnt+0x1>
 10a:	80 34       	cpi	r24, 0x40	; 64
 10c:	91 05       	cpc	r25, r1
 10e:	c9 f7       	brne	.-14     	; 0x102 <main+0x24>
		{
			cnt = 0;
 110:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <cnt+0x1>
 114:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <cnt>
			ledState = !ledState;
 118:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11c:	92 2f       	mov	r25, r18
 11e:	81 11       	cpse	r24, r1
 120:	93 2f       	mov	r25, r19
 122:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
			if (ledState == 1) PORTB |= 0xFF;
 126:	81 11       	cpse	r24, r1
 128:	03 c0       	rjmp	.+6      	; 0x130 <main+0x52>
 12a:	88 b3       	in	r24, 0x18	; 24
 12c:	48 bb       	out	0x18, r20	; 24
 12e:	e9 cf       	rjmp	.-46     	; 0x102 <main+0x24>
			else PORTB &= ~0xFF;
 130:	88 b3       	in	r24, 0x18	; 24
 132:	18 ba       	out	0x18, r1	; 24
 134:	e6 cf       	rjmp	.-52     	; 0x102 <main+0x24>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
