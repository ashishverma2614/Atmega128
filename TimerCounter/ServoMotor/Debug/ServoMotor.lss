
ServoMotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000020e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000898  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d2  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ce  00000000  00000000  0000132a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  000015f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ee  00000000  00000000  0000169c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000db  00000000  00000000  00001a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001b65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	50 c0       	rjmp	.+160    	; 0xae <__vector_3>
   e:	00 00       	nop
  10:	66 c0       	rjmp	.+204    	; 0xde <__vector_4>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	63 c0       	rjmp	.+198    	; 0x104 <__vector_15>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	74 d0       	rcall	.+232    	; 0x192 <main>
  aa:	75 c0       	rjmp	.+234    	; 0x196 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_3>:
volatile unsigned int cnt = 0;

// per 1 switch pressing, 0.1ms of high width increases
// , which is approx. 10 degree(45 / 5)
ISR(INT2_vect) 
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
	moveAngle++;
  ba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <moveAngle>
  be:	8f 5f       	subi	r24, 0xFF	; 255
  c0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <moveAngle>
	if (moveAngle > 20)
  c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <moveAngle>
  c8:	85 31       	cpi	r24, 0x15	; 21
  ca:	18 f0       	brcs	.+6      	; 0xd2 <__vector_3+0x24>
		moveAngle = 20; // 180 degree (ZERO_DEGREE + 2.0ms = 2.5ms)
  cc:	84 e1       	ldi	r24, 0x14	; 20
  ce:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <moveAngle>
}
  d2:	8f 91       	pop	r24
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <__vector_4>:
// per 1 switch pressing, 0.1ms of high width decrease
ISR(INT3_vect) 
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	8f 93       	push	r24
	moveAngle--;
  ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <moveAngle>
  ee:	81 50       	subi	r24, 0x01	; 1
  f0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <moveAngle>
	if (moveAngle < 0)
  f4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <moveAngle>
		moveAngle = 0; // 0 degree (ZERO_DEGEE = 0.5ms)
}
  f8:	8f 91       	pop	r24
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <__vector_15>:
ISR(TIMER0_COMP_vect) // 100us(0.1ms)
{
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	2f 93       	push	r18
 110:	3f 93       	push	r19
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
	if (++cnt == 200) // period criteria(20ms = 0.1ms X 200)
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 124:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 128:	88 3c       	cpi	r24, 0xC8	; 200
 12a:	91 05       	cpc	r25, r1
 12c:	31 f4       	brne	.+12     	; 0x13a <__vector_15+0x36>
	{
		cnt = 0; // re-count timer interrupt
 12e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 132:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		PORTD = 0xFF; // start servo moving
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	82 bb       	out	0x12, r24	; 18
	}
	if (cnt > (ZERO_DEGREE + moveAngle))
 13a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <moveAngle>
 13e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 142:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	05 96       	adiw	r24, 0x05	; 5
 14a:	82 17       	cp	r24, r18
 14c:	93 07       	cpc	r25, r19
 14e:	08 f4       	brcc	.+2      	; 0x152 <__vector_15+0x4e>
		PORTD = 0x00; // stop servo moving
 150:	12 ba       	out	0x12, r1	; 18
}
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	3f 91       	pop	r19
 158:	2f 91       	pop	r18
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <INIT>:

void INIT(void)
{
	// pin setting
	DDRB = 0xFF; // set portB as output
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00; // set portD as input(SW)
 168:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x0C; // set internal pull-up resist
 16a:	8c e0       	ldi	r24, 0x0C	; 12
 16c:	82 bb       	out	0x12, r24	; 18
	
	// external interrupt enable
	EICRA |= (1 << ISC31) | (1 << ISC21); // set INT2, 3 as falling edge detection
 16e:	ea e6       	ldi	r30, 0x6A	; 106
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	80 6a       	ori	r24, 0xA0	; 160
 176:	80 83       	st	Z, r24
	EIMSK |= (1 << INT2) | (1 << INT3); // INT2, 3 enable
 178:	89 b7       	in	r24, 0x39	; 57
 17a:	8c 60       	ori	r24, 0x0C	; 12
 17c:	89 bf       	out	0x39, r24	; 57
	
	// timer interrupt enable
	TCCR0 |= (1 << WGM01) | (1 << CS01); // CTC mode, pre-scale ratio 8
 17e:	83 b7       	in	r24, 0x33	; 51
 180:	8a 60       	ori	r24, 0x0A	; 10
 182:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1 << OCIE0); // compare and match interrupt enable
 184:	87 b7       	in	r24, 0x37	; 55
 186:	82 60       	ori	r24, 0x02	; 2
 188:	87 bf       	out	0x37, r24	; 55
	OCR0 = 199; // 1/16us X 8 X (1 + 199) = 100us
 18a:	87 ec       	ldi	r24, 0xC7	; 199
 18c:	81 bf       	out	0x31, r24	; 49
	
	sei(); // global interrupt enable
 18e:	78 94       	sei
 190:	08 95       	ret

00000192 <main>:
}

void main(void) // nothing to return
{
	INIT();
 192:	e8 df       	rcall	.-48     	; 0x164 <INIT>
 194:	ff cf       	rjmp	.-2      	; 0x194 <main+0x2>

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
