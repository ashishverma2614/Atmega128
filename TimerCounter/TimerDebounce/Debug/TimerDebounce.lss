
TimerDebounce.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001a4  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800102  00800102  0000023a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008af  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d1  00000000  00000000  00000b93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ec  00000000  00000000  00001364  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001650  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000402  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014e  00000000  00000000  00001ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001c34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__vector_3>
   e:	00 00       	nop
  10:	9b c0       	rjmp	.+310    	; 0x148 <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ea       	ldi	r30, 0xA4	; 164
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 30       	cpi	r26, 0x05	; 5
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5b d0       	rcall	.+182    	; 0x17a <main>
  c4:	6d c0       	rjmp	.+218    	; 0x1a0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
unsigned char dir = 0; // 정지상태

// 오버플로 타이머에 의한 디바운스 시간설정
// 일정시간 입력무시
ISR(TIMER0_OVF_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
	++cnt;
  d8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <cnt>
  dc:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <cnt+0x1>
  e0:	01 96       	adiw	r24, 0x01	; 1
	if (cnt == 1000)
  e2:	88 3e       	cpi	r24, 0xE8	; 232
  e4:	23 e0       	ldi	r18, 0x03	; 3
  e6:	92 07       	cpc	r25, r18
  e8:	29 f0       	breq	.+10     	; 0xf4 <__vector_16+0x2c>

// 오버플로 타이머에 의한 디바운스 시간설정
// 일정시간 입력무시
ISR(TIMER0_OVF_vect)
{
	++cnt;
  ea:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <cnt+0x1>
  ee:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <cnt>
  f2:	07 c0       	rjmp	.+14     	; 0x102 <__vector_16+0x3a>
	if (cnt == 1000)
	{
		 cnt = 0; //카운트 리셋
  f4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <cnt+0x1>
  f8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <cnt>
		 EIMSK = 0x0C; // 인터럽트를 살린다
  fc:	8c e0       	ldi	r24, 0x0C	; 12
  fe:	89 bf       	out	0x39, r24	; 57
		 TCCR0 = 0x00; // 타이머 인터럽트 정지
 100:	13 be       	out	0x33, r1	; 51
	}
}
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	2f 91       	pop	r18
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <__vector_3>:

ISR(INT2_vect) // move from LSB to MSB
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
 11e:	9f 93       	push	r25
	dir = 1; // 우측이동
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__data_end>
	char rightPattern = (ledPattern >> 1) | (ledPattern << 7);
 126:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
	ledPattern = rightPattern;
 12a:	80 fb       	bst	r24, 0
 12c:	87 95       	ror	r24
 12e:	87 f9       	bld	r24, 7
 130:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>

	TCCR0 = 0x01;                                           
 134:	93 bf       	out	0x33, r25	; 51
	TCNT0 = 0;
 136:	12 be       	out	0x32, r1	; 50
	EIMSK = 0; 
 138:	19 be       	out	0x39, r1	; 57
}
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <__vector_4>:
ISR(INT3_vect)
{
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	8f 93       	push	r24
	dir = 2;
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	char leftPattern = (ledPattern << 1) | (ledPattern >> 7);
 15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
	ledPattern = leftPattern;                                                          
 15e:	88 0f       	add	r24, r24
 160:	81 1d       	adc	r24, r1
 162:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	TCCR0 = 0x01;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
 16a:	12 be       	out	0x32, r1	; 50
	EIMSK = 0;
 16c:	19 be       	out	0x39, r1	; 57
}
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <main>:


int main(void)
{
	//포트 및 오버플로우 인터럽트 설정
	DDRB = 0xff;
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	87 bb       	out	0x17, r24	; 23
	PORTD = 0xff; // led패턴 출력
 17e:	82 bb       	out	0x12, r24	; 18

	EICRA = 0xa0; // 하강엣지설정
 180:	80 ea       	ldi	r24, 0xA0	; 160
 182:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = 0x0c; // 0000_1100
 186:	8c e0       	ldi	r24, 0x0C	; 12
 188:	89 bf       	out	0x39, r24	; 57

	TCCR0 = 0x00; // 타이머 정지 상태
 18a:	13 be       	out	0x33, r1	; 51
	TIMSK = 0x01; // 오버플로우 인터럽트 인에이블
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 0x00;
 190:	12 be       	out	0x32, r1	; 50
	SREG |= 0x80;
 192:	8f b7       	in	r24, 0x3f	; 63
 194:	80 68       	ori	r24, 0x80	; 128
 196:	8f bf       	out	0x3f, r24	; 63

    while (1) 
    {
		PORTB = ledPattern;
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 19c:	88 bb       	out	0x18, r24	; 24
 19e:	fc cf       	rjmp	.-8      	; 0x198 <main+0x1e>

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
