
RX_Interrupt_Basic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000905  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000805  00000000  00000000  00000b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c8  00000000  00000000  00001356  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00001620  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003db  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000de  00000000  00000000  00001a97  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001b75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	2e c0       	rjmp	.+92     	; 0xa6 <__vector_18>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	56 d0       	rcall	.+172    	; 0x146 <main>
  9a:	57 c0       	rjmp	.+174    	; 0x14a <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <TX_Data>:
#include <util/delay.h>
#include <avr/interrupt.h>

void TX_Data(char ch)
{
	while (!(UCSR0A & (0x01 << UDRE0))); // UDR이 비게 되어 송신 가능한 상태가 되면(1이 되면) 루프탈출
  9e:	5d 9b       	sbis	0x0b, 5	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <TX_Data>
	UDR0 = ch; // 송신하고자하는 데이터를 버퍼에 쓴다.(그러면 송신이 이루어진다)
  a2:	8c b9       	out	0x0c, r24	; 12
  a4:	08 95       	ret

000000a6 <__vector_18>:
}

ISR(USART0_RX_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	0b b6       	in	r0, 0x3b	; 59
  b2:	0f 92       	push	r0
  b4:	2f 93       	push	r18
  b6:	3f 93       	push	r19
  b8:	4f 93       	push	r20
  ba:	5f 93       	push	r21
  bc:	6f 93       	push	r22
  be:	7f 93       	push	r23
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
  c4:	af 93       	push	r26
  c6:	bf 93       	push	r27
  c8:	ef 93       	push	r30
  ca:	ff 93       	push	r31
	char data;
	data = UDR0; // read the UDR buf and store it
  cc:	8c b1       	in	r24, 0x0c	; 12
	//TX_Data(data); // echo-back
	if (data == 'Y' || data == 'y')
  ce:	8f 7d       	andi	r24, 0xDF	; 223
  d0:	89 35       	cpi	r24, 0x59	; 89
  d2:	49 f4       	brne	.+18     	; 0xe6 <__vector_18+0x40>
	{
		PORTB = 0xFF;
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	88 bb       	out	0x18, r24	; 24
		TX_Data('O');
  d8:	8f e4       	ldi	r24, 0x4F	; 79
  da:	e1 df       	rcall	.-62     	; 0x9e <TX_Data>
		TX_Data('N');
  dc:	8e e4       	ldi	r24, 0x4E	; 78
  de:	df df       	rcall	.-66     	; 0x9e <TX_Data>
		TX_Data('\r');
  e0:	8d e0       	ldi	r24, 0x0D	; 13
  e2:	dd df       	rcall	.-70     	; 0x9e <TX_Data>
  e4:	0b c0       	rjmp	.+22     	; 0xfc <__vector_18+0x56>
  e6:	8e 34       	cpi	r24, 0x4E	; 78
	}
	else if (data == 'N' || data == 'n')
  e8:	49 f4       	brne	.+18     	; 0xfc <__vector_18+0x56>
	{
		PORTB = 0x00;
  ea:	18 ba       	out	0x18, r1	; 24
		TX_Data('O');
  ec:	8f e4       	ldi	r24, 0x4F	; 79
  ee:	d7 df       	rcall	.-82     	; 0x9e <TX_Data>
		TX_Data('F');
  f0:	86 e4       	ldi	r24, 0x46	; 70
  f2:	d5 df       	rcall	.-86     	; 0x9e <TX_Data>
		TX_Data('F');
  f4:	86 e4       	ldi	r24, 0x46	; 70
  f6:	d3 df       	rcall	.-90     	; 0x9e <TX_Data>
  f8:	8d e0       	ldi	r24, 0x0D	; 13
		TX_Data('\r');
  fa:	d1 df       	rcall	.-94     	; 0x9e <TX_Data>
  fc:	ff 91       	pop	r31
  fe:	ef 91       	pop	r30
	}
}
 100:	bf 91       	pop	r27
 102:	af 91       	pop	r26
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	7f 91       	pop	r23
 10a:	6f 91       	pop	r22
 10c:	5f 91       	pop	r21
 10e:	4f 91       	pop	r20
 110:	3f 91       	pop	r19
 112:	2f 91       	pop	r18
 114:	0f 90       	pop	r0
 116:	0b be       	out	0x3b, r0	; 59
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <INIT>:
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	87 bb       	out	0x17, r24	; 23


void INIT()
{
	DDRB = 0xFF;
	PORTB = 0x00;
 126:	18 ba       	out	0x18, r1	; 24
	
	UBRR0H = 0x00; //상위 4비트에 207을 쓸수 없다
 128:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207; //9600bps at 2x mode
 12c:	8f ec       	ldi	r24, 0xCF	; 207
 12e:	89 b9       	out	0x09, r24	; 9
	UCSR0A = (0x01 << U2X0); // 2배속 모드
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	8b b9       	out	0x0b, r24	; 11
	UCSR0B = (0x01 << RXCIE0) | (0x01 << RXEN0) | (0x01 << TXEN0); //수신 완료 인터럽트, 수신기능, 송신기능
 134:	88 e9       	ldi	r24, 0x98	; 152
 136:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (0x01 << UCSZ00) | (0x01 << UCSZ01); // 비동기, 노패리티, 1정지비트 8비트 송수신모드
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	SREG |= 0x80; //전역 인터럽트 발생허용
 13e:	8f b7       	in	r24, 0x3f	; 63
 140:	80 68       	ori	r24, 0x80	; 128
 142:	8f bf       	out	0x3f, r24	; 63
 144:	08 95       	ret

00000146 <main>:
}


int main(void)
{
	INIT();
 146:	ed df       	rcall	.-38     	; 0x122 <INIT>
 148:	ff cf       	rjmp	.-2      	; 0x148 <main+0x2>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
