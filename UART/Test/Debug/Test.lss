
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800100  00000320  000003b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000320  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000294  0080021e  0080021e  000004d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b24  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f7  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000435  00000000  00000000  000019af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001de4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b4  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000274  00000000  00000000  0000238c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002600  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3f c0       	rjmp	.+126    	; 0xc8 <__vector_18>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	88 c0       	rjmp	.+272    	; 0x18e <__vector_31>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e2       	ldi	r30, 0x20	; 32
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 31       	cpi	r26, 0x1E	; 30
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	24 e0       	ldi	r18, 0x04	; 4
  b4:	ae e1       	ldi	r26, 0x1E	; 30
  b6:	b2 e0       	ldi	r27, 0x02	; 2
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 3b       	cpi	r26, 0xB2	; 178
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f5 d0       	rcall	.+490    	; 0x2ae <main>
  c4:	2b c1       	rjmp	.+598    	; 0x31c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_18>:
//char tx_data[10] = {0x7E, 0xFF, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF};
//char Init_data[10] = {0x7E, 0xFF, 0x06, 0x09, 0x00, 0x00, 0x02, 0xFE, 0xEF, 0xEF};
//char PLAY_data[10] = {0x7E, 0xFF, 0x06, 0x0D, 0x00, 0x00, 0x00, 0xFE, 0xED, 0xEF};

ISR(USART0_RX_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	ef 93       	push	r30
  dc:	ff 93       	push	r31
	char ch = 0;
	ch = UDR0;
  de:	9c b1       	in	r25, 0x0c	; 12
	buf[rx_index++] = ch;
  e0:	e0 91 27 02 	lds	r30, 0x0227	; 0x800227 <rx_index>
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	8e 0f       	add	r24, r30
  e8:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <rx_index>
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	ea 57       	subi	r30, 0x7A	; 122
  f0:	fc 4f       	sbci	r31, 0xFC	; 252
  f2:	90 83       	st	Z, r25

	if(ch == '\r')
  f4:	9d 30       	cpi	r25, 0x0D	; 13
  f6:	51 f4       	brne	.+20     	; 0x10c <__vector_18+0x44>
	{
		buf[rx_index-1] = 0;
  f8:	e8 2f       	mov	r30, r24
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	eb 57       	subi	r30, 0x7B	; 123
  fe:	fc 4f       	sbci	r31, 0xFC	; 252
 100:	10 82       	st	Z, r1
		rx_index = 0;
 102:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <rx_index>
		rx_complete = 1;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
	}
}
 10c:	ff 91       	pop	r31
 10e:	ef 91       	pop	r30
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0b be       	out	0x3b, r0	; 59
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <__vector_19>:


ISR(USART0_UDRE_vect)
{
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	0b b6       	in	r0, 0x3b	; 59
 12e:	0f 92       	push	r0
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
	UDR0 = tx_buf[tx_index++];
 13c:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <tx_index>
 140:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <tx_index+0x1>
 144:	9c 01       	movw	r18, r24
 146:	2f 5f       	subi	r18, 0xFF	; 255
 148:	3f 4f       	sbci	r19, 0xFF	; 255
 14a:	30 93 24 02 	sts	0x0224, r19	; 0x800224 <tx_index+0x1>
 14e:	20 93 23 02 	sts	0x0223, r18	; 0x800223 <tx_index>
 152:	fc 01       	movw	r30, r24
 154:	e6 5a       	subi	r30, 0xA6	; 166
 156:	fd 4f       	sbci	r31, 0xFD	; 253
 158:	80 81       	ld	r24, Z
 15a:	8c b9       	out	0x0c, r24	; 12

	if(tx_index == tx_len)
 15c:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <tx_index>
 160:	30 91 24 02 	lds	r19, 0x0224	; 0x800224 <tx_index+0x1>
 164:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <tx_len>
 168:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <tx_len+0x1>
 16c:	28 17       	cp	r18, r24
 16e:	39 07       	cpc	r19, r25
 170:	09 f4       	brne	.+2      	; 0x174 <__vector_19+0x52>
	UCSR0B &= ~(0x01 << UDRIE0);
 172:	55 98       	cbi	0x0a, 5	; 10
}
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	3f 91       	pop	r19
 17e:	2f 91       	pop	r18
 180:	0f 90       	pop	r0
 182:	0b be       	out	0x3b, r0	; 59
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_31>:


ISR(USART1_UDRE_vect)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	0b b6       	in	r0, 0x3b	; 59
 19a:	0f 92       	push	r0
 19c:	2f 93       	push	r18
 19e:	3f 93       	push	r19
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
	UDR1 = tx1_buf[tx1_index++];
 1a8:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <tx1_index>
 1ac:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <tx1_index+0x1>
 1b0:	9c 01       	movw	r18, r24
 1b2:	2f 5f       	subi	r18, 0xFF	; 255
 1b4:	3f 4f       	sbci	r19, 0xFF	; 255
 1b6:	30 93 20 02 	sts	0x0220, r19	; 0x800220 <tx1_index+0x1>
 1ba:	20 93 1f 02 	sts	0x021F, r18	; 0x80021f <tx1_index>
 1be:	fc 01       	movw	r30, r24
 1c0:	e8 5d       	subi	r30, 0xD8	; 216
 1c2:	fd 4f       	sbci	r31, 0xFD	; 253
 1c4:	80 81       	ld	r24, Z
 1c6:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>

	if(tx1_index == tx1_len)
 1ca:	20 91 1f 02 	lds	r18, 0x021F	; 0x80021f <tx1_index>
 1ce:	30 91 20 02 	lds	r19, 0x0220	; 0x800220 <tx1_index+0x1>
 1d2:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <tx1_len>
 1d6:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <tx1_len+0x1>
 1da:	28 17       	cp	r18, r24
 1dc:	39 07       	cpc	r19, r25
 1de:	29 f4       	brne	.+10     	; 0x1ea <__vector_31+0x5c>
	{
		UCSR1B &= ~(0x01 << UDRIE1);
 1e0:	ea e9       	ldi	r30, 0x9A	; 154
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	8f 7d       	andi	r24, 0xDF	; 223
 1e8:	80 83       	st	Z, r24
	}
}
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	9f 91       	pop	r25
 1f0:	8f 91       	pop	r24
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0b be       	out	0x3b, r0	; 59
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <UART0_PutsInt>:


void UART0_PutsInt(char str[])
{
	tx_len = strlen(str);
 204:	fc 01       	movw	r30, r24
 206:	01 90       	ld	r0, Z+
 208:	00 20       	and	r0, r0
 20a:	e9 f7       	brne	.-6      	; 0x206 <UART0_PutsInt+0x2>
 20c:	31 97       	sbiw	r30, 0x01	; 1
 20e:	e8 1b       	sub	r30, r24
 210:	f9 0b       	sbc	r31, r25
 212:	f0 93 26 02 	sts	0x0226, r31	; 0x800226 <tx_len+0x1>
 216:	e0 93 25 02 	sts	0x0225, r30	; 0x800225 <tx_len>
	strcpy(tx_buf, str);
 21a:	bc 01       	movw	r22, r24
 21c:	8a e5       	ldi	r24, 0x5A	; 90
 21e:	92 e0       	ldi	r25, 0x02	; 2
 220:	76 d0       	rcall	.+236    	; 0x30e <strcpy>
	tx_index = 0;
 222:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <tx_index+0x1>
 226:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <tx_index>

	UCSR0B |= (0x01 << UDRIE0);
 22a:	55 9a       	sbi	0x0a, 5	; 10
 22c:	08 95       	ret

0000022e <Send_tx_data>:

void Send_tx_data(char cmd)
{
	int checksum = 0;
	
	tx1_buf[0] = 0x7E;		//Start byte(0x7E)
 22e:	e8 e2       	ldi	r30, 0x28	; 40
 230:	f2 e0       	ldi	r31, 0x02	; 2
 232:	9e e7       	ldi	r25, 0x7E	; 126
 234:	90 83       	st	Z, r25
	tx1_buf[1] = 0xFF;		//Version(0xFF)
 236:	9f ef       	ldi	r25, 0xFF	; 255
 238:	91 83       	std	Z+1, r25	; 0x01
	tx1_buf[2] = 0x06;		//Len(command~checksum)
 23a:	96 e0       	ldi	r25, 0x06	; 6
 23c:	92 83       	std	Z+2, r25	; 0x02
	tx1_buf[3] = cmd;		//Command
 23e:	83 83       	std	Z+3, r24	; 0x03
	tx1_buf[4] = 0x00;		//Feedback
 240:	14 82       	std	Z+4, r1	; 0x04
	tx1_buf[5] = 0x00;		//Parameter1
 242:	15 82       	std	Z+5, r1	; 0x05

	if(cmd == CMD_TF)
 244:	89 30       	cpi	r24, 0x09	; 9
 246:	31 f4       	brne	.+12     	; 0x254 <Send_tx_data+0x26>
	{
		tx1_buf[6] = 0x02;		//Parameter2
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <tx1_buf+0x6>
		checksum = 0 - (0xFF + 0x06 + cmd + 0x02);
 24e:	80 ef       	ldi	r24, 0xF0	; 240
 250:	9e ef       	ldi	r25, 0xFE	; 254
 252:	08 c0       	rjmp	.+16     	; 0x264 <Send_tx_data+0x36>
	}
	else
	{
		tx1_buf[6] = 0x00;		//Parameter2
 254:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <tx1_buf+0x6>
		checksum = 0 - (0xFF + 0x06 + cmd);
 258:	2b ef       	ldi	r18, 0xFB	; 251
 25a:	3e ef       	ldi	r19, 0xFE	; 254
 25c:	a9 01       	movw	r20, r18
 25e:	48 1b       	sub	r20, r24
 260:	51 09       	sbc	r21, r1
 262:	ca 01       	movw	r24, r20
	}

	tx1_buf[7] = ((char)(checksum >> 8));		//ChecksumH
 264:	e8 e2       	ldi	r30, 0x28	; 40
 266:	f2 e0       	ldi	r31, 0x02	; 2
 268:	97 83       	std	Z+7, r25	; 0x07
	tx1_buf[8] = (checksum & 0xFF);		//ChecksumL
 26a:	80 87       	std	Z+8, r24	; 0x08
	tx1_buf[9] = 0xEF;		//End(0xEF)
 26c:	8f ee       	ldi	r24, 0xEF	; 239
 26e:	81 87       	std	Z+9, r24	; 0x09
	
	tx1_len = 10;
 270:	8a e0       	ldi	r24, 0x0A	; 10
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <tx1_len+0x1>
 278:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <tx1_len>
	tx1_index = 0;
 27c:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <tx1_index+0x1>
 280:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <tx1_index>

	UCSR1B |= (0x01 << UDRIE1);
 284:	ea e9       	ldi	r30, 0x9A	; 154
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	80 62       	ori	r24, 0x20	; 32
 28c:	80 83       	st	Z, r24
 28e:	08 95       	ret

00000290 <UART_Init>:
}


void UART_Init(void)
{
	UCSR0B = ((0x01 << RXCIE0) | (0x01 << RXEN0) | (0x01 << TXEN0));
 290:	88 e9       	ldi	r24, 0x98	; 152
 292:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = ((0x01 << UCSZ01) | (0x01 << UCSZ00));
 294:	96 e0       	ldi	r25, 0x06	; 6
 296:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0L = 103;
 29a:	87 e6       	ldi	r24, 0x67	; 103
 29c:	89 b9       	out	0x09, r24	; 9

	UCSR1B = (0x01 << TXEN1);
 29e:	28 e0       	ldi	r18, 0x08	; 8
 2a0:	20 93 9a 00 	sts	0x009A, r18	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = ((0x01 << UCSZ11) | (0x01 << UCSZ10));
 2a4:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	UBRR1L = 103;
 2a8:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 2ac:	08 95       	ret

000002ae <main>:
}


int main(void)
{
	UART_Init();
 2ae:	f0 df       	rcall	.-32     	; 0x290 <UART_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b0:	2f ef       	ldi	r18, 0xFF	; 255
 2b2:	83 ec       	ldi	r24, 0xC3	; 195
 2b4:	99 e0       	ldi	r25, 0x09	; 9
 2b6:	21 50       	subi	r18, 0x01	; 1
 2b8:	80 40       	sbci	r24, 0x00	; 0
 2ba:	90 40       	sbci	r25, 0x00	; 0
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <main+0x8>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <main+0x12>
 2c0:	00 00       	nop

	_delay_ms(200);

	rx_index = 0;
 2c2:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <rx_index>
	rx_complete = 0;
 2c6:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <__data_end>
	tx_index = 0;
 2ca:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <tx_index+0x1>
 2ce:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <tx_index>
	tx1_index = 0;
 2d2:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <tx1_index+0x1>
 2d6:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <tx1_index>

	sei();
 2da:	78 94       	sei
	
	UART0_PutsInt(DispMenu);
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	91 df       	rcall	.-222    	; 0x204 <UART0_PutsInt>
	Send_tx_data(CMD_TF);
 2e2:	89 e0       	ldi	r24, 0x09	; 9
 2e4:	a4 df       	rcall	.-184    	; 0x22e <Send_tx_data>
 2e6:	c6 e8       	ldi	r28, 0x86	; 134
	
	while(1)
	{
		if(rx_complete)
		{
			Send_tx_data(cmd_list[buf[0] - '0' - 1]);
 2e8:	d3 e0       	ldi	r29, 0x03	; 3
 2ea:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
	UART0_PutsInt(DispMenu);
	Send_tx_data(CMD_TF);
	
	while(1)
	{
		if(rx_complete)
 2ee:	88 23       	and	r24, r24
 2f0:	e1 f3       	breq	.-8      	; 0x2ea <main+0x3c>
 2f2:	e8 81       	ld	r30, Y
		{
			Send_tx_data(cmd_list[buf[0] - '0' - 1]);
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	ed 51       	subi	r30, 0x1D	; 29
 2f8:	fe 4f       	sbci	r31, 0xFE	; 254
 2fa:	80 81       	ld	r24, Z
 2fc:	98 df       	rcall	.-208    	; 0x22e <Send_tx_data>
			UART0_PutsInt(buf);
 2fe:	ce 01       	movw	r24, r28
 300:	81 df       	rcall	.-254    	; 0x204 <UART0_PutsInt>
			UART0_PutsInt(DispMenu);
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	7e df       	rcall	.-260    	; 0x204 <UART0_PutsInt>
 308:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <__data_end>
			rx_complete = 0;
 30c:	ee cf       	rjmp	.-36     	; 0x2ea <main+0x3c>

0000030e <strcpy>:
 30e:	fb 01       	movw	r30, r22
 310:	dc 01       	movw	r26, r24
 312:	01 90       	ld	r0, Z+
 314:	0d 92       	st	X+, r0
 316:	00 20       	and	r0, r0
 318:	e1 f7       	brne	.-8      	; 0x312 <strcpy+0x4>
 31a:	08 95       	ret

0000031c <_exit>:
 31c:	f8 94       	cli

0000031e <__stop_program>:
 31e:	ff cf       	rjmp	.-2      	; 0x31e <__stop_program>
