
RXBasic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000180  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000066  00800100  00800100  000001f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000996  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000869  00000000  00000000  00000c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000367  00000000  00000000  000014b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  0000181c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040e  00000000  00000000  000018f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000213  00000000  00000000  00001d06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001f19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	51 c0       	rjmp	.+162    	; 0xec <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e8       	ldi	r30, 0x80	; 128
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 36       	cpi	r26, 0x66	; 102
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	42 d0       	rcall	.+132    	; 0x148 <main>
  c4:	5b c0       	rjmp	.+182    	; 0x17c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <UART_Putch>:
		str[i] = UART_Getch();
		UART_Putch(str[i]); // echo to reflect
	} while(str[i++] != '\r' && str[i++] != '\n');
	UART_Puts("\r\n"); // move cursor to the end of string character
	str[i - 1] = 0; // add NULL char in the '\r' position to avoid moving cursor to the first
}
  c8:	5d 9b       	sbis	0x0b, 5	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <UART_Putch>
  cc:	8c b9       	out	0x0c, r24	; 12
  ce:	08 95       	ret

000000d0 <UART_Puts>:
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	ec 01       	movw	r28, r24
  d6:	88 81       	ld	r24, Y
  d8:	88 23       	and	r24, r24
  da:	29 f0       	breq	.+10     	; 0xe6 <UART_Puts+0x16>
  dc:	21 96       	adiw	r28, 0x01	; 1
  de:	f4 df       	rcall	.-24     	; 0xc8 <UART_Putch>
  e0:	89 91       	ld	r24, Y+
  e2:	81 11       	cpse	r24, r1
  e4:	fc cf       	rjmp	.-8      	; 0xde <UART_Puts+0xe>
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <__vector_18>:
{
	PORTB = UDR0;
}*/

ISR(USART0_RX_vect)
{
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	0b b6       	in	r0, 0x3b	; 59
  f8:	0f 92       	push	r0
  fa:	8f 93       	push	r24
  fc:	af 93       	push	r26
  fe:	bf 93       	push	r27
 100:	ef 93       	push	r30
 102:	ff 93       	push	r31
	buf[index] = UDR0;
 104:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <index>
 108:	8c b1       	in	r24, 0x0c	; 12
 10a:	ae 2f       	mov	r26, r30
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	ae 5f       	subi	r26, 0xFE	; 254
 110:	be 4f       	sbci	r27, 0xFE	; 254
 112:	8c 93       	st	X, r24
	if (buf[index++] == '\r') // if line feed come at this index
 114:	ef 5f       	subi	r30, 0xFF	; 255
 116:	e0 93 01 01 	sts	0x0101, r30	; 0x800101 <index>
 11a:	8d 30       	cpi	r24, 0x0D	; 13
 11c:	49 f4       	brne	.+18     	; 0x130 <__vector_18+0x44>
	{
		buf[index - 1] = 0; // add null to the end
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	ef 5f       	subi	r30, 0xFF	; 255
 122:	fe 4f       	sbci	r31, 0xFE	; 254
 124:	10 82       	st	Z, r1
		index = 0; // re-new index
 126:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <index>
		rx_complete = 1; // Rx complete
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	}
}
 130:	ff 91       	pop	r31
 132:	ef 91       	pop	r30
 134:	bf 91       	pop	r27
 136:	af 91       	pop	r26
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0b be       	out	0x3b, r0	; 59
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <main>:



int main(void)
{
	DDRB = 0xFF;
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	87 bb       	out	0x17, r24	; 23

	// set for RX reg.
    UCSR0B = 0x98;
 14c:	88 e9       	ldi	r24, 0x98	; 152
 14e:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0L = 103;
 156:	87 e6       	ldi	r24, 0x67	; 103
 158:	89 b9       	out	0x09, r24	; 9
	index = 0;
 15a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <index>
	rx_complete = 0;
 15e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
	SREG |= 0x80;
 162:	8f b7       	in	r24, 0x3f	; 63
 164:	80 68       	ori	r24, 0x80	; 128
 166:	8f bf       	out	0x3f, r24	; 63

    while (1) 
    {
		if(rx_complete == 1)
 168:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0x20>
		{
			UART_Puts(buf);
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	ad df       	rcall	.-166    	; 0xd0 <UART_Puts>
			rx_complete = 0; // wait RX again
 176:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
 17a:	f6 cf       	rjmp	.-20     	; 0x168 <main+0x20>

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
