
TXBasic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ce  00800100  00800100  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a3e  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087b  00000000  00000000  00000d92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c1  00000000  00000000  0000160d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  000019d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000449  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e0  00000000  00000000  00001f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002229  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3f c0       	rjmp	.+126    	; 0xc8 <__vector_18>
  4a:	00 00       	nop
  4c:	76 c0       	rjmp	.+236    	; 0x13a <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e1       	ldi	r30, 0x10	; 16
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 3c       	cpi	r26, 0xCE	; 206
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	83 d0       	rcall	.+262    	; 0x1ca <main>
  c4:	a3 c0       	rjmp	.+326    	; 0x20c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_18>:
volatile char rx_complete = 0; // flag: 1 for complete, 0 for waiting
int tx_index;
char tx_len;

ISR(USART0_RX_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	2f 93       	push	r18
  d8:	4f 93       	push	r20
  da:	5f 93       	push	r21
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	buf[rx_index] = UDR0;
  e4:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <rx_index>
  e8:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <rx_index+0x1>
  ec:	2c b1       	in	r18, 0x0c	; 12
  ee:	fc 01       	movw	r30, r24
  f0:	eb 59       	subi	r30, 0x9B	; 155
  f2:	fe 4f       	sbci	r31, 0xFE	; 254
  f4:	20 83       	st	Z, r18
	if (buf[rx_index++] == '\r') // if line feed come at this index
  f6:	ac 01       	movw	r20, r24
  f8:	4f 5f       	subi	r20, 0xFF	; 255
  fa:	5f 4f       	sbci	r21, 0xFF	; 255
  fc:	50 93 ca 01 	sts	0x01CA, r21	; 0x8001ca <rx_index+0x1>
 100:	40 93 c9 01 	sts	0x01C9, r20	; 0x8001c9 <rx_index>
 104:	2d 30       	cpi	r18, 0x0D	; 13
 106:	59 f4       	brne	.+22     	; 0x11e <__vector_18+0x56>
	{
		buf[rx_index - 1] = 0; // add null to the end
 108:	fc 01       	movw	r30, r24
 10a:	eb 59       	subi	r30, 0x9B	; 155
 10c:	fe 4f       	sbci	r31, 0xFE	; 254
 10e:	10 82       	st	Z, r1
		rx_index = 0; // re-new index
 110:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <rx_index+0x1>
 114:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <rx_index>
		rx_complete = 1; // Rx complete
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	}
}
 11e:	ff 91       	pop	r31
 120:	ef 91       	pop	r30
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	5f 91       	pop	r21
 128:	4f 91       	pop	r20
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0b be       	out	0x3b, r0	; 59
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <__vector_19>:


ISR(USART0_UDRE_vect) // INT for RX
{
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	0b b6       	in	r0, 0x3b	; 59
 146:	0f 92       	push	r0
 148:	2f 93       	push	r18
 14a:	3f 93       	push	r19
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
	UDR0 = tx_buf[tx_index++];
 154:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <tx_index>
 158:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <tx_index+0x1>
 15c:	9c 01       	movw	r18, r24
 15e:	2f 5f       	subi	r18, 0xFF	; 255
 160:	3f 4f       	sbci	r19, 0xFF	; 255
 162:	30 93 cc 01 	sts	0x01CC, r19	; 0x8001cc <tx_index+0x1>
 166:	20 93 cb 01 	sts	0x01CB, r18	; 0x8001cb <tx_index>
 16a:	fc 01       	movw	r30, r24
 16c:	ef 5f       	subi	r30, 0xFF	; 255
 16e:	fe 4f       	sbci	r31, 0xFE	; 254
 170:	80 81       	ld	r24, Z
 172:	8c b9       	out	0x0c, r24	; 12

	if (tx_index == tx_len)
 174:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <tx_len>
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	20 91 cb 01 	lds	r18, 0x01CB	; 0x8001cb <tx_index>
 17e:	30 91 cc 01 	lds	r19, 0x01CC	; 0x8001cc <tx_index+0x1>
 182:	82 17       	cp	r24, r18
 184:	93 07       	cpc	r25, r19
 186:	09 f4       	brne	.+2      	; 0x18a <__vector_19+0x50>
		UCSR0B &= ~(1 << UDRIE0); // turn-off RX INT
 188:	55 98       	cbi	0x0a, 5	; 10
	
}
 18a:	ff 91       	pop	r31
 18c:	ef 91       	pop	r30
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	3f 91       	pop	r19
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0b be       	out	0x3b, r0	; 59
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <UART_PutInt>:


void UART_PutInt(char str[])
{
	tx_len = strlen(str); // calc the length of string delivered
 1a4:	fc 01       	movw	r30, r24
 1a6:	01 90       	ld	r0, Z+
 1a8:	00 20       	and	r0, r0
 1aa:	e9 f7       	brne	.-6      	; 0x1a6 <UART_PutInt+0x2>
 1ac:	31 97       	sbiw	r30, 0x01	; 1
 1ae:	e8 1b       	sub	r30, r24
 1b0:	f9 0b       	sbc	r31, r25
 1b2:	e0 93 cd 01 	sts	0x01CD, r30	; 0x8001cd <tx_len>
	strcpy(tx_buf, str); // copy the string delivered to transmit buffer
 1b6:	bc 01       	movw	r22, r24
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	20 d0       	rcall	.+64     	; 0x1fe <strcpy>
	tx_index = 0; // empty buffer
 1be:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <tx_index+0x1>
 1c2:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <tx_index>
	UCSR0B |= (1 << UDRIE0); // turn-on RX INT
 1c6:	55 9a       	sbi	0x0a, 5	; 10
 1c8:	08 95       	ret

000001ca <main>:

int main(void)
{
	
	// set for RX reg.
	UCSR0B = 0x98;
 1ca:	88 e9       	ldi	r24, 0x98	; 152
 1cc:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;
 1ce:	86 e0       	ldi	r24, 0x06	; 6
 1d0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0L = 103;
 1d4:	87 e6       	ldi	r24, 0x67	; 103
 1d6:	89 b9       	out	0x09, r24	; 9
	rx_index = 0;
 1d8:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <rx_index+0x1>
 1dc:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <rx_index>
	rx_complete = 0;
 1e0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
	SREG |= 0x80;
 1e4:	8f b7       	in	r24, 0x3f	; 63
 1e6:	80 68       	ori	r24, 0x80	; 128
 1e8:	8f bf       	out	0x3f, r24	; 63
	
	while (1)
	{
		if (rx_complete == 1)
 1ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <main+0x20>
		{
		UART_PutInt(buf);
 1f2:	85 e6       	ldi	r24, 0x65	; 101
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	d6 df       	rcall	.-84     	; 0x1a4 <UART_PutInt>
		rx_complete = 0;
 1f8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
 1fc:	f6 cf       	rjmp	.-20     	; 0x1ea <main+0x20>

000001fe <strcpy>:
 1fe:	fb 01       	movw	r30, r22
 200:	dc 01       	movw	r26, r24
 202:	01 90       	ld	r0, Z+
 204:	0d 92       	st	X+, r0
 206:	00 20       	and	r0, r0
 208:	e1 f7       	brne	.-8      	; 0x202 <strcpy+0x4>
 20a:	08 95       	ret

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
