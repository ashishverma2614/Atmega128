
TXBasic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000023c  000002d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d4  0080011c  0080011c  000002ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b85  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091e  00000000  00000000  00000f49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f0  00000000  00000000  00001867  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00001c58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048c  00000000  00000000  00001d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000306  00000000  00000000  00002224  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000252a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	47 c0       	rjmp	.+142    	; 0xd8 <__vector_18>
  4a:	00 00       	nop
  4c:	7e c0       	rjmp	.+252    	; 0x14a <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e3       	ldi	r30, 0x3C	; 60
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 31       	cpi	r26, 0x1C	; 28
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e1       	ldi	r26, 0x1C	; 28
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 3f       	cpi	r26, 0xF0	; 240
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	9c d0       	rcall	.+312    	; 0x1fc <main>
  c4:	b9 c0       	rjmp	.+370    	; 0x238 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <UART_Putch>:
		str[i] = UART_Getch();
		UART_Putch(str[i]); // echo to reflect
	} while(str[i++] != '\r' && str[i++] != '\n');
	UART_Puts("\r\n"); // move cursor to the end of string character
	str[i - 1] = 0; // add NULL char in the '\r' position to avoid moving cursor to the first
}
  c8:	5d 9b       	sbis	0x0b, 5	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <UART_Putch>
  cc:	8c b9       	out	0x0c, r24	; 12
  ce:	08 95       	ret

000000d0 <UART_Getch>:
  d0:	5f 9b       	sbis	0x0b, 7	; 11
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <UART_Getch>
  d4:	8c b1       	in	r24, 0x0c	; 12
  d6:	08 95       	ret

000000d8 <__vector_18>:

FILE OUTPUT = FDEV_SETUP_STREAM(UART_Putch, NULL, _FDEV_SETUP_WRITE);
FILE INPUT = FDEV_SETUP_STREAM(NULL, UART_Getch, _FDEV_SETUP_READ);

ISR(USART0_RX_vect) // isr for RX
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	0b b6       	in	r0, 0x3b	; 59
  e4:	0f 92       	push	r0
  e6:	2f 93       	push	r18
  e8:	4f 93       	push	r20
  ea:	5f 93       	push	r21
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
	buf[rx_index] = UDR0;
  f4:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <rx_index>
  f8:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <rx_index+0x1>
  fc:	2c b1       	in	r18, 0x0c	; 12
  fe:	fc 01       	movw	r30, r24
 100:	ef 57       	subi	r30, 0x7F	; 127
 102:	fe 4f       	sbci	r31, 0xFE	; 254
 104:	20 83       	st	Z, r18
	if (buf[rx_index++] == '\r') // if line feed come at this index
 106:	ac 01       	movw	r20, r24
 108:	4f 5f       	subi	r20, 0xFF	; 255
 10a:	5f 4f       	sbci	r21, 0xFF	; 255
 10c:	50 93 e6 01 	sts	0x01E6, r21	; 0x8001e6 <rx_index+0x1>
 110:	40 93 e5 01 	sts	0x01E5, r20	; 0x8001e5 <rx_index>
 114:	2d 30       	cpi	r18, 0x0D	; 13
 116:	59 f4       	brne	.+22     	; 0x12e <__vector_18+0x56>
	{
		buf[rx_index - 1] = 0; // add null to the end
 118:	fc 01       	movw	r30, r24
 11a:	ef 57       	subi	r30, 0x7F	; 127
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	10 82       	st	Z, r1
		rx_index = 0; // re-new index
 120:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <rx_index+0x1>
 124:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <rx_index>
		rx_complete = 1; // flag for RX completion
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
	}
}
 12e:	ff 91       	pop	r31
 130:	ef 91       	pop	r30
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	5f 91       	pop	r21
 138:	4f 91       	pop	r20
 13a:	2f 91       	pop	r18
 13c:	0f 90       	pop	r0
 13e:	0b be       	out	0x3b, r0	; 59
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <__vector_19>:


ISR(USART0_UDRE_vect) // if UDRE becomes empty, ISR(USART0_RX_vect) jumps here
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	0b b6       	in	r0, 0x3b	; 59
 156:	0f 92       	push	r0
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	ef 93       	push	r30
 162:	ff 93       	push	r31
	UDR0 = tx_buf[tx_index++]; // write the contents in the tx_buf[] to the UDR0(TX)
 164:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <tx_index>
 168:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <tx_index+0x1>
 16c:	9c 01       	movw	r18, r24
 16e:	2f 5f       	subi	r18, 0xFF	; 255
 170:	3f 4f       	sbci	r19, 0xFF	; 255
 172:	30 93 e8 01 	sts	0x01E8, r19	; 0x8001e8 <tx_index+0x1>
 176:	20 93 e7 01 	sts	0x01E7, r18	; 0x8001e7 <tx_index>
 17a:	fc 01       	movw	r30, r24
 17c:	e3 5e       	subi	r30, 0xE3	; 227
 17e:	fe 4f       	sbci	r31, 0xFE	; 254
 180:	80 81       	ld	r24, Z
 182:	8c b9       	out	0x0c, r24	; 12

	if (tx_index == tx_len) // if the contents in the tx_buf becomes completely empty
 184:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <tx_len>
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <tx_index>
 18e:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <tx_index+0x1>
 192:	82 17       	cp	r24, r18
 194:	93 07       	cpc	r25, r19
 196:	09 f4       	brne	.+2      	; 0x19a <__vector_19+0x50>
		UCSR0B &= ~(1 << UDRIE0); // end of TX
 198:	55 98       	cbi	0x0a, 5	; 10
}
 19a:	ff 91       	pop	r31
 19c:	ef 91       	pop	r30
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	3f 91       	pop	r19
 1a4:	2f 91       	pop	r18
 1a6:	0f 90       	pop	r0
 1a8:	0b be       	out	0x3b, r0	; 59
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <UART_PutInt>:

void UART_PutInt(char str[])
{
	tx_len = strlen(str); // get the length of string delivered
 1b4:	fc 01       	movw	r30, r24
 1b6:	01 90       	ld	r0, Z+
 1b8:	00 20       	and	r0, r0
 1ba:	e9 f7       	brne	.-6      	; 0x1b6 <UART_PutInt+0x2>
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	e8 1b       	sub	r30, r24
 1c0:	f9 0b       	sbc	r31, r25
 1c2:	e0 93 e9 01 	sts	0x01E9, r30	; 0x8001e9 <tx_len>
	strcpy(tx_buf, str); // copy the string to tx_buf in order to transmit(TX occurs)
 1c6:	bc 01       	movw	r22, r24
 1c8:	8d e1       	ldi	r24, 0x1D	; 29
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	2e d0       	rcall	.+92     	; 0x22a <strcpy>
	tx_index = 0; // empty buffer
 1ce:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <tx_index+0x1>
 1d2:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <tx_index>
	UCSR0B |= (1 << UDRIE0); // it triggers the interrupt that makes UDR0 set(1), meaning UDR is empty
 1d6:	55 9a       	sbi	0x0a, 5	; 10
 1d8:	08 95       	ret

000001da <UART_init>:
}

void UART_init(unsigned int baud)
{
	// set for RX reg.
	UCSR0B = 0x98; // 0b1001_1000(1 << RXCIE + 1 << RXEN + 1 << TXEN)
 1da:	88 e9       	ldi	r24, 0x98	; 152
 1dc:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06; //0b0000_0110(1 << UCSZ01 + 1 << UCSZ00): 8bit mode
 1de:	86 e0       	ldi	r24, 0x06	; 6
 1e0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	//UBRR0H = 0;
	UBRR0L = 103; // baud rate
 1e4:	87 e6       	ldi	r24, 0x67	; 103
 1e6:	89 b9       	out	0x09, r24	; 9
	rx_index = 0; // no contents in the buf
 1e8:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <rx_index+0x1>
 1ec:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <rx_index>
	rx_complete = 0; // no rx
 1f0:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
	SREG |= 0x80;
 1f4:	8f b7       	in	r24, 0x3f	; 63
 1f6:	80 68       	ori	r24, 0x80	; 128
 1f8:	8f bf       	out	0x3f, r24	; 63
 1fa:	08 95       	ret

000001fc <main>:
}

int main(void)
{
	stdout = &OUTPUT;
 1fc:	ea ee       	ldi	r30, 0xEA	; 234
 1fe:	f1 e0       	ldi	r31, 0x01	; 1
 200:	8e e0       	ldi	r24, 0x0E	; 14
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	93 83       	std	Z+3, r25	; 0x03
 206:	82 83       	std	Z+2, r24	; 0x02
	stdin = &INPUT;
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	91 83       	std	Z+1, r25	; 0x01
 20e:	80 83       	st	Z, r24
	UART_init (UBRR_9600_1X);
 210:	87 e6       	ldi	r24, 0x67	; 103
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	e2 df       	rcall	.-60     	; 0x1da <UART_init>
	while (1)
	{
		if (rx_complete == 1) // only if RX takes place
 216:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	e1 f7       	brne	.-8      	; 0x216 <main+0x1a>
		{
		UART_PutInt(buf); // confirm the contents received from RX
 21e:	81 e8       	ldi	r24, 0x81	; 129
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	c8 df       	rcall	.-112    	; 0x1b4 <UART_PutInt>
		rx_complete = 0;
 224:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
 228:	f6 cf       	rjmp	.-20     	; 0x216 <main+0x1a>

0000022a <strcpy>:
 22a:	fb 01       	movw	r30, r22
 22c:	dc 01       	movw	r26, r24
 22e:	01 90       	ld	r0, Z+
 230:	0d 92       	st	X+, r0
 232:	00 20       	and	r0, r0
 234:	e1 f7       	brne	.-8      	; 0x22e <strcpy+0x4>
 236:	08 95       	ret

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
