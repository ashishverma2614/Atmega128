
ServoPollingPratice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000961  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007fd  00000000  00000000  00000b45  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f8  00000000  00000000  00001342  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000163c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000419  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000192  00000000  00000000  00001a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001c0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	2f c0       	rjmp	.+94     	; 0xfa <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:



int main(void)
{
    DDRB = 0x80; // set pin 7 as output
  9e:	80 e8       	ldi	r24, 0x80	; 128
  a0:	87 bb       	out	0x17, r24	; 23
    while (1) 
    {
        // -90degree
        for (int i = 0; i < 25; i++)
        {
            PORTB = 0xFF;
  a2:	2f ef       	ldi	r18, 0xFF	; 255




int main(void)
{
  a4:	89 e1       	ldi	r24, 0x19	; 25
  a6:	90 e0       	ldi	r25, 0x00	; 0
    while (1) 
    {
        // -90degree
        for (int i = 0; i < 25; i++)
        {
            PORTB = 0xFF;
  a8:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	ef ec       	ldi	r30, 0xCF	; 207
  ac:	f7 e0       	ldi	r31, 0x07	; 7
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x10>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x16>
  b4:	00 00       	nop
            _delay_us(500); // 0.5ms
            PORTB = 0x00;
  b6:	18 ba       	out	0x18, r1	; 24
  b8:	ff eb       	ldi	r31, 0xBF	; 191
  ba:	33 ef       	ldi	r19, 0xF3	; 243
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	f1 50       	subi	r31, 0x01	; 1
  c0:	30 40       	sbci	r19, 0x00	; 0
  c2:	40 40       	sbci	r20, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x20>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x2a>
  c8:	00 00       	nop
  ca:	01 97       	sbiw	r24, 0x01	; 1
    DDRB = 0x80; // set pin 7 as output
  
    while (1) 
    {
        // -90degree
        for (int i = 0; i < 25; i++)
  cc:	69 f7       	brne	.-38     	; 0xa8 <main+0xa>
  ce:	89 e1       	ldi	r24, 0x19	; 25
  d0:	90 e0       	ldi	r25, 0x00	; 0
        }*/
        // + 90 degree
        for (int i = 0; i < 25; i++)
        {
            
            PORTB = 0xFF;
  d2:	28 bb       	out	0x18, r18	; 24
  d4:	ef e0       	ldi	r30, 0x0F	; 15
  d6:	f7 e2       	ldi	r31, 0x27	; 39
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <main+0x3a>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x40>
  de:	00 00       	nop
            _delay_us(2500);
            PORTB = 0x00;
  e0:	18 ba       	out	0x18, r1	; 24
  e2:	ff eb       	ldi	r31, 0xBF	; 191
  e4:	3a ed       	ldi	r19, 0xDA	; 218
  e6:	40 e0       	ldi	r20, 0x00	; 0
  e8:	f1 50       	subi	r31, 0x01	; 1
  ea:	30 40       	sbci	r19, 0x00	; 0
  ec:	40 40       	sbci	r20, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x4a>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x54>
  f2:	00 00       	nop
  f4:	01 97       	sbiw	r24, 0x01	; 1
            _delay_us(1500); // 1.5ms
            PORTB = 0x00;
            _delay_us(18500);
        }*/
        // + 90 degree
        for (int i = 0; i < 25; i++)
  f6:	69 f7       	brne	.-38     	; 0xd2 <main+0x34>
  f8:	d5 cf       	rjmp	.-86     	; 0xa4 <main+0x6>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
