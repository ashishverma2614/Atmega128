
Question5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000412  000004a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000412  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080010a  0080010a  000004b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ada  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c6  00000000  00000000  0000105a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000482  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001da4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000486  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000037c  00000000  00000000  0000235e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000026da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5d c0       	rjmp	.+186    	; 0xc8 <__vector_3>
   e:	00 00       	nop
  10:	78 c0       	rjmp	.+240    	; 0x102 <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	92 c0       	rjmp	.+292    	; 0x142 <__vector_7>
  1e:	00 00       	nop
  20:	c9 c0       	rjmp	.+402    	; 0x1b4 <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e1       	ldi	r30, 0x12	; 18
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 31       	cpi	r26, 0x19	; 25
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	18 d1       	rcall	.+560    	; 0x2f4 <main>
  c4:	a4 c1       	rjmp	.+840    	; 0x40e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_3>:
void upCount(void);
void downCount(void);


ISR(INT2_vect) // blink first led
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
	isINT = 1; // move to set Mode
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	fndNum = 0;
  da:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <fndNum+0x1>
  de:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <fndNum>
	cnt = 0;
  e2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <cnt>
  e6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <cnt+0x1>
  ea:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cnt+0x2>
  ee:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <cnt+0x3>
	PORTC = 0x01;
  f2:	85 bb       	out	0x15, r24	; 21
	sei();
  f4:	78 94       	sei
}
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <__vector_4>:
ISR(INT3_vect)
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
	fndNum++;
 110:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <fndNum>
 114:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <fndNum+0x1>
 118:	01 96       	adiw	r24, 0x01	; 1
	if (fndNum == 4)
 11a:	84 30       	cpi	r24, 0x04	; 4
 11c:	91 05       	cpc	r25, r1
 11e:	29 f0       	breq	.+10     	; 0x12a <__vector_4+0x28>
	PORTC = 0x01;
	sei();
}
ISR(INT3_vect)
{
	fndNum++;
 120:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <fndNum+0x1>
 124:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <fndNum>
 128:	04 c0       	rjmp	.+8      	; 0x132 <__vector_4+0x30>
	if (fndNum == 4)
		fndNum = 0;
 12a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <fndNum+0x1>
 12e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <fndNum>
	sei();
 132:	78 94       	sei
}
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <__vector_7>:
ISR(INT6_vect)
{
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	0b b6       	in	r0, 0x3b	; 59
 14e:	0f 92       	push	r0
 150:	2f 93       	push	r18
 152:	3f 93       	push	r19
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	ef 93       	push	r30
 15a:	ff 93       	push	r31
	digit[fndNum]++;
 15c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <fndNum>
 160:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <fndNum+0x1>
 164:	fc 01       	movw	r30, r24
 166:	ee 0f       	add	r30, r30
 168:	ff 1f       	adc	r31, r31
 16a:	e1 5f       	subi	r30, 0xF1	; 241
 16c:	fe 4f       	sbci	r31, 0xFE	; 254
 16e:	20 81       	ld	r18, Z
 170:	31 81       	ldd	r19, Z+1	; 0x01
 172:	2f 5f       	subi	r18, 0xFF	; 255
 174:	3f 4f       	sbci	r19, 0xFF	; 255
	if (digit[fndNum] == 10)
 176:	2a 30       	cpi	r18, 0x0A	; 10
 178:	31 05       	cpc	r19, r1
 17a:	41 f0       	breq	.+16     	; 0x18c <__vector_7+0x4a>
		fndNum = 0;
	sei();
}
ISR(INT6_vect)
{
	digit[fndNum]++;
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	fc 01       	movw	r30, r24
 182:	e1 5f       	subi	r30, 0xF1	; 241
 184:	fe 4f       	sbci	r31, 0xFE	; 254
 186:	31 83       	std	Z+1, r19	; 0x01
 188:	20 83       	st	Z, r18
 18a:	07 c0       	rjmp	.+14     	; 0x19a <__vector_7+0x58>
	if (digit[fndNum] == 10)
		digit[fndNum] = 0;
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	fc 01       	movw	r30, r24
 192:	e1 5f       	subi	r30, 0xF1	; 241
 194:	fe 4f       	sbci	r31, 0xFE	; 254
 196:	11 82       	std	Z+1, r1	; 0x01
 198:	10 82       	st	Z, r1
}
 19a:	ff 91       	pop	r31
 19c:	ef 91       	pop	r30
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	3f 91       	pop	r19
 1a4:	2f 91       	pop	r18
 1a6:	0f 90       	pop	r0
 1a8:	0b be       	out	0x3b, r0	; 59
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <__vector_8>:
ISR(INT7_vect)
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	8f 93       	push	r24
	isINT = 2;
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
 1c6:	8f 91       	pop	r24
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <INIT_PORT>:
	}
}

void INIT_PORT(void)
{
	DDRB = 0xFF;
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	87 bb       	out	0x17, r24	; 23
	
	DDRD = 0x00;
 1d6:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x08;
 1d8:	98 e0       	ldi	r25, 0x08	; 8
 1da:	92 bb       	out	0x12, r25	; 18
	
	DDRE = 0x00;
 1dc:	12 b8       	out	0x02, r1	; 2
	PORTE = 0x80;
 1de:	90 e8       	ldi	r25, 0x80	; 128
 1e0:	93 b9       	out	0x03, r25	; 3
	
	DDRA = 0xFF; 
 1e2:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 1e4:	84 bb       	out	0x14, r24	; 20
 1e6:	08 95       	ret

000001e8 <INIT_INT>:
}
void INIT_INT(void)
{
	SREG |= 0x80; // sei();
 1e8:	8f b7       	in	r24, 0x3f	; 63
 1ea:	80 68       	ori	r24, 0x80	; 128
 1ec:	8f bf       	out	0x3f, r24	; 63
	EIMSK = 0xCC;
 1ee:	8c ec       	ldi	r24, 0xCC	; 204
 1f0:	89 bf       	out	0x39, r24	; 57
	EICRA = 0xA0; // falling edge(SW1, 2)
 1f2:	80 ea       	ldi	r24, 0xA0	; 160
 1f4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB = 0xA0; // falling edge(SW3, 4)
 1f8:	8a bf       	out	0x3a, r24	; 58
 1fa:	08 95       	ret

000001fc <displayFND>:
}
void displayFND(unsigned int * digit)
{
 1fc:	dc 01       	movw	r26, r24
 1fe:	18 96       	adiw	r26, 0x08	; 8
	for (int i = 0; i < 4; i++)
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
	{
		PORTC = 0x01 << i;
 204:	41 e0       	ldi	r20, 0x01	; 1
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	ca 01       	movw	r24, r20
 20a:	02 2e       	mov	r0, r18
 20c:	02 c0       	rjmp	.+4      	; 0x212 <displayFND+0x16>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <displayFND+0x12>
 216:	85 bb       	out	0x15, r24	; 21
		PORTA = ~fndPattern[*(digit + (3 - i))];
 218:	fe 91       	ld	r31, -X
 21a:	ee 91       	ld	r30, -X
 21c:	e0 50       	subi	r30, 0x00	; 0
 21e:	ff 4f       	sbci	r31, 0xFF	; 255
 220:	90 81       	ld	r25, Z
 222:	90 95       	com	r25
 224:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	8f e1       	ldi	r24, 0x1F	; 31
 228:	9e e4       	ldi	r25, 0x4E	; 78
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <displayFND+0x2e>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <displayFND+0x34>
 230:	00 00       	nop
	EICRA = 0xA0; // falling edge(SW1, 2)
	EICRB = 0xA0; // falling edge(SW3, 4)
}
void displayFND(unsigned int * digit)
{
	for (int i = 0; i < 4; i++)
 232:	2f 5f       	subi	r18, 0xFF	; 255
 234:	3f 4f       	sbci	r19, 0xFF	; 255
 236:	24 30       	cpi	r18, 0x04	; 4
 238:	31 05       	cpc	r19, r1
 23a:	31 f7       	brne	.-52     	; 0x208 <displayFND+0xc>
	{
		PORTC = 0x01 << i;
		PORTA = ~fndPattern[*(digit + (3 - i))];
		_delay_ms(5);
	}
}
 23c:	08 95       	ret

0000023e <upCount>:
void upCount(void)
{
 23e:	8f 92       	push	r8
 240:	9f 92       	push	r9
 242:	af 92       	push	r10
 244:	bf 92       	push	r11
 246:	cf 92       	push	r12
 248:	df 92       	push	r13
 24a:	ef 92       	push	r14
 24c:	ff 92       	push	r15
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
	digit[0] = cnt / 1000;
 252:	c0 90 0b 01 	lds	r12, 0x010B	; 0x80010b <cnt>
 256:	d0 90 0c 01 	lds	r13, 0x010C	; 0x80010c <cnt+0x1>
 25a:	e0 90 0d 01 	lds	r14, 0x010D	; 0x80010d <cnt+0x2>
 25e:	f0 90 0e 01 	lds	r15, 0x010E	; 0x80010e <cnt+0x3>
 262:	cf e0       	ldi	r28, 0x0F	; 15
 264:	d1 e0       	ldi	r29, 0x01	; 1
 266:	c7 01       	movw	r24, r14
 268:	b6 01       	movw	r22, r12
 26a:	28 ee       	ldi	r18, 0xE8	; 232
 26c:	33 e0       	ldi	r19, 0x03	; 3
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	ab d0       	rcall	.+342    	; 0x3ca <__udivmodsi4>
 274:	39 83       	std	Y+1, r19	; 0x01
 276:	28 83       	st	Y, r18
	digit[1] = (cnt % 1000) / 100;
 278:	0f 2e       	mov	r0, r31
 27a:	f4 e6       	ldi	r31, 0x64	; 100
 27c:	8f 2e       	mov	r8, r31
 27e:	91 2c       	mov	r9, r1
 280:	a1 2c       	mov	r10, r1
 282:	b1 2c       	mov	r11, r1
 284:	f0 2d       	mov	r31, r0
 286:	a5 01       	movw	r20, r10
 288:	94 01       	movw	r18, r8
 28a:	9f d0       	rcall	.+318    	; 0x3ca <__udivmodsi4>
 28c:	3b 83       	std	Y+3, r19	; 0x03
 28e:	2a 83       	std	Y+2, r18	; 0x02
	digit[2] = (cnt % 100) / 10;
 290:	c7 01       	movw	r24, r14
 292:	b6 01       	movw	r22, r12
 294:	a5 01       	movw	r20, r10
 296:	94 01       	movw	r18, r8
 298:	98 d0       	rcall	.+304    	; 0x3ca <__udivmodsi4>
 29a:	0f 2e       	mov	r0, r31
 29c:	fa e0       	ldi	r31, 0x0A	; 10
 29e:	8f 2e       	mov	r8, r31
 2a0:	91 2c       	mov	r9, r1
 2a2:	a1 2c       	mov	r10, r1
 2a4:	b1 2c       	mov	r11, r1
 2a6:	f0 2d       	mov	r31, r0
 2a8:	a5 01       	movw	r20, r10
 2aa:	94 01       	movw	r18, r8
 2ac:	8e d0       	rcall	.+284    	; 0x3ca <__udivmodsi4>
 2ae:	3d 83       	std	Y+5, r19	; 0x05
 2b0:	2c 83       	std	Y+4, r18	; 0x04
	digit[3] = cnt % 10;
 2b2:	c7 01       	movw	r24, r14
 2b4:	b6 01       	movw	r22, r12
 2b6:	a5 01       	movw	r20, r10
 2b8:	94 01       	movw	r18, r8
 2ba:	87 d0       	rcall	.+270    	; 0x3ca <__udivmodsi4>
 2bc:	7f 83       	std	Y+7, r23	; 0x07
 2be:	6e 83       	std	Y+6, r22	; 0x06
	if (cnt == 10000) {cnt = 0 ;}
 2c0:	80 e1       	ldi	r24, 0x10	; 16
 2c2:	c8 16       	cp	r12, r24
 2c4:	87 e2       	ldi	r24, 0x27	; 39
 2c6:	d8 06       	cpc	r13, r24
 2c8:	e1 04       	cpc	r14, r1
 2ca:	f1 04       	cpc	r15, r1
 2cc:	41 f4       	brne	.+16     	; 0x2de <upCount+0xa0>
 2ce:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <cnt>
 2d2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <cnt+0x1>
 2d6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cnt+0x2>
 2da:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <cnt+0x3>
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	ff 90       	pop	r15
 2e4:	ef 90       	pop	r14
 2e6:	df 90       	pop	r13
 2e8:	cf 90       	pop	r12
 2ea:	bf 90       	pop	r11
 2ec:	af 90       	pop	r10
 2ee:	9f 90       	pop	r9
 2f0:	8f 90       	pop	r8
 2f2:	08 95       	ret

000002f4 <main>:
	isINT = 2;
}

int main(void)
{
	INIT_PORT();
 2f4:	6e df       	rcall	.-292    	; 0x1d2 <INIT_PORT>
	INIT_INT();
 2f6:	78 df       	rcall	.-272    	; 0x1e8 <INIT_INT>
 2f8:	0f 2e       	mov	r0, r31
		{
			for(int i = 0; i < 4; i++)
			{
				PORTA = ~fndPattern[*(digit + (3 - i))];
			}
			PORTC = 0x01 << fndNum;
 2fa:	f7 e1       	ldi	r31, 0x17	; 23
 2fc:	ef 2e       	mov	r14, r31
 2fe:	f1 e0       	ldi	r31, 0x01	; 1
 300:	ff 2e       	mov	r15, r31
 302:	f0 2d       	mov	r31, r0
 304:	01 e0       	ldi	r16, 0x01	; 1
 306:	10 e0       	ldi	r17, 0x00	; 0
 308:	dd 24       	eor	r13, r13
			_delay_ms(500);
			PORTA = 0xFF;
 30a:	da 94       	dec	r13
 30c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
	INIT_INT();
	
	while (1)
	{	
		// set mode
		if (isINT == 1) // blink and fnd adjust
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	e1 f5       	brne	.+120    	; 0x38c <main+0x98>
 314:	ef e0       	ldi	r30, 0x0F	; 15
		{
			for(int i = 0; i < 4; i++)
			{
				PORTA = ~fndPattern[*(digit + (3 - i))];
 316:	f1 e0       	ldi	r31, 0x01	; 1
 318:	a6 81       	ldd	r26, Z+6	; 0x06
 31a:	b7 81       	ldd	r27, Z+7	; 0x07
 31c:	a0 50       	subi	r26, 0x00	; 0
 31e:	bf 4f       	sbci	r27, 0xFF	; 255
 320:	8c 91       	ld	r24, X
 322:	80 95       	com	r24
 324:	8b bb       	out	0x1b, r24	; 27
 326:	a4 81       	ldd	r26, Z+4	; 0x04
 328:	b5 81       	ldd	r27, Z+5	; 0x05
 32a:	a0 50       	subi	r26, 0x00	; 0
 32c:	bf 4f       	sbci	r27, 0xFF	; 255
 32e:	8c 91       	ld	r24, X
 330:	80 95       	com	r24
 332:	8b bb       	out	0x1b, r24	; 27
 334:	a2 81       	ldd	r26, Z+2	; 0x02
 336:	b3 81       	ldd	r27, Z+3	; 0x03
 338:	a0 50       	subi	r26, 0x00	; 0
 33a:	bf 4f       	sbci	r27, 0xFF	; 255
 33c:	8c 91       	ld	r24, X
 33e:	80 95       	com	r24
 340:	8b bb       	out	0x1b, r24	; 27
 342:	01 90       	ld	r0, Z+
 344:	f0 81       	ld	r31, Z
 346:	e0 2d       	mov	r30, r0
 348:	e0 50       	subi	r30, 0x00	; 0
 34a:	ff 4f       	sbci	r31, 0xFF	; 255
 34c:	80 81       	ld	r24, Z
 34e:	80 95       	com	r24
 350:	8b bb       	out	0x1b, r24	; 27
 352:	c8 01       	movw	r24, r16
			}
			PORTC = 0x01 << fndNum;
 354:	f7 01       	movw	r30, r14
 356:	00 80       	ld	r0, Z
 358:	02 c0       	rjmp	.+4      	; 0x35e <main+0x6a>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	0a 94       	dec	r0
 360:	e2 f7       	brpl	.-8      	; 0x35a <main+0x66>
 362:	85 bb       	out	0x15, r24	; 21
 364:	ff ef       	ldi	r31, 0xFF	; 255
 366:	29 e6       	ldi	r18, 0x69	; 105
 368:	88 e1       	ldi	r24, 0x18	; 24
 36a:	f1 50       	subi	r31, 0x01	; 1
 36c:	20 40       	sbci	r18, 0x00	; 0
 36e:	80 40       	sbci	r24, 0x00	; 0
 370:	e1 f7       	brne	.-8      	; 0x36a <main+0x76>
 372:	00 c0       	rjmp	.+0      	; 0x374 <main+0x80>
 374:	00 00       	nop
 376:	db ba       	out	0x1b, r13	; 27
			_delay_ms(500);
			PORTA = 0xFF;
 378:	9f ef       	ldi	r25, 0xFF	; 255
 37a:	e9 e6       	ldi	r30, 0x69	; 105
 37c:	f8 e1       	ldi	r31, 0x18	; 24
 37e:	91 50       	subi	r25, 0x01	; 1
 380:	e0 40       	sbci	r30, 0x00	; 0
 382:	f0 40       	sbci	r31, 0x00	; 0
 384:	e1 f7       	brne	.-8      	; 0x37e <main+0x8a>
 386:	00 c0       	rjmp	.+0      	; 0x388 <main+0x94>
 388:	00 00       	nop
 38a:	c0 cf       	rjmp	.-128    	; 0x30c <main+0x18>
 38c:	82 30       	cpi	r24, 0x02	; 2
			_delay_ms(500);
		}
		
		// count mode
		else if(isINT == 2)
 38e:	09 f0       	breq	.+2      	; 0x392 <main+0x9e>
 390:	bd cf       	rjmp	.-134    	; 0x30c <main+0x18>
		{
			upCount();
 392:	55 df       	rcall	.-342    	; 0x23e <upCount>
 394:	c5 e0       	ldi	r28, 0x05	; 5
 396:	d0 e0       	ldi	r29, 0x00	; 0
			for (int i = 0; i < 5; i++) // 0.1 sec
			{
				displayFND(digit);
 398:	8f e0       	ldi	r24, 0x0F	; 15
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	2f df       	rcall	.-418    	; 0x1fc <displayFND>
 39e:	21 97       	sbiw	r28, 0x01	; 1
 3a0:	d9 f7       	brne	.-10     	; 0x398 <main+0xa4>
		
		// count mode
		else if(isINT == 2)
		{
			upCount();
			for (int i = 0; i < 5; i++) // 0.1 sec
 3a2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <cnt>
			{
				displayFND(digit);
			}
			cnt++;
 3a6:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <cnt+0x1>
 3aa:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <cnt+0x2>
 3ae:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <cnt+0x3>
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	a1 1d       	adc	r26, r1
 3b6:	b1 1d       	adc	r27, r1
 3b8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <cnt>
 3bc:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <cnt+0x1>
 3c0:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <cnt+0x2>
 3c4:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <cnt+0x3>
 3c8:	a1 cf       	rjmp	.-190    	; 0x30c <main+0x18>

000003ca <__udivmodsi4>:
 3ca:	a1 e2       	ldi	r26, 0x21	; 33
 3cc:	1a 2e       	mov	r1, r26
 3ce:	aa 1b       	sub	r26, r26
 3d0:	bb 1b       	sub	r27, r27
 3d2:	fd 01       	movw	r30, r26
 3d4:	0d c0       	rjmp	.+26     	; 0x3f0 <__udivmodsi4_ep>

000003d6 <__udivmodsi4_loop>:
 3d6:	aa 1f       	adc	r26, r26
 3d8:	bb 1f       	adc	r27, r27
 3da:	ee 1f       	adc	r30, r30
 3dc:	ff 1f       	adc	r31, r31
 3de:	a2 17       	cp	r26, r18
 3e0:	b3 07       	cpc	r27, r19
 3e2:	e4 07       	cpc	r30, r20
 3e4:	f5 07       	cpc	r31, r21
 3e6:	20 f0       	brcs	.+8      	; 0x3f0 <__udivmodsi4_ep>
 3e8:	a2 1b       	sub	r26, r18
 3ea:	b3 0b       	sbc	r27, r19
 3ec:	e4 0b       	sbc	r30, r20
 3ee:	f5 0b       	sbc	r31, r21

000003f0 <__udivmodsi4_ep>:
 3f0:	66 1f       	adc	r22, r22
 3f2:	77 1f       	adc	r23, r23
 3f4:	88 1f       	adc	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	1a 94       	dec	r1
 3fa:	69 f7       	brne	.-38     	; 0x3d6 <__udivmodsi4_loop>
 3fc:	60 95       	com	r22
 3fe:	70 95       	com	r23
 400:	80 95       	com	r24
 402:	90 95       	com	r25
 404:	9b 01       	movw	r18, r22
 406:	ac 01       	movw	r20, r24
 408:	bd 01       	movw	r22, r26
 40a:	cf 01       	movw	r24, r30
 40c:	08 95       	ret

0000040e <_exit>:
 40e:	f8 94       	cli

00000410 <__stop_program>:
 410:	ff cf       	rjmp	.-2      	; 0x410 <__stop_program>
