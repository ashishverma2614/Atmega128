
Question3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000234  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000234  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010a  0080010a  000002d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a0  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089d  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000338  00000000  00000000  000015b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000018f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043a  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d6  00000000  00000000  00001d82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001e58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e3       	ldi	r30, 0x34	; 52
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	94 d0       	rcall	.+296    	; 0x1ec <main>
  c4:	b5 c0       	rjmp	.+362    	; 0x230 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <INIT_PORT>:
void upCount(void);

// PORT setting
void INIT_PORT(void)
{
	DDRA = 0xFF; // bits in portA(a~g, dot)
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF; // control FND[0:3]
  cc:	84 bb       	out	0x14, r24	; 20
  ce:	08 95       	ret

000000d0 <displayFND>:

/* function implementation */


void displayFND(unsigned int * digit)
{
  d0:	dc 01       	movw	r26, r24
  d2:	18 96       	adiw	r26, 0x08	; 8
	for (int i = 0; i < 4; i++)
  d4:	20 e0       	ldi	r18, 0x00	; 0
  d6:	30 e0       	ldi	r19, 0x00	; 0
	{
		PORTC = 0x01 << i; // dynamic operation changing portC[0:4] output
  d8:	41 e0       	ldi	r20, 0x01	; 1
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	ca 01       	movw	r24, r20
  de:	02 2e       	mov	r0, r18
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <displayFND+0x16>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	0a 94       	dec	r0
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <displayFND+0x12>
  ea:	85 bb       	out	0x15, r24	; 21
		PORTA = ~fndPattern[*(digit + (3 - i))];
  ec:	fe 91       	ld	r31, -X
  ee:	ee 91       	ld	r30, -X
  f0:	e0 50       	subi	r30, 0x00	; 0
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	90 81       	ld	r25, Z
  f6:	90 95       	com	r25
  f8:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	8f e1       	ldi	r24, 0x1F	; 31
  fc:	9e e4       	ldi	r25, 0x4E	; 78
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <displayFND+0x2e>
 102:	00 c0       	rjmp	.+0      	; 0x104 <displayFND+0x34>
 104:	00 00       	nop
/* function implementation */


void displayFND(unsigned int * digit)
{
	for (int i = 0; i < 4; i++)
 106:	2f 5f       	subi	r18, 0xFF	; 255
 108:	3f 4f       	sbci	r19, 0xFF	; 255
 10a:	24 30       	cpi	r18, 0x04	; 4
 10c:	31 05       	cpc	r19, r1
 10e:	31 f7       	brne	.-52     	; 0xdc <displayFND+0xc>
	{
		PORTC = 0x01 << i; // dynamic operation changing portC[0:4] output
		PORTA = ~fndPattern[*(digit + (3 - i))];
		_delay_ms(5);
	}
}
 110:	08 95       	ret

00000112 <upCount>:
void upCount(void)
{
		//static unsigned int digit[] = {0, 0, 0, 0};
		digit[0] = cnt / 1000;
 112:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <__data_end>
 116:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <__data_end+0x1>
 11a:	ec e0       	ldi	r30, 0x0C	; 12
 11c:	f1 e0       	ldi	r31, 0x01	; 1
 11e:	9a 01       	movw	r18, r20
 120:	36 95       	lsr	r19
 122:	27 95       	ror	r18
 124:	36 95       	lsr	r19
 126:	27 95       	ror	r18
 128:	36 95       	lsr	r19
 12a:	27 95       	ror	r18
 12c:	a5 ec       	ldi	r26, 0xC5	; 197
 12e:	b0 e2       	ldi	r27, 0x20	; 32
 130:	70 d0       	rcall	.+224    	; 0x212 <__umulhisi3>
 132:	92 95       	swap	r25
 134:	82 95       	swap	r24
 136:	8f 70       	andi	r24, 0x0F	; 15
 138:	89 27       	eor	r24, r25
 13a:	9f 70       	andi	r25, 0x0F	; 15
 13c:	89 27       	eor	r24, r25
 13e:	91 83       	std	Z+1, r25	; 0x01
 140:	80 83       	st	Z, r24
		digit[1] = (cnt % 1000) / 100;
 142:	68 ee       	ldi	r22, 0xE8	; 232
 144:	73 e0       	ldi	r23, 0x03	; 3
 146:	86 9f       	mul	r24, r22
 148:	90 01       	movw	r18, r0
 14a:	87 9f       	mul	r24, r23
 14c:	30 0d       	add	r19, r0
 14e:	96 9f       	mul	r25, r22
 150:	30 0d       	add	r19, r0
 152:	11 24       	eor	r1, r1
 154:	ca 01       	movw	r24, r20
 156:	82 1b       	sub	r24, r18
 158:	93 0b       	sbc	r25, r19
 15a:	9c 01       	movw	r18, r24
 15c:	36 95       	lsr	r19
 15e:	27 95       	ror	r18
 160:	36 95       	lsr	r19
 162:	27 95       	ror	r18
 164:	ab e7       	ldi	r26, 0x7B	; 123
 166:	b4 e1       	ldi	r27, 0x14	; 20
 168:	54 d0       	rcall	.+168    	; 0x212 <__umulhisi3>
 16a:	96 95       	lsr	r25
 16c:	87 95       	ror	r24
 16e:	93 83       	std	Z+3, r25	; 0x03
 170:	82 83       	std	Z+2, r24	; 0x02
		digit[2] = (cnt % 100) / 10;
 172:	9a 01       	movw	r18, r20
 174:	36 95       	lsr	r19
 176:	27 95       	ror	r18
 178:	36 95       	lsr	r19
 17a:	27 95       	ror	r18
 17c:	4a d0       	rcall	.+148    	; 0x212 <__umulhisi3>
 17e:	96 95       	lsr	r25
 180:	87 95       	ror	r24
 182:	64 e6       	ldi	r22, 0x64	; 100
 184:	68 9f       	mul	r22, r24
 186:	90 01       	movw	r18, r0
 188:	69 9f       	mul	r22, r25
 18a:	30 0d       	add	r19, r0
 18c:	11 24       	eor	r1, r1
 18e:	ca 01       	movw	r24, r20
 190:	82 1b       	sub	r24, r18
 192:	93 0b       	sbc	r25, r19
 194:	9c 01       	movw	r18, r24
 196:	ad ec       	ldi	r26, 0xCD	; 205
 198:	bc ec       	ldi	r27, 0xCC	; 204
 19a:	3b d0       	rcall	.+118    	; 0x212 <__umulhisi3>
 19c:	96 95       	lsr	r25
 19e:	87 95       	ror	r24
 1a0:	96 95       	lsr	r25
 1a2:	87 95       	ror	r24
 1a4:	96 95       	lsr	r25
 1a6:	87 95       	ror	r24
 1a8:	95 83       	std	Z+5, r25	; 0x05
		digit[3] = cnt % 10;
 1aa:	84 83       	std	Z+4, r24	; 0x04
 1ac:	9a 01       	movw	r18, r20
 1ae:	31 d0       	rcall	.+98     	; 0x212 <__umulhisi3>
 1b0:	96 95       	lsr	r25
 1b2:	87 95       	ror	r24
 1b4:	96 95       	lsr	r25
 1b6:	87 95       	ror	r24
 1b8:	96 95       	lsr	r25
 1ba:	87 95       	ror	r24
 1bc:	9c 01       	movw	r18, r24
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	82 0f       	add	r24, r18
 1d0:	93 1f       	adc	r25, r19
 1d2:	9a 01       	movw	r18, r20
 1d4:	28 1b       	sub	r18, r24
 1d6:	39 0b       	sbc	r19, r25
 1d8:	37 83       	std	Z+7, r19	; 0x07
 1da:	26 83       	std	Z+6, r18	; 0x06
		if (cnt == 10000)
 1dc:	40 31       	cpi	r20, 0x10	; 16
 1de:	57 42       	sbci	r21, 0x27	; 39
 1e0:	21 f4       	brne	.+8      	; 0x1ea <upCount+0xd8>
			cnt = 0;
 1e2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
 1e6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 1ea:	08 95       	ret

000001ec <main>:
}

// main method
int main(void)
{
	INIT_PORT();
 1ec:	6d df       	rcall	.-294    	; 0xc8 <INIT_PORT>
	
    while (1) 
    {
		upCount(); //calc counter
 1ee:	91 df       	rcall	.-222    	; 0x112 <upCount>
 1f0:	c2 e3       	ldi	r28, 0x32	; 50
 1f2:	d0 e0       	ldi	r29, 0x00	; 0
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
		for (int i = 0; i < 50; i++) // for 1sec
		{
			displayFND(digit);
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	6b df       	rcall	.-298    	; 0xd0 <displayFND>
 1fa:	21 97       	sbiw	r28, 0x01	; 1
 1fc:	d9 f7       	brne	.-10     	; 0x1f4 <main+0x8>
	INIT_PORT();
	
    while (1) 
    {
		upCount(); //calc counter
		for (int i = 0; i < 50; i++) // for 1sec
 1fe:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
		{
			displayFND(digit);
		}
		cnt++;
 202:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 20c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 210:	ee cf       	rjmp	.-36     	; 0x1ee <main+0x2>

00000212 <__umulhisi3>:
		
    }
 212:	a2 9f       	mul	r26, r18
 214:	b0 01       	movw	r22, r0
 216:	b3 9f       	mul	r27, r19
 218:	c0 01       	movw	r24, r0
 21a:	a3 9f       	mul	r26, r19
 21c:	70 0d       	add	r23, r0
 21e:	81 1d       	adc	r24, r1
 220:	11 24       	eor	r1, r1
 222:	91 1d       	adc	r25, r1
 224:	b2 9f       	mul	r27, r18
 226:	70 0d       	add	r23, r0
 228:	81 1d       	adc	r24, r1
 22a:	11 24       	eor	r1, r1
 22c:	91 1d       	adc	r25, r1
 22e:	08 95       	ret

00000230 <_exit>:
 230:	f8 94       	cli

00000232 <__stop_program>:
 232:	ff cf       	rjmp	.-2      	; 0x232 <__stop_program>
