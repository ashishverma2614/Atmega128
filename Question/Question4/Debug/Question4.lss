
Question4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000486  0000051a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000486  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080010a  0080010a  00000524  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a5a  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b5  00000000  00000000  00001056  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b9  00000000  00000000  0000190b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00001dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000486  00000000  00000000  00001f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000352  00000000  00000000  000023c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002718  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5d c0       	rjmp	.+186    	; 0xc8 <__vector_3>
   e:	00 00       	nop
  10:	6d c0       	rjmp	.+218    	; 0xec <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8c c0       	rjmp	.+280    	; 0x136 <__vector_7>
  1e:	00 00       	nop
  20:	a2 c0       	rjmp	.+324    	; 0x166 <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e8       	ldi	r30, 0x86	; 134
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 31       	cpi	r26, 0x18	; 24
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	70 d1       	rcall	.+736    	; 0x3a4 <main>
  c4:	de c1       	rjmp	.+956    	; 0x482 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_3>:
static unsigned long cnt = 0;
unsigned char isINT = 0;
unsigned char isUpDown = 0; // 0 for nothing
	
ISR(INT2_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
	isUpDown = 1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	isINT = 1;
  da:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <isINT>
	sei();
  de:	78 94       	sei
}
  e0:	8f 91       	pop	r24
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <__vector_4>:
ISR(INT3_vect)
{
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	af 93       	push	r26
  fc:	bf 93       	push	r27
	isUpDown = 2;
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	cnt = 9999;
 104:	8f e0       	ldi	r24, 0x0F	; 15
 106:	97 e2       	ldi	r25, 0x27	; 39
 108:	a0 e0       	ldi	r26, 0x00	; 0
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <cnt>
 110:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <cnt+0x1>
 114:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <cnt+0x2>
 118:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <cnt+0x3>
	isINT = 1;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <isINT>
	sei();
 122:	78 94       	sei
}
 124:	bf 91       	pop	r27
 126:	af 91       	pop	r26
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <__vector_7>:
ISR(INT6_vect)
{
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
	cnt = 0000;
 142:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <cnt>
 146:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cnt+0x1>
 14a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <cnt+0x2>
 14e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cnt+0x3>
	isINT = 1;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <isINT>
	sei();
 158:	78 94       	sei
}
 15a:	8f 91       	pop	r24
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <__vector_8>:
ISR(INT7_vect)
{
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
 174:	af 93       	push	r26
 176:	bf 93       	push	r27
	cnt = 9999;
 178:	8f e0       	ldi	r24, 0x0F	; 15
 17a:	97 e2       	ldi	r25, 0x27	; 39
 17c:	a0 e0       	ldi	r26, 0x00	; 0
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <cnt>
 184:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <cnt+0x1>
 188:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <cnt+0x2>
 18c:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <cnt+0x3>
	isINT = 1;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <isINT>
	sei();
 196:	78 94       	sei
}
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <INIT_PORT>:
}

void INIT_PORT(void)
{
	// led[0:7]: portB
	DDRB = 0xFF; // set portB as output
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	87 bb       	out	0x17, r24	; 23
	
	// SW1(PD2) and SW2(PD3)
	DDRD = 0x00; // set portD as input
 1ae:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x08; // internal pull-up resist enable
 1b0:	98 e0       	ldi	r25, 0x08	; 8
 1b2:	92 bb       	out	0x12, r25	; 18
	
	// SW3(PE6) and SW4(PE7)
	DDRE = 0x00; // set portE as input
 1b4:	12 b8       	out	0x02, r1	; 2
	PORTE = 0x80; // internal pull-up resist enable
 1b6:	90 e8       	ldi	r25, 0x80	; 128
 1b8:	93 b9       	out	0x03, r25	; 3
	
	// FND port setting
	DDRA = 0xFF; // bits in portA(a~g, dot)
 1ba:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF; // control FND[0:3]
 1bc:	84 bb       	out	0x14, r24	; 20
 1be:	08 95       	ret

000001c0 <INIT_INT>:
}
void INIT_INT(void)
{
	SREG |= 0x80; // sei();
 1c0:	8f b7       	in	r24, 0x3f	; 63
 1c2:	80 68       	ori	r24, 0x80	; 128
 1c4:	8f bf       	out	0x3f, r24	; 63
	EIMSK = 0xCC;
 1c6:	8c ec       	ldi	r24, 0xCC	; 204
 1c8:	89 bf       	out	0x39, r24	; 57
	EICRA = 0xA0; // falling edge(SW1, 2)
 1ca:	80 ea       	ldi	r24, 0xA0	; 160
 1cc:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB = 0xA0; // falling edge(SW3, 4)
 1d0:	8a bf       	out	0x3a, r24	; 58
 1d2:	08 95       	ret

000001d4 <displayFND>:
}
void displayFND(unsigned int * digit)
{
 1d4:	dc 01       	movw	r26, r24
 1d6:	18 96       	adiw	r26, 0x08	; 8
	for (int i = 0; i < 4; i++)
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	30 e0       	ldi	r19, 0x00	; 0
	{
		PORTC = 0x01 << i;
 1dc:	41 e0       	ldi	r20, 0x01	; 1
 1de:	50 e0       	ldi	r21, 0x00	; 0
 1e0:	ca 01       	movw	r24, r20
 1e2:	02 2e       	mov	r0, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <displayFND+0x16>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	0a 94       	dec	r0
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <displayFND+0x12>
 1ee:	85 bb       	out	0x15, r24	; 21
		PORTA = ~fndPattern[*(digit + (3 - i))];
 1f0:	fe 91       	ld	r31, -X
 1f2:	ee 91       	ld	r30, -X
 1f4:	e0 50       	subi	r30, 0x00	; 0
 1f6:	ff 4f       	sbci	r31, 0xFF	; 255
 1f8:	90 81       	ld	r25, Z
 1fa:	90 95       	com	r25
 1fc:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fe:	8f e1       	ldi	r24, 0x1F	; 31
 200:	9e e4       	ldi	r25, 0x4E	; 78
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <displayFND+0x2e>
 206:	00 c0       	rjmp	.+0      	; 0x208 <displayFND+0x34>
 208:	00 00       	nop
	EICRA = 0xA0; // falling edge(SW1, 2)
	EICRB = 0xA0; // falling edge(SW3, 4)
}
void displayFND(unsigned int * digit)
{
	for (int i = 0; i < 4; i++)
 20a:	2f 5f       	subi	r18, 0xFF	; 255
 20c:	3f 4f       	sbci	r19, 0xFF	; 255
 20e:	24 30       	cpi	r18, 0x04	; 4
 210:	31 05       	cpc	r19, r1
 212:	31 f7       	brne	.-52     	; 0x1e0 <displayFND+0xc>
	{
		PORTC = 0x01 << i;
		PORTA = ~fndPattern[*(digit + (3 - i))];
		_delay_ms(5);
	}
}
 214:	08 95       	ret

00000216 <upCount>:
void upCount(void)
{
 216:	8f 92       	push	r8
 218:	9f 92       	push	r9
 21a:	af 92       	push	r10
 21c:	bf 92       	push	r11
 21e:	cf 92       	push	r12
 220:	df 92       	push	r13
 222:	ef 92       	push	r14
 224:	ff 92       	push	r15
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
		digit[0] = cnt / 1000;
 22a:	c0 90 0c 01 	lds	r12, 0x010C	; 0x80010c <cnt>
 22e:	d0 90 0d 01 	lds	r13, 0x010D	; 0x80010d <cnt+0x1>
 232:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <cnt+0x2>
 236:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <cnt+0x3>
 23a:	c0 e1       	ldi	r28, 0x10	; 16
 23c:	d1 e0       	ldi	r29, 0x01	; 1
 23e:	c7 01       	movw	r24, r14
 240:	b6 01       	movw	r22, r12
 242:	28 ee       	ldi	r18, 0xE8	; 232
 244:	33 e0       	ldi	r19, 0x03	; 3
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	50 e0       	ldi	r21, 0x00	; 0
 24a:	f9 d0       	rcall	.+498    	; 0x43e <__udivmodsi4>
 24c:	39 83       	std	Y+1, r19	; 0x01
 24e:	28 83       	st	Y, r18
		digit[1] = (cnt % 1000) / 100;
 250:	0f 2e       	mov	r0, r31
 252:	f4 e6       	ldi	r31, 0x64	; 100
 254:	8f 2e       	mov	r8, r31
 256:	91 2c       	mov	r9, r1
 258:	a1 2c       	mov	r10, r1
 25a:	b1 2c       	mov	r11, r1
 25c:	f0 2d       	mov	r31, r0
 25e:	a5 01       	movw	r20, r10
 260:	94 01       	movw	r18, r8
 262:	ed d0       	rcall	.+474    	; 0x43e <__udivmodsi4>
 264:	3b 83       	std	Y+3, r19	; 0x03
 266:	2a 83       	std	Y+2, r18	; 0x02
		digit[2] = (cnt % 100) / 10;
 268:	c7 01       	movw	r24, r14
 26a:	b6 01       	movw	r22, r12
 26c:	a5 01       	movw	r20, r10
 26e:	94 01       	movw	r18, r8
 270:	e6 d0       	rcall	.+460    	; 0x43e <__udivmodsi4>
 272:	0f 2e       	mov	r0, r31
 274:	fa e0       	ldi	r31, 0x0A	; 10
 276:	8f 2e       	mov	r8, r31
 278:	91 2c       	mov	r9, r1
 27a:	a1 2c       	mov	r10, r1
 27c:	b1 2c       	mov	r11, r1
 27e:	f0 2d       	mov	r31, r0
 280:	a5 01       	movw	r20, r10
 282:	94 01       	movw	r18, r8
 284:	dc d0       	rcall	.+440    	; 0x43e <__udivmodsi4>
 286:	3d 83       	std	Y+5, r19	; 0x05
 288:	2c 83       	std	Y+4, r18	; 0x04
		digit[3] = cnt % 10;
 28a:	c7 01       	movw	r24, r14
 28c:	b6 01       	movw	r22, r12
 28e:	a5 01       	movw	r20, r10
 290:	94 01       	movw	r18, r8
 292:	d5 d0       	rcall	.+426    	; 0x43e <__udivmodsi4>
 294:	7f 83       	std	Y+7, r23	; 0x07
 296:	6e 83       	std	Y+6, r22	; 0x06
		if (cnt == 10000) {cnt = 0 ;}
 298:	80 e1       	ldi	r24, 0x10	; 16
 29a:	c8 16       	cp	r12, r24
 29c:	87 e2       	ldi	r24, 0x27	; 39
 29e:	d8 06       	cpc	r13, r24
 2a0:	e1 04       	cpc	r14, r1
 2a2:	f1 04       	cpc	r15, r1
 2a4:	41 f4       	brne	.+16     	; 0x2b6 <upCount+0xa0>
 2a6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <cnt>
 2aa:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cnt+0x1>
 2ae:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <cnt+0x2>
 2b2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cnt+0x3>
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	ff 90       	pop	r15
 2bc:	ef 90       	pop	r14
 2be:	df 90       	pop	r13
 2c0:	cf 90       	pop	r12
 2c2:	bf 90       	pop	r11
 2c4:	af 90       	pop	r10
 2c6:	9f 90       	pop	r9
 2c8:	8f 90       	pop	r8
 2ca:	08 95       	ret

000002cc <downCount>:
void downCount(void)
{
 2cc:	8f 92       	push	r8
 2ce:	9f 92       	push	r9
 2d0:	af 92       	push	r10
 2d2:	bf 92       	push	r11
 2d4:	cf 92       	push	r12
 2d6:	df 92       	push	r13
 2d8:	ef 92       	push	r14
 2da:	ff 92       	push	r15
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
		digit[0] = (cnt % 10000) / 1000;
 2e0:	c0 90 0c 01 	lds	r12, 0x010C	; 0x80010c <cnt>
 2e4:	d0 90 0d 01 	lds	r13, 0x010D	; 0x80010d <cnt+0x1>
 2e8:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <cnt+0x2>
 2ec:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <cnt+0x3>
 2f0:	c0 e1       	ldi	r28, 0x10	; 16
 2f2:	d1 e0       	ldi	r29, 0x01	; 1
 2f4:	c7 01       	movw	r24, r14
 2f6:	b6 01       	movw	r22, r12
 2f8:	20 e1       	ldi	r18, 0x10	; 16
 2fa:	37 e2       	ldi	r19, 0x27	; 39
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	50 e0       	ldi	r21, 0x00	; 0
 300:	9e d0       	rcall	.+316    	; 0x43e <__udivmodsi4>
 302:	0f 2e       	mov	r0, r31
 304:	f8 ee       	ldi	r31, 0xE8	; 232
 306:	8f 2e       	mov	r8, r31
 308:	f3 e0       	ldi	r31, 0x03	; 3
 30a:	9f 2e       	mov	r9, r31
 30c:	a1 2c       	mov	r10, r1
 30e:	b1 2c       	mov	r11, r1
 310:	f0 2d       	mov	r31, r0
 312:	a5 01       	movw	r20, r10
 314:	94 01       	movw	r18, r8
 316:	93 d0       	rcall	.+294    	; 0x43e <__udivmodsi4>
 318:	39 83       	std	Y+1, r19	; 0x01
 31a:	28 83       	st	Y, r18
		digit[1] = (cnt % 1000) / 100;
 31c:	c7 01       	movw	r24, r14
 31e:	b6 01       	movw	r22, r12
 320:	a5 01       	movw	r20, r10
 322:	94 01       	movw	r18, r8
 324:	8c d0       	rcall	.+280    	; 0x43e <__udivmodsi4>
 326:	0f 2e       	mov	r0, r31
 328:	f4 e6       	ldi	r31, 0x64	; 100
 32a:	8f 2e       	mov	r8, r31
 32c:	91 2c       	mov	r9, r1
 32e:	a1 2c       	mov	r10, r1
 330:	b1 2c       	mov	r11, r1
 332:	f0 2d       	mov	r31, r0
 334:	a5 01       	movw	r20, r10
 336:	94 01       	movw	r18, r8
 338:	82 d0       	rcall	.+260    	; 0x43e <__udivmodsi4>
 33a:	3b 83       	std	Y+3, r19	; 0x03
 33c:	2a 83       	std	Y+2, r18	; 0x02
		digit[2] = (cnt % 100) / 10;
 33e:	c7 01       	movw	r24, r14
 340:	b6 01       	movw	r22, r12
 342:	a5 01       	movw	r20, r10
 344:	94 01       	movw	r18, r8
 346:	7b d0       	rcall	.+246    	; 0x43e <__udivmodsi4>
 348:	0f 2e       	mov	r0, r31
 34a:	fa e0       	ldi	r31, 0x0A	; 10
 34c:	8f 2e       	mov	r8, r31
 34e:	91 2c       	mov	r9, r1
 350:	a1 2c       	mov	r10, r1
 352:	b1 2c       	mov	r11, r1
 354:	f0 2d       	mov	r31, r0
 356:	a5 01       	movw	r20, r10
 358:	94 01       	movw	r18, r8
 35a:	71 d0       	rcall	.+226    	; 0x43e <__udivmodsi4>
 35c:	3d 83       	std	Y+5, r19	; 0x05
 35e:	2c 83       	std	Y+4, r18	; 0x04
		digit[3] = cnt % 10;
 360:	c7 01       	movw	r24, r14
 362:	b6 01       	movw	r22, r12
 364:	a5 01       	movw	r20, r10
 366:	94 01       	movw	r18, r8
 368:	6a d0       	rcall	.+212    	; 0x43e <__udivmodsi4>
 36a:	7f 83       	std	Y+7, r23	; 0x07
 36c:	6e 83       	std	Y+6, r22	; 0x06
 36e:	cd 28       	or	r12, r13
		if (cnt == 0) {cnt = 10000;}
 370:	ce 28       	or	r12, r14
 372:	cf 28       	or	r12, r15
 374:	61 f4       	brne	.+24     	; 0x38e <downCount+0xc2>
 376:	80 e1       	ldi	r24, 0x10	; 16
 378:	97 e2       	ldi	r25, 0x27	; 39
 37a:	a0 e0       	ldi	r26, 0x00	; 0
 37c:	b0 e0       	ldi	r27, 0x00	; 0
 37e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <cnt>
 382:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <cnt+0x1>
 386:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <cnt+0x2>
 38a:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <cnt+0x3>
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	ff 90       	pop	r15
 394:	ef 90       	pop	r14
 396:	df 90       	pop	r13
 398:	cf 90       	pop	r12
 39a:	bf 90       	pop	r11
 39c:	af 90       	pop	r10
 39e:	9f 90       	pop	r9
 3a0:	8f 90       	pop	r8
 3a2:	08 95       	ret

000003a4 <main>:
 3a4:	02 df       	rcall	.-508    	; 0x1aa <INIT_PORT>
void downCount(void);

int main(void)
{
	INIT_PORT();
	INIT_INT();
 3a6:	0c df       	rcall	.-488    	; 0x1c0 <INIT_INT>
 3a8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <isINT>
    {
		if (isINT == 0)
		{} // no Interrupt
		
		// interrupt case
		else if (isINT == 1)
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <main+0xe>
 3b0:	3f c0       	rjmp	.+126    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 3b2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
		{
			if (isUpDown == 1)
 3b6:	81 30       	cpi	r24, 0x01	; 1
 3b8:	11 f4       	brne	.+4      	; 0x3be <main+0x1a>
				upCount();
 3ba:	2d df       	rcall	.-422    	; 0x216 <upCount>
 3bc:	39 c0       	rjmp	.+114    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
			else if (isUpDown == 2)
 3be:	82 30       	cpi	r24, 0x02	; 2
 3c0:	b9 f5       	brne	.+110    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
				downCount();
 3c2:	84 df       	rcall	.-248    	; 0x2cc <downCount>
 3c4:	35 c0       	rjmp	.+106    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		}
		
		// display number regardless of interrupt
		for (int i = 0; i < 50; i++)
		{
			displayFND(digit);
 3c6:	80 e1       	ldi	r24, 0x10	; 16
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	04 df       	rcall	.-504    	; 0x1d4 <displayFND>
 3cc:	21 97       	sbiw	r28, 0x01	; 1
 3ce:	d9 f7       	brne	.-10     	; 0x3c6 <main+0x22>
			else if (isUpDown == 2)
				downCount();
		}
		
		// display number regardless of interrupt
		for (int i = 0; i < 50; i++)
 3d0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <isINT>
		{
			displayFND(digit);
		}
		
		// counter control
		if (isINT == 1 && isUpDown ==1) cnt++;
 3d4:	81 30       	cpi	r24, 0x01	; 1
 3d6:	41 f7       	brne	.-48     	; 0x3a8 <main+0x4>
 3d8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	59 f5       	brne	.+86     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 3e0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <cnt>
 3e4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cnt+0x1>
 3e8:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <cnt+0x2>
 3ec:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <cnt+0x3>
 3f0:	01 96       	adiw	r24, 0x01	; 1
 3f2:	a1 1d       	adc	r26, r1
 3f4:	b1 1d       	adc	r27, r1
 3f6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <cnt>
 3fa:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <cnt+0x1>
 3fe:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <cnt+0x2>
 402:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <cnt+0x3>
 406:	d0 cf       	rjmp	.-96     	; 0x3a8 <main+0x4>
 408:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <cnt>
		if (isINT== 1 && isUpDown == 2) cnt--;
 40c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cnt+0x1>
 410:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <cnt+0x2>
 414:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <cnt+0x3>
 418:	01 97       	sbiw	r24, 0x01	; 1
 41a:	a1 09       	sbc	r26, r1
 41c:	b1 09       	sbc	r27, r1
 41e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <cnt>
 422:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <cnt+0x1>
 426:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <cnt+0x2>
 42a:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <cnt+0x3>
 42e:	bc cf       	rjmp	.-136    	; 0x3a8 <main+0x4>
 430:	c2 e3       	ldi	r28, 0x32	; 50
void displayFND(unsigned int*); // dynamic display
void upCount(void);
void downCount(void);

int main(void)
{
 432:	d0 e0       	ldi	r29, 0x00	; 0
 434:	c8 cf       	rjmp	.-112    	; 0x3c6 <main+0x22>
 436:	82 30       	cpi	r24, 0x02	; 2
			displayFND(digit);
		}
		
		// counter control
		if (isINT == 1 && isUpDown ==1) cnt++;
		if (isINT== 1 && isUpDown == 2) cnt--;
 438:	09 f0       	breq	.+2      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 43a:	b6 cf       	rjmp	.-148    	; 0x3a8 <main+0x4>
 43c:	e5 cf       	rjmp	.-54     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>

0000043e <__udivmodsi4>:
 43e:	a1 e2       	ldi	r26, 0x21	; 33
 440:	1a 2e       	mov	r1, r26
 442:	aa 1b       	sub	r26, r26
 444:	bb 1b       	sub	r27, r27
 446:	fd 01       	movw	r30, r26
 448:	0d c0       	rjmp	.+26     	; 0x464 <__udivmodsi4_ep>

0000044a <__udivmodsi4_loop>:
 44a:	aa 1f       	adc	r26, r26
 44c:	bb 1f       	adc	r27, r27
 44e:	ee 1f       	adc	r30, r30
 450:	ff 1f       	adc	r31, r31
 452:	a2 17       	cp	r26, r18
 454:	b3 07       	cpc	r27, r19
 456:	e4 07       	cpc	r30, r20
 458:	f5 07       	cpc	r31, r21
 45a:	20 f0       	brcs	.+8      	; 0x464 <__udivmodsi4_ep>
 45c:	a2 1b       	sub	r26, r18
 45e:	b3 0b       	sbc	r27, r19
 460:	e4 0b       	sbc	r30, r20
 462:	f5 0b       	sbc	r31, r21

00000464 <__udivmodsi4_ep>:
 464:	66 1f       	adc	r22, r22
 466:	77 1f       	adc	r23, r23
 468:	88 1f       	adc	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	1a 94       	dec	r1
 46e:	69 f7       	brne	.-38     	; 0x44a <__udivmodsi4_loop>
 470:	60 95       	com	r22
 472:	70 95       	com	r23
 474:	80 95       	com	r24
 476:	90 95       	com	r25
 478:	9b 01       	movw	r18, r22
 47a:	ac 01       	movw	r20, r24
 47c:	bd 01       	movw	r22, r26
 47e:	cf 01       	movw	r24, r30
 480:	08 95       	ret

00000482 <_exit>:
 482:	f8 94       	cli

00000484 <__stop_program>:
 484:	ff cf       	rjmp	.-2      	; 0x484 <__stop_program>
