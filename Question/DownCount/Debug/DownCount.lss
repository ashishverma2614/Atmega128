
DownCount.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000025c  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080010a  0080010a  000002fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000989  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b1  00000000  00000000  00000d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033c  00000000  00000000  000015de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000191c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043c  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001e3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e5       	ldi	r30, 0x5C	; 92
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a6 d0       	rcall	.+332    	; 0x210 <main>
  c4:	c9 c0       	rjmp	.+402    	; 0x258 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <INIT_PORT>:
void downCount(void);

// PORT setting
void INIT_PORT(void)
{
	DDRA = 0xFF; // bits in portA(a~g, dot)
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF; // control FND[0:3]
  cc:	84 bb       	out	0x14, r24	; 20
  ce:	08 95       	ret

000000d0 <displayFND>:

/* function implementation */


void displayFND(unsigned int * digit)
{
  d0:	dc 01       	movw	r26, r24
  d2:	18 96       	adiw	r26, 0x08	; 8
	for (int i = 0; i < 4; i++)
  d4:	20 e0       	ldi	r18, 0x00	; 0
  d6:	30 e0       	ldi	r19, 0x00	; 0
	{
		PORTC = 0x01 << i; // dynamic operation changing portC[0:4] output
  d8:	41 e0       	ldi	r20, 0x01	; 1
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	ca 01       	movw	r24, r20
  de:	02 2e       	mov	r0, r18
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <displayFND+0x16>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	0a 94       	dec	r0
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <displayFND+0x12>
  ea:	85 bb       	out	0x15, r24	; 21
		PORTA = ~fndPattern[*(digit + (3 - i))];
  ec:	fe 91       	ld	r31, -X
  ee:	ee 91       	ld	r30, -X
  f0:	e0 50       	subi	r30, 0x00	; 0
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	90 81       	ld	r25, Z
  f6:	90 95       	com	r25
  f8:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	8f e1       	ldi	r24, 0x1F	; 31
  fc:	9e e4       	ldi	r25, 0x4E	; 78
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <displayFND+0x2e>
 102:	00 c0       	rjmp	.+0      	; 0x104 <displayFND+0x34>
 104:	00 00       	nop
/* function implementation */


void displayFND(unsigned int * digit)
{
	for (int i = 0; i < 4; i++)
 106:	2f 5f       	subi	r18, 0xFF	; 255
 108:	3f 4f       	sbci	r19, 0xFF	; 255
 10a:	24 30       	cpi	r18, 0x04	; 4
 10c:	31 05       	cpc	r19, r1
 10e:	31 f7       	brne	.-52     	; 0xdc <displayFND+0xc>
	{
		PORTC = 0x01 << i; // dynamic operation changing portC[0:4] output
		PORTA = ~fndPattern[*(digit + (3 - i))];
		_delay_ms(5);
	}
}
 110:	08 95       	ret

00000112 <downCount>:
void downCount(void)
{
	for (cnt = 100000; cnt >= 0; cnt--)
 112:	80 ea       	ldi	r24, 0xA0	; 160
 114:	96 e8       	ldi	r25, 0x86	; 134
 116:	a1 e0       	ldi	r26, 0x01	; 1
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <cnt>
 11e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <cnt+0x1>
 122:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <cnt+0x2>
 126:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <cnt+0x3>
	{
		//static unsigned int digit[] = {0, 0, 0, 0};
		digit[0] = (cnt % 10000) / 1000;
 12a:	ca e0       	ldi	r28, 0x0A	; 10
 12c:	d1 e0       	ldi	r29, 0x01	; 1
 12e:	0f 2e       	mov	r0, r31
 130:	f8 ee       	ldi	r31, 0xE8	; 232
 132:	4f 2e       	mov	r4, r31
 134:	f3 e0       	ldi	r31, 0x03	; 3
 136:	5f 2e       	mov	r5, r31
 138:	61 2c       	mov	r6, r1
 13a:	71 2c       	mov	r7, r1
 13c:	f0 2d       	mov	r31, r0
		digit[1] = (cnt % 1000) / 100;
		digit[2] = (cnt % 100) / 10;
		digit[3] = cnt % 10;
		displayFND(digit);
		if (cnt == 0)
			cnt = 9999;
 13e:	0f 2e       	mov	r0, r31
 140:	ff e0       	ldi	r31, 0x0F	; 15
 142:	cf 2e       	mov	r12, r31
 144:	f7 e2       	ldi	r31, 0x27	; 39
 146:	df 2e       	mov	r13, r31
 148:	e1 2c       	mov	r14, r1
 14a:	f1 2c       	mov	r15, r1
 14c:	f0 2d       	mov	r31, r0
void downCount(void)
{
	for (cnt = 100000; cnt >= 0; cnt--)
	{
		//static unsigned int digit[] = {0, 0, 0, 0};
		digit[0] = (cnt % 10000) / 1000;
 14e:	80 90 12 01 	lds	r8, 0x0112	; 0x800112 <cnt>
 152:	90 90 13 01 	lds	r9, 0x0113	; 0x800113 <cnt+0x1>
 156:	a0 90 14 01 	lds	r10, 0x0114	; 0x800114 <cnt+0x2>
 15a:	b0 90 15 01 	lds	r11, 0x0115	; 0x800115 <cnt+0x3>
 15e:	c5 01       	movw	r24, r10
 160:	b4 01       	movw	r22, r8
 162:	20 e1       	ldi	r18, 0x10	; 16
 164:	37 e2       	ldi	r19, 0x27	; 39
 166:	40 e0       	ldi	r20, 0x00	; 0
 168:	50 e0       	ldi	r21, 0x00	; 0
 16a:	54 d0       	rcall	.+168    	; 0x214 <__udivmodsi4>
 16c:	a3 01       	movw	r20, r6
 16e:	92 01       	movw	r18, r4
 170:	51 d0       	rcall	.+162    	; 0x214 <__udivmodsi4>
 172:	39 83       	std	Y+1, r19	; 0x01
 174:	28 83       	st	Y, r18
		digit[1] = (cnt % 1000) / 100;
 176:	c5 01       	movw	r24, r10
 178:	b4 01       	movw	r22, r8
 17a:	a3 01       	movw	r20, r6
 17c:	92 01       	movw	r18, r4
 17e:	4a d0       	rcall	.+148    	; 0x214 <__udivmodsi4>
 180:	24 e6       	ldi	r18, 0x64	; 100
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	40 e0       	ldi	r20, 0x00	; 0
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	45 d0       	rcall	.+138    	; 0x214 <__udivmodsi4>
 18a:	3b 83       	std	Y+3, r19	; 0x03
 18c:	2a 83       	std	Y+2, r18	; 0x02
		digit[2] = (cnt % 100) / 10;
 18e:	c5 01       	movw	r24, r10
 190:	b4 01       	movw	r22, r8
 192:	24 e6       	ldi	r18, 0x64	; 100
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	50 e0       	ldi	r21, 0x00	; 0
 19a:	3c d0       	rcall	.+120    	; 0x214 <__udivmodsi4>
 19c:	2a e0       	ldi	r18, 0x0A	; 10
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	50 e0       	ldi	r21, 0x00	; 0
 1a4:	37 d0       	rcall	.+110    	; 0x214 <__udivmodsi4>
 1a6:	3d 83       	std	Y+5, r19	; 0x05
 1a8:	2c 83       	std	Y+4, r18	; 0x04
		digit[3] = cnt % 10;
 1aa:	c5 01       	movw	r24, r10
 1ac:	b4 01       	movw	r22, r8
 1ae:	2a e0       	ldi	r18, 0x0A	; 10
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	50 e0       	ldi	r21, 0x00	; 0
 1b6:	2e d0       	rcall	.+92     	; 0x214 <__udivmodsi4>
 1b8:	7f 83       	std	Y+7, r23	; 0x07
		displayFND(digit);
 1ba:	6e 83       	std	Y+6, r22	; 0x06
 1bc:	ce 01       	movw	r24, r28
 1be:	88 df       	rcall	.-240    	; 0xd0 <displayFND>
		if (cnt == 0)
 1c0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <cnt>
 1c4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <cnt+0x1>
 1c8:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <cnt+0x2>
 1cc:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <cnt+0x3>
 1d0:	89 2b       	or	r24, r25
 1d2:	8a 2b       	or	r24, r26
 1d4:	8b 2b       	or	r24, r27
 1d6:	41 f4       	brne	.+16     	; 0x1e8 <downCount+0xd6>
			cnt = 9999;
 1d8:	c0 92 12 01 	sts	0x0112, r12	; 0x800112 <cnt>
 1dc:	d0 92 13 01 	sts	0x0113, r13	; 0x800113 <cnt+0x1>
 1e0:	e0 92 14 01 	sts	0x0114, r14	; 0x800114 <cnt+0x2>
 1e4:	f0 92 15 01 	sts	0x0115, r15	; 0x800115 <cnt+0x3>
		_delay_ms(5);
	}
}
void downCount(void)
{
	for (cnt = 100000; cnt >= 0; cnt--)
 1e8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <cnt>
 1ec:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <cnt+0x1>
 1f0:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <cnt+0x2>
 1f4:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <cnt+0x3>
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	a1 09       	sbc	r26, r1
 1fc:	b1 09       	sbc	r27, r1
 1fe:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <cnt>
 202:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <cnt+0x1>
 206:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <cnt+0x2>
 20a:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <cnt+0x3>
		digit[2] = (cnt % 100) / 10;
		digit[3] = cnt % 10;
		displayFND(digit);
		if (cnt == 0)
			cnt = 9999;
	}
 20e:	9f cf       	rjmp	.-194    	; 0x14e <downCount+0x3c>

00000210 <main>:
}

// main method
int main(void)
{
	INIT_PORT();
 210:	5b df       	rcall	.-330    	; 0xc8 <INIT_PORT>
	
	while (1)
	{
		downCount();
 212:	7f df       	rcall	.-258    	; 0x112 <downCount>

00000214 <__udivmodsi4>:
 214:	a1 e2       	ldi	r26, 0x21	; 33
 216:	1a 2e       	mov	r1, r26
 218:	aa 1b       	sub	r26, r26
 21a:	bb 1b       	sub	r27, r27
 21c:	fd 01       	movw	r30, r26
 21e:	0d c0       	rjmp	.+26     	; 0x23a <__udivmodsi4_ep>

00000220 <__udivmodsi4_loop>:
 220:	aa 1f       	adc	r26, r26
 222:	bb 1f       	adc	r27, r27
 224:	ee 1f       	adc	r30, r30
 226:	ff 1f       	adc	r31, r31
 228:	a2 17       	cp	r26, r18
 22a:	b3 07       	cpc	r27, r19
 22c:	e4 07       	cpc	r30, r20
 22e:	f5 07       	cpc	r31, r21
 230:	20 f0       	brcs	.+8      	; 0x23a <__udivmodsi4_ep>
 232:	a2 1b       	sub	r26, r18
 234:	b3 0b       	sbc	r27, r19
 236:	e4 0b       	sbc	r30, r20
 238:	f5 0b       	sbc	r31, r21

0000023a <__udivmodsi4_ep>:
 23a:	66 1f       	adc	r22, r22
 23c:	77 1f       	adc	r23, r23
 23e:	88 1f       	adc	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	1a 94       	dec	r1
 244:	69 f7       	brne	.-38     	; 0x220 <__udivmodsi4_loop>
 246:	60 95       	com	r22
 248:	70 95       	com	r23
 24a:	80 95       	com	r24
 24c:	90 95       	com	r25
 24e:	9b 01       	movw	r18, r22
 250:	ac 01       	movw	r20, r24
 252:	bd 01       	movw	r22, r26
 254:	cf 01       	movw	r24, r30
 256:	08 95       	ret

00000258 <_exit>:
 258:	f8 94       	cli

0000025a <__stop_program>:
 25a:	ff cf       	rjmp	.-2      	; 0x25a <__stop_program>
