
Interrupt2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000016e  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000926  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000082a  00000000  00000000  00000bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000328  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001704  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000426  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008d  00000000  00000000  00001ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001c2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	55 c0       	rjmp	.+170    	; 0xb8 <__vector_3>
   e:	00 00       	nop
  10:	71 c0       	rjmp	.+226    	; 0xf4 <__vector_4>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8e c0       	rjmp	.+284    	; 0x13a <__vector_7>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e6       	ldi	r30, 0x6E	; 110
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	4d d0       	rcall	.+154    	; 0x14e <main>
  b4:	5a c0       	rjmp	.+180    	; 0x16a <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <__vector_3>:
#include <avr/interrupt.h>
volatile unsigned char led = 0x01;

// LEDs turns on from LSB to MSB
ISR(INT2_vect)
{
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
	sei();
  c2:	78 94       	sei
	while(1)
	{
		PORTB = led;
  c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  c8:	88 bb       	out	0x18, r24	; 24
		led = (led << 1) | (led >> 7);
  ca:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  d2:	99 0f       	add	r25, r25
  d4:	88 1f       	adc	r24, r24
  d6:	88 27       	eor	r24, r24
  d8:	88 1f       	adc	r24, r24
  da:	89 2b       	or	r24, r25
  dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	81 ee       	ldi	r24, 0xE1	; 225
  e4:	94 e0       	ldi	r25, 0x04	; 4
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <__vector_3+0x2e>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <__vector_3+0x38>
  f0:	00 00       	nop
  f2:	e8 cf       	rjmp	.-48     	; 0xc4 <__vector_3+0xc>

000000f4 <__vector_4>:
	EIFR = 0x01;
}

// LEDs turns on from MSB to LSB
ISR(INT3_vect)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
	sei();
  fe:	78 94       	sei
	led = 0x80;
 100:	80 e8       	ldi	r24, 0x80	; 128
 102:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	while(1)
	{
		PORTB = led;
 106:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 10a:	88 bb       	out	0x18, r24	; 24
		led = (led >> 1) | (led << 7);
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 110:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 114:	28 2f       	mov	r18, r24
 116:	26 95       	lsr	r18
 118:	30 e8       	ldi	r19, 0x80	; 128
 11a:	93 9f       	mul	r25, r19
 11c:	c0 01       	movw	r24, r0
 11e:	11 24       	eor	r1, r1
 120:	82 2b       	or	r24, r18
 122:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	91 ee       	ldi	r25, 0xE1	; 225
 12a:	24 e0       	ldi	r18, 0x04	; 4
 12c:	81 50       	subi	r24, 0x01	; 1
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	20 40       	sbci	r18, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <__vector_4+0x38>
 134:	00 c0       	rjmp	.+0      	; 0x136 <__vector_4+0x42>
 136:	00 00       	nop
 138:	e6 cf       	rjmp	.-52     	; 0x106 <__vector_4+0x12>

0000013a <__vector_7>:
	EIFR = 0x01;
}

// Shift LED direction
ISR(INT6_vect)
{
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
	
}
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <main>:

// Stop LED

int main(void)
{
	DDRB = 0xFF;
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xFF;
 152:	88 bb       	out	0x18, r24	; 24
	DDRD = 0x00; //set portD as input
 154:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x08; // set PD3 as internal pull-up
 156:	88 e0       	ldi	r24, 0x08	; 8
 158:	82 bb       	out	0x12, r24	; 18
	EIMSK = 0x0C; // set INT2 and 3(00001100)
 15a:	8c e0       	ldi	r24, 0x0C	; 12
 15c:	89 bf       	out	0x39, r24	; 57
	EICRA = 0xA0; // falling edge
 15e:	80 ea       	ldi	r24, 0xA0	; 160
 160:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	sei(); // global interrupt enable
 164:	78 94       	sei
	
    /* Replace with your application code */
    while (1) 
    {
		PORTB = 0x00;
 166:	18 ba       	out	0x18, r1	; 24
 168:	fe cf       	rjmp	.-4      	; 0x166 <main+0x18>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
