
Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000124  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000198  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000087f  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c3  00000000  00000000  00000abf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000294  00000000  00000000  00001282  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001518  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e1  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001961  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000019aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4e c0       	rjmp	.+156    	; 0xae <__vector_4>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	30 d0       	rcall	.+96     	; 0x10a <main>
  aa:	3a c0       	rjmp	.+116    	; 0x120 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_4>:
// to prevent memory corruption, I used 8bit(1byte) data type
volatile char ledState = 0; // current status of LED(OFF)

// interrupt3: SW2(PD3)
ISR(INT3_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
	ledState = (ledState + 1) % 2; // convert led state
  bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	81 70       	andi	r24, 0x01	; 1
  c6:	90 78       	andi	r25, 0x80	; 128
  c8:	99 23       	and	r25, r25
  ca:	24 f4       	brge	.+8      	; 0xd4 <__vector_4+0x26>
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	8e 6f       	ori	r24, 0xFE	; 254
  d0:	9f 6f       	ori	r25, 0xFF	; 255
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	EIFR = 0x01;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	88 bf       	out	0x38, r24	; 56
}
  dc:	9f 91       	pop	r25
  de:	8f 91       	pop	r24
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <INIT_PORT>:

void INIT_PORT(void)
{
	// LED[1:8]: PORTB
	DDRB = 0xFF; // set PORTB as output
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00; // start with led off
  ee:	18 ba       	out	0x18, r1	; 24
	
	// SW1: connected to PD2, external resist
	// SW2: connected to PD3, pull-up resist
	DDRD = 0x00; // set PORTD as input
  f0:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x08; // use internal pull-up of PD3
  f2:	88 e0       	ldi	r24, 0x08	; 8
  f4:	82 bb       	out	0x12, r24	; 18
  f6:	08 95       	ret

000000f8 <INIT_INT3>:


// interrupt3 setting
void INIT_INT3(void)
{
	EIMSK = 0x08;
  f8:	88 e0       	ldi	r24, 0x08	; 8
  fa:	89 bf       	out	0x39, r24	; 57
	EICRA = 0x80; // ISC31 = 1, ISC30 = 0 -> falling edge
  fc:	80 e8       	ldi	r24, 0x80	; 128
  fe:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	SREG |= 0x80; // set 7 bit of SREG as 1 for global interrupt enable
 102:	8f b7       	in	r24, 0x3f	; 63
 104:	80 68       	ori	r24, 0x80	; 128
 106:	8f bf       	out	0x3f, r24	; 63
 108:	08 95       	ret

0000010a <main>:
}


int main(void)
{
	INIT_PORT(); // port setting
 10a:	ef df       	rcall	.-34     	; 0xea <INIT_PORT>
	INIT_INT3(); // external interrupt3 setting
 10c:	f5 df       	rcall	.-22     	; 0xf8 <INIT_INT3>
 10e:	91 e0       	ldi	r25, 0x01	; 1
	
    while (1) 
    {	
		if (ledState == 1)
		{
			PORTB = 0x01;
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
	INIT_PORT(); // port setting
	INIT_INT3(); // external interrupt3 setting
	
    while (1) 
    {	
		if (ledState == 1)
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	11 f4       	brne	.+4      	; 0x11c <main+0x12>
 118:	98 bb       	out	0x18, r25	; 24
		{
			PORTB = 0x01;
 11a:	fa cf       	rjmp	.-12     	; 0x110 <main+0x6>
 11c:	18 ba       	out	0x18, r1	; 24
		}
		else // ledState == 0
			PORTB = 0x00;
 11e:	f8 cf       	rjmp	.-16     	; 0x110 <main+0x6>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
