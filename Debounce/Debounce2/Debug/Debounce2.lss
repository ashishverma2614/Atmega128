
Debounce2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000182  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000963  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000876  00000000  00000000  00000b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031e  00000000  00000000  00001405  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001724  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044d  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a6  00000000  00000000  00001bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001c6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	1b d0       	rcall	.+54     	; 0xe0 <main>
  aa:	2f c0       	rjmp	.+94     	; 0x10a <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <getBtnState>:
	return ((ptn << 1) | (ptn >> 7));
}

int getBtnState(void)
{
	if ((PIND & 0x04) >> 2 == 0x01) // read current button state
  ae:	82 9b       	sbis	0x10, 2	; 16
  b0:	0e c0       	rjmp	.+28     	; 0xce <getBtnState+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	8f e3       	ldi	r24, 0x3F	; 63
  b4:	9c e9       	ldi	r25, 0x9C	; 156
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <getBtnState+0x8>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <getBtnState+0xe>
  bc:	00 00       	nop
	{
		_delay_ms(10);
		if((PIND & 0x04) >> 2 == 0x01) // read again
  be:	20 b3       	in	r18, 0x10	; 16
  c0:	22 fb       	bst	r18, 2
  c2:	88 27       	eor	r24, r24
  c4:	80 f9       	bld	r24, 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	22 fd       	sbrc	r18, 2
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <getBtnState+0x24>
			return 1; // 1 means proper current state
		}
	}
	else
		return 0;
}
  cc:	08 95       	ret
		{
			return 1; // 1 means proper current state
		}
	}
	else
		return 0;
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
}
  d2:	08 95       	ret

000000d4 <INIT>:

void INIT(void)
{
	DDRB = 0xFF;
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	87 bb       	out	0x17, r24	; 23
	DDRD &= ~(0x04); // input
  d8:	8a 98       	cbi	0x11, 2	; 17
	PORTD = 0x04; // internal pull-up resist
  da:	84 e0       	ldi	r24, 0x04	; 4
  dc:	82 bb       	out	0x12, r24	; 18
  de:	08 95       	ret

000000e0 <main>:
int main(void)
{
	static unsigned char previousBtnState = 0, currentBtnState;
	char ledPattern = 0x01;
	
	INIT();
  e0:	f9 df       	rcall	.-14     	; 0xd4 <INIT>
	PORTB = ledPattern; // initial setting
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	88 bb       	out	0x18, r24	; 24
	
    /* Replace with your application code */
    while (1) 
    {
		currentBtnState = getBtnState(); // get current button state
  e6:	c1 e0       	ldi	r28, 0x01	; 1
  e8:	e2 df       	rcall	.-60     	; 0xae <getBtnState>
  ea:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <currentBtnState.1741>
		
		if (currentBtnState == 0x01 && previousBtnState == 0x00)
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	39 f4       	brne	.+14     	; 0x100 <main+0x20>
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f6:	81 11       	cpse	r24, r1
  f8:	03 c0       	rjmp	.+6      	; 0x100 <main+0x20>

//unsigned char previousBtnState = 0, currentBtnstate;

char ShiftLedLeft(char ptn)
{
	return ((ptn << 1) | (ptn >> 7));
  fa:	cc 0f       	add	r28, r28
  fc:	c1 1d       	adc	r28, r1
		currentBtnState = getBtnState(); // get current button state
		
		if (currentBtnState == 0x01 && previousBtnState == 0x00)
		{
			ledPattern = ShiftLedLeft(ledPattern);
			PORTB = ledPattern;
  fe:	c8 bb       	out	0x18, r28	; 24
		}
		previousBtnState = currentBtnState;
 100:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <currentBtnState.1741>
 104:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    }
 108:	ef cf       	rjmp	.-34     	; 0xe8 <main+0x8>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
