
CLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000001b0  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d08  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d7  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003da  00000000  00000000  000018d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000454  00000000  00000000  00001d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000436  00000000  00000000  00002188  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000025be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 eb       	ldi	r30, 0xB0	; 176
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 31       	cpi	r26, 0x1A	; 26
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	69 d0       	rcall	.+210    	; 0x186 <main>
  b4:	7b c0       	rjmp	.+246    	; 0x1ac <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <LCD_CMD_Write>:
}

void LCD_SetXY(char x, char y) // set coordinate of cursor(x-axis, y-axis)
{
	if (y == 0) LCD_CMD_Write(0x80 + x);
	else if(y == 1) LCD_CMD_Write(0xC0 + y);
  b8:	e2 e6       	ldi	r30, 0x62	; 98
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	10 82       	st	Z, r1
  be:	95 e0       	ldi	r25, 0x05	; 5
  c0:	9a 95       	dec	r25
  c2:	f1 f7       	brne	.-4      	; 0xc0 <LCD_CMD_Write+0x8>
  c4:	00 00       	nop
  c6:	20 81       	ld	r18, Z
  c8:	94 e0       	ldi	r25, 0x04	; 4
  ca:	29 27       	eor	r18, r25
  cc:	20 83       	st	Z, r18
  ce:	82 bb       	out	0x12, r24	; 18
  d0:	85 e0       	ldi	r24, 0x05	; 5
  d2:	8a 95       	dec	r24
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCD_CMD_Write+0x1a>
  d6:	00 00       	nop
  d8:	80 81       	ld	r24, Z
  da:	98 27       	eor	r25, r24
  dc:	90 83       	st	Z, r25
  de:	8f e1       	ldi	r24, 0x1F	; 31
  e0:	9e e4       	ldi	r25, 0x4E	; 78
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCD_CMD_Write+0x2a>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCD_CMD_Write+0x30>
  e8:	00 00       	nop
  ea:	08 95       	ret

000000ec <LCD_Data_Write>:
  ec:	e2 e6       	ldi	r30, 0x62	; 98
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	90 83       	st	Z, r25
  f4:	95 e0       	ldi	r25, 0x05	; 5
  f6:	9a 95       	dec	r25
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_Data_Write+0xa>
  fa:	00 00       	nop
  fc:	20 81       	ld	r18, Z
  fe:	94 e0       	ldi	r25, 0x04	; 4
 100:	29 27       	eor	r18, r25
 102:	20 83       	st	Z, r18
 104:	82 bb       	out	0x12, r24	; 18
 106:	85 e0       	ldi	r24, 0x05	; 5
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_Data_Write+0x1c>
 10c:	00 00       	nop
 10e:	80 81       	ld	r24, Z
 110:	98 27       	eor	r25, r24
 112:	90 83       	st	Z, r25
 114:	8f e1       	ldi	r24, 0x1F	; 31
 116:	9e e4       	ldi	r25, 0x4E	; 78
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCD_Data_Write+0x2c>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LCD_Data_Write+0x32>
 11e:	00 00       	nop
 120:	08 95       	ret

00000122 <LCD_PutString>:
}

void LCD_PutString(const char * str) // const for preventing data corruption
{
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	ec 01       	movw	r28, r24
	while (*str != '\0') 
 128:	88 81       	ld	r24, Y
 12a:	88 23       	and	r24, r24
 12c:	29 f0       	breq	.+10     	; 0x138 <LCD_PutString+0x16>
 12e:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Data_Write(*str++);
 130:	dd df       	rcall	.-70     	; 0xec <LCD_Data_Write>
	else if(y == 1) LCD_CMD_Write(0xC0 + y);
}

void LCD_PutString(const char * str) // const for preventing data corruption
{
	while (*str != '\0') 
 132:	89 91       	ld	r24, Y+
 134:	81 11       	cpse	r24, r1
 136:	fc cf       	rjmp	.-8      	; 0x130 <LCD_PutString+0xe>
	{
		LCD_Data_Write(*str++);
	}
}
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <LCD_INIT>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	80 e7       	ldi	r24, 0x70	; 112
 142:	92 e0       	ldi	r25, 0x02	; 2
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <LCD_INIT+0x6>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCD_INIT+0x10>
 14e:	00 00       	nop
void LCD_INIT(void) // 8bit initialization
{	/* power-on */
	_delay_ms(50); // wait for more than 30ms after VDD rises to 4.5V
	
	//function set
	LCD_CMD_Write(0x38); // 0b0011_1000
 150:	88 e3       	ldi	r24, 0x38	; 56
 152:	b2 df       	rcall	.-156    	; 0xb8 <LCD_CMD_Write>
 154:	8f e9       	ldi	r24, 0x9F	; 159
 156:	9f e0       	ldi	r25, 0x0F	; 15
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCD_INIT+0x1a>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <LCD_INIT+0x20>
 15e:	00 00       	nop
	_delay_ms(1); // wait for more than 39us after function set
	
	//display on/off control
	LCD_CMD_Write(0x0C); // 0b0000_1100: entire display-on(1), no_cursor(0), no-blink(0) 
 160:	8c e0       	ldi	r24, 0x0C	; 12
 162:	aa df       	rcall	.-172    	; 0xb8 <LCD_CMD_Write>
 164:	8f e9       	ldi	r24, 0x9F	; 159
 166:	9f e0       	ldi	r25, 0x0F	; 15
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCD_INIT+0x2a>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCD_INIT+0x30>
	_delay_ms(1); //wait for more than 39us after display on/off control
	
	// display clear
	LCD_CMD_Write(0x01);
 16e:	00 00       	nop
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	a2 df       	rcall	.-188    	; 0xb8 <LCD_CMD_Write>
 174:	8f e9       	ldi	r24, 0x9F	; 159
 176:	9f e0       	ldi	r25, 0x0F	; 15
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_INIT+0x3a>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_INIT+0x40>
	_delay_ms(1); // wait for more than 1.53ms after display clear
	
	// entry mode set
	LCD_CMD_Write(0x06); // 0b0000_0110: move to the right(1), no display move mode(0)
 17e:	00 00       	nop
 180:	86 e0       	ldi	r24, 0x06	; 6
 182:	9a cf       	rjmp	.-204    	; 0xb8 <LCD_CMD_Write>
 184:	08 95       	ret

00000186 <main>:
	
}

int main(void)
{
	DDRD = 0xFF; PORTD = 0xFF;
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	81 bb       	out	0x11, r24	; 17
 18a:	82 bb       	out	0x12, r24	; 18
	DDRF = 0xFF; PORTF = 0x00;
 18c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 190:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	char * str1 = "Hello World";
	char  * str2 = "Good Morning";
	
	LCD_INIT();
 194:	d4 df       	rcall	.-88     	; 0x13e <LCD_INIT>
	_delay_ms(5);
}

void LCD_SetXY(char x, char y) // set coordinate of cursor(x-axis, y-axis)
{
	if (y == 0) LCD_CMD_Write(0x80 + x);
 196:	80 e8       	ldi	r24, 0x80	; 128
 198:	8f df       	rcall	.-226    	; 0xb8 <LCD_CMD_Write>
	char * str1 = "Hello World";
	char  * str2 = "Good Morning";
	
	LCD_INIT();
	LCD_SetXY(0, 0);
	LCD_PutString(str1);
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	91 e0       	ldi	r25, 0x01	; 1
}

void LCD_SetXY(char x, char y) // set coordinate of cursor(x-axis, y-axis)
{
	if (y == 0) LCD_CMD_Write(0x80 + x);
	else if(y == 1) LCD_CMD_Write(0xC0 + y);
 19e:	c1 df       	rcall	.-126    	; 0x122 <LCD_PutString>
 1a0:	81 ec       	ldi	r24, 0xC1	; 193
	
	LCD_INIT();
	LCD_SetXY(0, 0);
	LCD_PutString(str1);
	LCD_SetXY(0, 1);
	LCD_PutString(str2);
 1a2:	8a df       	rcall	.-236    	; 0xb8 <LCD_CMD_Write>
 1a4:	8c e0       	ldi	r24, 0x0C	; 12
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	bc df       	rcall	.-136    	; 0x122 <LCD_PutString>
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <main+0x24>

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
