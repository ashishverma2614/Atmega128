
HealthCareSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  000015d2  00001666  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000059  008001a0  008001a0  00001706  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001706  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001764  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000169e  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d9b  00000000  00000000  00002f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eb4  00000000  00000000  00003d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  00004bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a1  00000000  00000000  00004f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a61  00000000  00000000  000055b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00006016  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	45 c1       	rjmp	.+650    	; 0x2cc <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 ed       	ldi	r30, 0xD2	; 210
      a0:	f5 e1       	ldi	r31, 0x15	; 21
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 3a       	cpi	r26, 0xA0	; 160
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a0 ea       	ldi	r26, 0xA0	; 160
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a9 3f       	cpi	r26, 0xF9	; 249
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	1d d3       	rcall	.+1594   	; 0x6fe <main>
      c4:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <timer1_init>:
      ca:	83 e8       	ldi	r24, 0x83	; 131
      cc:	8f bd       	out	0x2f, r24	; 47
      ce:	8b e0       	ldi	r24, 0x0B	; 11
      d0:	8e bd       	out	0x2e, r24	; 46
      d2:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
      d6:	1d bc       	out	0x2d, r1	; 45
      d8:	1c bc       	out	0x2c, r1	; 44
      da:	1b bc       	out	0x2b, r1	; 43
      dc:	1a bc       	out	0x2a, r1	; 42
      de:	08 95       	ret

000000e0 <dcmotor_spin>:
      e0:	83 33       	cpi	r24, 0x33	; 51
      e2:	08 f0       	brcs	.+2      	; 0xe6 <dcmotor_spin+0x6>
      e4:	82 e3       	ldi	r24, 0x32	; 50
      e6:	68 2f       	mov	r22, r24
      e8:	70 e0       	ldi	r23, 0x00	; 0
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	19 d5       	rcall	.+2610   	; 0xb22 <__floatsisf>
      f0:	24 e1       	ldi	r18, 0x14	; 20
      f2:	3e ea       	ldi	r19, 0xAE	; 174
      f4:	43 ea       	ldi	r20, 0xA3	; 163
      f6:	51 e4       	ldi	r21, 0x41	; 65
      f8:	a0 d5       	rcall	.+2880   	; 0xc3a <__mulsf3>
      fa:	e5 d4       	rcall	.+2506   	; 0xac6 <__fixunssfsi>
      fc:	7b bd       	out	0x2b, r23	; 43
      fe:	6a bd       	out	0x2a, r22	; 42
     100:	08 95       	ret

00000102 <dcmotor_init>:
     102:	87 b3       	in	r24, 0x17	; 23
     104:	80 66       	ori	r24, 0x60	; 96
     106:	87 bb       	out	0x17, r24	; 23
     108:	c6 98       	cbi	0x18, 6	; 24
     10a:	df cf       	rjmp	.-66     	; 0xca <timer1_init>
     10c:	08 95       	ret

0000010e <getkey>:

volatile unsigned char key_flag;

// 폴링 방식으로 키의 입력이 while문에서 호출된다
unsigned char getkey(unsigned char keyin) 
{
     10e:	28 2f       	mov	r18, r24
	unsigned char key; // 키 값을 받을 변수 설정(키 값은 양수)

	key_flag = 0; // 키의 완전한 입력 확인을 위한 플래그(완전하게 입력되며 1로 set)
     110:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <key_flag>

	key = ~KEY_IN & 0xF0; //키 값을 읽는다(입력 포트에 마스킹): 키는 PF[7:5]에 풀업 방식의 저항으로 연결
     114:	91 b1       	in	r25, 0x01	; 1
	if( key ) { // 키 값이 있다면 1이 된다(반전시켜서 마스킹을 했으므로)
     116:	90 95       	com	r25
     118:	90 7f       	andi	r25, 0xF0	; 240
     11a:	09 f1       	breq	.+66     	; 0x15e <getkey+0x50>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     11c:	81 ee       	ldi	r24, 0xE1	; 225
     11e:	94 e0       	ldi	r25, 0x04	; 4
     120:	01 97       	sbiw	r24, 0x01	; 1
     122:	f1 f7       	brne	.-4      	; 0x120 <getkey+0x12>
     124:	00 c0       	rjmp	.+0      	; 0x126 <getkey+0x18>
     126:	00 00       	nop
		_delay_ms(5); // 일정 시간을 주고
		key = ~KEY_IN & 0xF0; // 채터링을 줄이기 위해서 다시 읽는다
     128:	91 b1       	in	r25, 0x01	; 1
     12a:	90 95       	com	r25
     12c:	89 2f       	mov	r24, r25
     12e:	80 7f       	andi	r24, 0xF0	; 240
		if( key ) { // 키 값이 있으면(즉, 동일한 키 값이면), 각각의 키 입력을 분리한다
     130:	b1 f0       	breq	.+44     	; 0x15e <getkey+0x50>
			if( key == 0x10 )		key = KEY_START; //sw1
     132:	80 31       	cpi	r24, 0x10	; 16
     134:	61 f0       	breq	.+24     	; 0x14e <getkey+0x40>
			else if( key == 0x20 )	key = KEY_STOP; //sw2
     136:	80 32       	cpi	r24, 0x20	; 32
     138:	61 f0       	breq	.+24     	; 0x152 <getkey+0x44>
			else if( key == 0x40 )	key = KEY_UP; // sw3
     13a:	80 34       	cpi	r24, 0x40	; 64
     13c:	61 f0       	breq	.+24     	; 0x156 <getkey+0x48>
			else if( key == 0x80 )	key = KEY_ENTER; //sw4
     13e:	80 38       	cpi	r24, 0x80	; 128
     140:	59 f4       	brne	.+22     	; 0x158 <getkey+0x4a>
     142:	84 e0       	ldi	r24, 0x04	; 4
     144:	09 c0       	rjmp	.+18     	; 0x158 <getkey+0x4a>
		}
	}
	//함수 안에서 읽은 키 값과, 파라미터로 들어온 키 값이 같지 않다면, "즉, 새로운 키 값이라면" -> 제대로 입력이 들어온 것
	if( key && (key != keyin) )	key_flag = 1; // 플래그를 1로 set(새로운 키 값이 들어 왔다는 신호)
     146:	91 e0       	ldi	r25, 0x01	; 1
     148:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <key_flag>
     14c:	08 95       	ret
	key = ~KEY_IN & 0xF0; //키 값을 읽는다(입력 포트에 마스킹): 키는 PF[7:5]에 풀업 방식의 저항으로 연결
	if( key ) { // 키 값이 있다면 1이 된다(반전시켜서 마스킹을 했으므로)
		_delay_ms(5); // 일정 시간을 주고
		key = ~KEY_IN & 0xF0; // 채터링을 줄이기 위해서 다시 읽는다
		if( key ) { // 키 값이 있으면(즉, 동일한 키 값이면), 각각의 키 입력을 분리한다
			if( key == 0x10 )		key = KEY_START; //sw1
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	03 c0       	rjmp	.+6      	; 0x158 <getkey+0x4a>
			else if( key == 0x20 )	key = KEY_STOP; //sw2
     152:	82 e0       	ldi	r24, 0x02	; 2
     154:	01 c0       	rjmp	.+2      	; 0x158 <getkey+0x4a>
			else if( key == 0x40 )	key = KEY_UP; // sw3
     156:	83 e0       	ldi	r24, 0x03	; 3
			else if( key == 0x80 )	key = KEY_ENTER; //sw4
		}
	}
	//함수 안에서 읽은 키 값과, 파라미터로 들어온 키 값이 같지 않다면, "즉, 새로운 키 값이라면" -> 제대로 입력이 들어온 것
	if( key && (key != keyin) )	key_flag = 1; // 플래그를 1로 set(새로운 키 값이 들어 왔다는 신호)
     158:	28 13       	cpse	r18, r24
     15a:	f5 cf       	rjmp	.-22     	; 0x146 <getkey+0x38>
     15c:	08 95       	ret

volatile unsigned char key_flag;

// 폴링 방식으로 키의 입력이 while문에서 호출된다
unsigned char getkey(unsigned char keyin) 
{
     15e:	80 e0       	ldi	r24, 0x00	; 0
	}
	//함수 안에서 읽은 키 값과, 파라미터로 들어온 키 값이 같지 않다면, "즉, 새로운 키 값이라면" -> 제대로 입력이 들어온 것
	if( key && (key != keyin) )	key_flag = 1; // 플래그를 1로 set(새로운 키 값이 들어 왔다는 신호)

	return key; // 그제서야 새로 들어온 키 값을 반환한다.
}
     160:	08 95       	ret

00000162 <key_init>:

void key_init(void)
{
	KEY_DDR &= 0x0F; // 스위치 포트를 입력으로 설정한다
     162:	82 b1       	in	r24, 0x02	; 2
     164:	8f 70       	andi	r24, 0x0F	; 15
     166:	82 b9       	out	0x02, r24	; 2
     168:	08 95       	ret

0000016a <lcd_busycheck>:
     16a:	8f e0       	ldi	r24, 0x0F	; 15
     16c:	84 bb       	out	0x14, r24	; 20
     16e:	15 ba       	out	0x15, r1	; 21
     170:	a9 9a       	sbi	0x15, 1	; 21
     172:	aa 9a       	sbi	0x15, 2	; 21
     174:	9f 99       	sbic	0x13, 7	; 19
     176:	fe cf       	rjmp	.-4      	; 0x174 <lcd_busycheck+0xa>
     178:	aa 98       	cbi	0x15, 2	; 21
     17a:	8f ef       	ldi	r24, 0xFF	; 255
     17c:	84 bb       	out	0x14, r24	; 20
     17e:	08 95       	ret

00000180 <lcd_command_write>:
     180:	cf 93       	push	r28
     182:	c8 2f       	mov	r28, r24
     184:	f2 df       	rcall	.-28     	; 0x16a <lcd_busycheck>
     186:	15 ba       	out	0x15, r1	; 21
     188:	85 b3       	in	r24, 0x15	; 21
     18a:	9c 2f       	mov	r25, r28
     18c:	90 7f       	andi	r25, 0xF0	; 240
     18e:	89 2b       	or	r24, r25
     190:	85 bb       	out	0x15, r24	; 21
     192:	aa 9a       	sbi	0x15, 2	; 21
     194:	aa 98       	cbi	0x15, 2	; 21
     196:	85 b3       	in	r24, 0x15	; 21
     198:	8f 70       	andi	r24, 0x0F	; 15
     19a:	85 bb       	out	0x15, r24	; 21
     19c:	25 b3       	in	r18, 0x15	; 21
     19e:	30 e1       	ldi	r19, 0x10	; 16
     1a0:	c3 9f       	mul	r28, r19
     1a2:	c0 01       	movw	r24, r0
     1a4:	11 24       	eor	r1, r1
     1a6:	82 2b       	or	r24, r18
     1a8:	85 bb       	out	0x15, r24	; 21
     1aa:	aa 9a       	sbi	0x15, 2	; 21
     1ac:	aa 98       	cbi	0x15, 2	; 21
     1ae:	83 ef       	ldi	r24, 0xF3	; 243
     1b0:	91 e0       	ldi	r25, 0x01	; 1
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_command_write+0x32>
     1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_command_write+0x38>
     1b8:	00 00       	nop
     1ba:	cf 91       	pop	r28
     1bc:	08 95       	ret

000001be <lcd_data_write>:
     1be:	15 ba       	out	0x15, r1	; 21
     1c0:	a8 9a       	sbi	0x15, 0	; 21
     1c2:	95 b3       	in	r25, 0x15	; 21
     1c4:	28 2f       	mov	r18, r24
     1c6:	20 7f       	andi	r18, 0xF0	; 240
     1c8:	92 2b       	or	r25, r18
     1ca:	95 bb       	out	0x15, r25	; 21
     1cc:	aa 9a       	sbi	0x15, 2	; 21
     1ce:	aa 98       	cbi	0x15, 2	; 21
     1d0:	95 b3       	in	r25, 0x15	; 21
     1d2:	9f 70       	andi	r25, 0x0F	; 15
     1d4:	95 bb       	out	0x15, r25	; 21
     1d6:	25 b3       	in	r18, 0x15	; 21
     1d8:	30 e1       	ldi	r19, 0x10	; 16
     1da:	83 9f       	mul	r24, r19
     1dc:	c0 01       	movw	r24, r0
     1de:	11 24       	eor	r1, r1
     1e0:	82 2b       	or	r24, r18
     1e2:	85 bb       	out	0x15, r24	; 21
     1e4:	aa 9a       	sbi	0x15, 2	; 21
     1e6:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e8:	80 e1       	ldi	r24, 0x10	; 16
     1ea:	8a 95       	dec	r24
     1ec:	f1 f7       	brne	.-4      	; 0x1ea <lcd_data_write+0x2c>
     1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <lcd_data_write+0x32>
     1f0:	08 95       	ret

000001f2 <lcd_string>:
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
     1f6:	ec 01       	movw	r28, r24
     1f8:	88 81       	ld	r24, Y
     1fa:	88 23       	and	r24, r24
     1fc:	29 f0       	breq	.+10     	; 0x208 <lcd_string+0x16>
     1fe:	21 96       	adiw	r28, 0x01	; 1
     200:	de df       	rcall	.-68     	; 0x1be <lcd_data_write>
     202:	89 91       	ld	r24, Y+
     204:	81 11       	cpse	r24, r1
     206:	fc cf       	rjmp	.-8      	; 0x200 <lcd_string+0xe>
     208:	df 91       	pop	r29
     20a:	cf 91       	pop	r28
     20c:	08 95       	ret

0000020e <lcd_gotoxy>:
     20e:	62 95       	swap	r22
     210:	66 0f       	add	r22, r22
     212:	66 0f       	add	r22, r22
     214:	60 7c       	andi	r22, 0xC0	; 192
     216:	80 68       	ori	r24, 0x80	; 128
     218:	86 2b       	or	r24, r22
     21a:	b2 cf       	rjmp	.-156    	; 0x180 <lcd_command_write>
     21c:	08 95       	ret

0000021e <lcd_init>:
     21e:	8f ef       	ldi	r24, 0xFF	; 255
     220:	84 bb       	out	0x14, r24	; 20
     222:	80 e2       	ldi	r24, 0x20	; 32
     224:	ad df       	rcall	.-166    	; 0x180 <lcd_command_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     226:	83 ec       	ldi	r24, 0xC3	; 195
     228:	99 e0       	ldi	r25, 0x09	; 9
     22a:	01 97       	sbiw	r24, 0x01	; 1
     22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_init+0xc>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_init+0x12>
     230:	00 00       	nop
     232:	80 e2       	ldi	r24, 0x20	; 32
     234:	a5 df       	rcall	.-182    	; 0x180 <lcd_command_write>
     236:	83 ec       	ldi	r24, 0xC3	; 195
     238:	99 e0       	ldi	r25, 0x09	; 9
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_init+0x1c>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_init+0x22>
     240:	00 00       	nop
     242:	80 e2       	ldi	r24, 0x20	; 32
     244:	9d df       	rcall	.-198    	; 0x180 <lcd_command_write>
     246:	83 ec       	ldi	r24, 0xC3	; 195
     248:	99 e0       	ldi	r25, 0x09	; 9
     24a:	01 97       	sbiw	r24, 0x01	; 1
     24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_init+0x2c>
     24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_init+0x32>
     250:	00 00       	nop
     252:	88 e2       	ldi	r24, 0x28	; 40
     254:	95 df       	rcall	.-214    	; 0x180 <lcd_command_write>
     256:	88 e0       	ldi	r24, 0x08	; 8
     258:	93 df       	rcall	.-218    	; 0x180 <lcd_command_write>
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	91 df       	rcall	.-222    	; 0x180 <lcd_command_write>
     25e:	86 e0       	ldi	r24, 0x06	; 6
     260:	8f df       	rcall	.-226    	; 0x180 <lcd_command_write>
     262:	83 ec       	ldi	r24, 0xC3	; 195
     264:	99 e0       	ldi	r25, 0x09	; 9
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <lcd_init+0x48>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <lcd_init+0x4e>
     26c:	00 00       	nop
     26e:	8c e0       	ldi	r24, 0x0C	; 12
     270:	87 cf       	rjmp	.-242    	; 0x180 <lcd_command_write>
     272:	08 95       	ret

00000274 <led_light>:
// led를 전달된 param의 형식으로 켜는 함수
void led_light(unsigned char led)
{
	unsigned char tmp = 0;

	LED_OUT |= 0xFF; // all off
     274:	92 b3       	in	r25, 0x12	; 18
     276:	9f ef       	ldi	r25, 0xFF	; 255
     278:	92 bb       	out	0x12, r25	; 18
	for( int i = 0; i < led; i++ )	tmp |= (0x01 << i);
     27a:	68 2f       	mov	r22, r24
     27c:	70 e0       	ldi	r23, 0x00	; 0
     27e:	16 16       	cp	r1, r22
     280:	17 06       	cpc	r1, r23
     282:	9c f4       	brge	.+38     	; 0x2aa <led_light+0x36>
     284:	20 e0       	ldi	r18, 0x00	; 0
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	e1 e0       	ldi	r30, 0x01	; 1
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	af 01       	movw	r20, r30
     290:	02 2e       	mov	r0, r18
     292:	02 c0       	rjmp	.+4      	; 0x298 <led_light+0x24>
     294:	44 0f       	add	r20, r20
     296:	55 1f       	adc	r21, r21
     298:	0a 94       	dec	r0
     29a:	e2 f7       	brpl	.-8      	; 0x294 <led_light+0x20>
     29c:	94 2b       	or	r25, r20
     29e:	2f 5f       	subi	r18, 0xFF	; 255
     2a0:	3f 4f       	sbci	r19, 0xFF	; 255
     2a2:	26 17       	cp	r18, r22
     2a4:	37 07       	cpc	r19, r23
     2a6:	99 f7       	brne	.-26     	; 0x28e <led_light+0x1a>
     2a8:	01 c0       	rjmp	.+2      	; 0x2ac <led_light+0x38>
#define LED_DDR	DDRD

// led를 전달된 param의 형식으로 켜는 함수
void led_light(unsigned char led)
{
	unsigned char tmp = 0;
     2aa:	90 e0       	ldi	r25, 0x00	; 0

	LED_OUT |= 0xFF; // all off
	for( int i = 0; i < led; i++ )	tmp |= (0x01 << i);
		LED_OUT &= ~tmp;
     2ac:	82 b3       	in	r24, 0x12	; 18
     2ae:	90 95       	com	r25
     2b0:	98 23       	and	r25, r24
     2b2:	92 bb       	out	0x12, r25	; 18
     2b4:	08 95       	ret

000002b6 <led_init>:
}

// led의 초기 상태 설정 함수
void led_init(void)
{
	LED_DDR = 0xFF;
     2b6:	8f ef       	ldi	r24, 0xFF	; 255
     2b8:	81 bb       	out	0x11, r24	; 17
	LED_OUT = 0xFF;
     2ba:	82 bb       	out	0x12, r24	; 18
     2bc:	08 95       	ret

000002be <timer0_init>:
};


void timer0_init(void)
{
	TCCR0 = 0x06; // (1 << CS02) | (1 << CS01), normal mode(OC0 disconnected), 256 scale
     2be:	86 e0       	ldi	r24, 0x06	; 6
     2c0:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 256 - 250;
     2c2:	82 bf       	out	0x32, r24	; 50
	TIMSK |= 0x01; // (1 << TOIE0)
     2c4:	87 b7       	in	r24, 0x37	; 55
     2c6:	81 60       	ori	r24, 0x01	; 1
     2c8:	87 bf       	out	0x37, r24	; 55
     2ca:	08 95       	ret

000002cc <__vector_16>:
}

// 4ms x 250 = 1s
ISR(TIMER0_OVF_vect) // 1) 오버플로우 통한 1초의 계산 및 단위 초기화 설정 2) 운동시간의 계산 및 단위 초기화 설정 3) 초당 칼로리 계산
{
     2cc:	1f 92       	push	r1
     2ce:	0f 92       	push	r0
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	0f 92       	push	r0
     2d4:	11 24       	eor	r1, r1
     2d6:	0b b6       	in	r0, 0x3b	; 59
     2d8:	0f 92       	push	r0
     2da:	2f 93       	push	r18
     2dc:	3f 93       	push	r19
     2de:	4f 93       	push	r20
     2e0:	5f 93       	push	r21
     2e2:	6f 93       	push	r22
     2e4:	7f 93       	push	r23
     2e6:	8f 93       	push	r24
     2e8:	9f 93       	push	r25
     2ea:	af 93       	push	r26
     2ec:	bf 93       	push	r27
     2ee:	ef 93       	push	r30
     2f0:	ff 93       	push	r31
	TCNT0 = 256 - 250;
     2f2:	86 e0       	ldi	r24, 0x06	; 6
     2f4:	82 bf       	out	0x32, r24	; 50

	// calc 1(sec) + time reset
	if( ++tick0 == 250 ) { // 4ms x 250 = 1sec
     2f6:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <tick0>
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <tick0>
     300:	8a 3f       	cpi	r24, 0xFA	; 250
     302:	b9 f4       	brne	.+46     	; 0x332 <__vector_16+0x66>
		tick0 = 0;
     304:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <tick0>
		// each time digit reset
		if( ++current.seconds == 60 ) {
     308:	e3 ee       	ldi	r30, 0xE3	; 227
     30a:	f1 e0       	ldi	r31, 0x01	; 1
     30c:	82 81       	ldd	r24, Z+2	; 0x02
     30e:	8f 5f       	subi	r24, 0xFF	; 255
     310:	82 83       	std	Z+2, r24	; 0x02
     312:	8c 33       	cpi	r24, 0x3C	; 60
     314:	71 f4       	brne	.+28     	; 0x332 <__vector_16+0x66>
			current.seconds = 0;
     316:	12 82       	std	Z+2, r1	; 0x02
			if( ++current.minute == 60 ) {
     318:	81 81       	ldd	r24, Z+1	; 0x01
     31a:	8f 5f       	subi	r24, 0xFF	; 255
     31c:	81 83       	std	Z+1, r24	; 0x01
     31e:	8c 33       	cpi	r24, 0x3C	; 60
     320:	41 f4       	brne	.+16     	; 0x332 <__vector_16+0x66>
				current.minute = 0;
     322:	11 82       	std	Z+1, r1	; 0x01
				if( ++current.hour == 24 )	current.hour = 0;
     324:	80 81       	ld	r24, Z
     326:	8f 5f       	subi	r24, 0xFF	; 255
     328:	80 83       	st	Z, r24
     32a:	88 31       	cpi	r24, 0x18	; 24
     32c:	11 f4       	brne	.+4      	; 0x332 <__vector_16+0x66>
     32e:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <current>
			}
		}
	}
	
	if( mode == START_MODE ) {
     332:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <mode>
     336:	81 30       	cpi	r24, 0x01	; 1
     338:	09 f0       	breq	.+2      	; 0x33c <__vector_16+0x70>
     33a:	52 c0       	rjmp	.+164    	; 0x3e0 <__vector_16+0x114>
		if( ++section_tick == 250 ) {
     33c:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <section_tick>
     340:	8f 5f       	subi	r24, 0xFF	; 255
     342:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <section_tick>
     346:	8a 3f       	cpi	r24, 0xFA	; 250
     348:	09 f0       	breq	.+2      	; 0x34c <__vector_16+0x80>
     34a:	4a c0       	rjmp	.+148    	; 0x3e0 <__vector_16+0x114>
			section_tick = 0;
     34c:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <section_tick>

			if( ++section.seconds == 60 ) {
     350:	e0 ee       	ldi	r30, 0xE0	; 224
     352:	f1 e0       	ldi	r31, 0x01	; 1
     354:	82 81       	ldd	r24, Z+2	; 0x02
     356:	8f 5f       	subi	r24, 0xFF	; 255
     358:	82 83       	std	Z+2, r24	; 0x02
     35a:	8c 33       	cpi	r24, 0x3C	; 60
     35c:	71 f4       	brne	.+28     	; 0x37a <__vector_16+0xae>
				section.seconds = 0;
     35e:	12 82       	std	Z+2, r1	; 0x02
				if( ++section.minute == 60 ) {
     360:	81 81       	ldd	r24, Z+1	; 0x01
     362:	8f 5f       	subi	r24, 0xFF	; 255
     364:	81 83       	std	Z+1, r24	; 0x01
     366:	8c 33       	cpi	r24, 0x3C	; 60
     368:	41 f4       	brne	.+16     	; 0x37a <__vector_16+0xae>
					section.minute = 0;
     36a:	11 82       	std	Z+1, r1	; 0x01
					if( ++section.hour == 24 )	section.hour = 0;
     36c:	80 81       	ld	r24, Z
     36e:	8f 5f       	subi	r24, 0xFF	; 255
     370:	80 83       	st	Z, r24
     372:	88 31       	cpi	r24, 0x18	; 24
     374:	11 f4       	brne	.+4      	; 0x37a <__vector_16+0xae>
     376:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <section>
				}
			}
			// 타이머 내에서 단위시간에 근거한 속도 당 칼로리 소비량
			if( velocity > 0 && velocity < 15 )		kcal += 0.105; // 1초당 .105가 축적된다
     37a:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <velocity>
     37e:	88 23       	and	r24, r24
     380:	d1 f0       	breq	.+52     	; 0x3b6 <__vector_16+0xea>
     382:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <velocity>
     386:	8f 30       	cpi	r24, 0x0F	; 15
     388:	b0 f4       	brcc	.+44     	; 0x3b6 <__vector_16+0xea>
     38a:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <kcal>
     38e:	70 91 ec 01 	lds	r23, 0x01EC	; 0x8001ec <kcal+0x1>
     392:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <kcal+0x2>
     396:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <kcal+0x3>
     39a:	2d e3       	ldi	r18, 0x3D	; 61
     39c:	3a e0       	ldi	r19, 0x0A	; 10
     39e:	47 ed       	ldi	r20, 0xD7	; 215
     3a0:	5d e3       	ldi	r21, 0x3D	; 61
     3a2:	c5 d2       	rcall	.+1418   	; 0x92e <__addsf3>
     3a4:	60 93 eb 01 	sts	0x01EB, r22	; 0x8001eb <kcal>
     3a8:	70 93 ec 01 	sts	0x01EC, r23	; 0x8001ec <kcal+0x1>
     3ac:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <kcal+0x2>
     3b0:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <kcal+0x3>
     3b4:	15 c0       	rjmp	.+42     	; 0x3e0 <__vector_16+0x114>
			else									kcal += 0.14;
     3b6:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <kcal>
     3ba:	70 91 ec 01 	lds	r23, 0x01EC	; 0x8001ec <kcal+0x1>
     3be:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <kcal+0x2>
     3c2:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <kcal+0x3>
     3c6:	29 e2       	ldi	r18, 0x29	; 41
     3c8:	3c e5       	ldi	r19, 0x5C	; 92
     3ca:	4f e0       	ldi	r20, 0x0F	; 15
     3cc:	5e e3       	ldi	r21, 0x3E	; 62
     3ce:	af d2       	rcall	.+1374   	; 0x92e <__addsf3>
     3d0:	60 93 eb 01 	sts	0x01EB, r22	; 0x8001eb <kcal>
     3d4:	70 93 ec 01 	sts	0x01EC, r23	; 0x8001ec <kcal+0x1>
     3d8:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <kcal+0x2>
     3dc:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <kcal+0x3>
		}
	}
}
     3e0:	ff 91       	pop	r31
     3e2:	ef 91       	pop	r30
     3e4:	bf 91       	pop	r27
     3e6:	af 91       	pop	r26
     3e8:	9f 91       	pop	r25
     3ea:	8f 91       	pop	r24
     3ec:	7f 91       	pop	r23
     3ee:	6f 91       	pop	r22
     3f0:	5f 91       	pop	r21
     3f2:	4f 91       	pop	r20
     3f4:	3f 91       	pop	r19
     3f6:	2f 91       	pop	r18
     3f8:	0f 90       	pop	r0
     3fa:	0b be       	out	0x3b, r0	; 59
     3fc:	0f 90       	pop	r0
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	0f 90       	pop	r0
     402:	1f 90       	pop	r1
     404:	18 95       	reti

00000406 <mcu_init>:

void mcu_init(void) // mcu동작 초기화(mcu와 연관하는 각종 외부 변수와 함수들도 동시에 초기화)
{
	/*parts init */
	dcmotor_init();
     406:	7d de       	rcall	.-774    	; 0x102 <dcmotor_init>
	key_init();
     408:	ac de       	rcall	.-680    	; 0x162 <key_init>
	var_init();
     40a:	8c d2       	rcall	.+1304   	; 0x924 <var_init>
	lcd_init();
     40c:	08 df       	rcall	.-496    	; 0x21e <lcd_init>
     40e:	53 df       	rcall	.-346    	; 0x2b6 <led_init>
	led_init();
     410:	56 cf       	rjmp	.-340    	; 0x2be <timer0_init>
     412:	08 95       	ret

00000414 <variable_init>:
	/* timer init */
	timer0_init();
     414:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <tick0>
     418:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <mode>
}

void variable_init(void) // 타이머 시간과 동작모드의 초기화
{
	tick0 = 0;
	mode = NO_MODE; // 시작도 정지도 아닌 상태
     41c:	08 95       	ret

0000041e <start_healthcare>:
}

void start_healthcare(void) // 헬스 케어 시스템을 LED, DC모터, LCD의 초기 구동과 더불어 시작한다
{
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
	int i;
		
	// Q1: 1) 3초동안 모터 회전, 2) 3초동안 LED전체 0.5초간 점멸, 3) LCD초기 화면 표시 및 3초간 점멸
	
	dcmotor_spin(255); // speed 255로 모터를 회전시키라(시작)
     422:	8f ef       	ldi	r24, 0xFF	; 255
     424:	5d de       	rcall	.-838    	; 0xe0 <dcmotor_spin>

	// lcd초기 구동화면 세팅
	lcd_gotoxy(0, 0); // 1라인의 첫칸으로 가서 
     426:	60 e0       	ldi	r22, 0x00	; 0
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	f1 de       	rcall	.-542    	; 0x20e <lcd_gotoxy>
	lcd_string("  Health Care   "); // 써라
     42c:	86 e0       	ldi	r24, 0x06	; 6
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	e0 de       	rcall	.-576    	; 0x1f2 <lcd_string>
	lcd_gotoxy(0, 1); // 둘째줄로 옮겨서
     432:	61 e0       	ldi	r22, 0x01	; 1
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	eb de       	rcall	.-554    	; 0x20e <lcd_gotoxy>
	lcd_string("  Bike System..."); //써라
     438:	87 e1       	ldi	r24, 0x17	; 23
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	da de       	rcall	.-588    	; 0x1f2 <lcd_string>
     43e:	c3 e0       	ldi	r28, 0x03	; 3

	for( i = 0; i < 3; i++ ) { // 1초씩 3번 반복한다.
		lcd_command_write(LCD_ON); // LCD를 0.5초 동안 켜라
     440:	d0 e0       	ldi	r29, 0x00	; 0
     442:	8c e0       	ldi	r24, 0x0C	; 12
     444:	9d de       	rcall	.-710    	; 0x180 <lcd_command_write>
		//led_light(LED_ALL); // 모든 LED를 0.5초 동안 켜라
		led_light(0);
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	15 df       	rcall	.-470    	; 0x274 <led_light>
     44a:	2f ef       	ldi	r18, 0xFF	; 255
     44c:	89 e6       	ldi	r24, 0x69	; 105
     44e:	98 e1       	ldi	r25, 0x18	; 24
     450:	21 50       	subi	r18, 0x01	; 1
     452:	80 40       	sbci	r24, 0x00	; 0
     454:	90 40       	sbci	r25, 0x00	; 0
     456:	e1 f7       	brne	.-8      	; 0x450 <start_healthcare+0x32>
     458:	00 c0       	rjmp	.+0      	; 0x45a <start_healthcare+0x3c>
		_delay_ms(500); 
		//상태반전
		lcd_command_write(LCD_OFF); // LCD를 0.5초 동안 꺼라
     45a:	00 00       	nop
     45c:	88 e0       	ldi	r24, 0x08	; 8
     45e:	90 de       	rcall	.-736    	; 0x180 <lcd_command_write>
		//led_light(0); // 아무 LED로 0.5초간 켜지 마라
		led_light(LED_ALL);
     460:	8f ef       	ldi	r24, 0xFF	; 255
     462:	08 df       	rcall	.-496    	; 0x274 <led_light>
     464:	2f ef       	ldi	r18, 0xFF	; 255
     466:	89 e6       	ldi	r24, 0x69	; 105
     468:	98 e1       	ldi	r25, 0x18	; 24
     46a:	21 50       	subi	r18, 0x01	; 1
     46c:	80 40       	sbci	r24, 0x00	; 0
     46e:	90 40       	sbci	r25, 0x00	; 0
     470:	e1 f7       	brne	.-8      	; 0x46a <start_healthcare+0x4c>
     472:	00 c0       	rjmp	.+0      	; 0x474 <start_healthcare+0x56>
     474:	00 00       	nop
     476:	21 97       	sbiw	r28, 0x01	; 1
	lcd_gotoxy(0, 0); // 1라인의 첫칸으로 가서 
	lcd_string("  Health Care   "); // 써라
	lcd_gotoxy(0, 1); // 둘째줄로 옮겨서
	lcd_string("  Bike System..."); //써라

	for( i = 0; i < 3; i++ ) { // 1초씩 3번 반복한다.
     478:	21 f7       	brne	.-56     	; 0x442 <start_healthcare+0x24>
		lcd_command_write(LCD_OFF); // LCD를 0.5초 동안 꺼라
		//led_light(0); // 아무 LED로 0.5초간 켜지 마라
		led_light(LED_ALL);
		_delay_ms(500);
	}
	dcmotor_spin(0); // 3초 지난후 모터 스톱
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	31 de       	rcall	.-926    	; 0xe0 <dcmotor_spin>
     47e:	df 91       	pop	r29
}
     480:	cf 91       	pop	r28
     482:	08 95       	ret

00000484 <time_setting>:
     484:	df 92       	push	r13

// 시간 설정 모드(모드 0): lcd파일 참조!
void time_setting(void)
{
     486:	ef 92       	push	r14
     488:	ff 92       	push	r15
     48a:	0f 93       	push	r16
     48c:	1f 93       	push	r17
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
	unsigned char pos, tmp; // lcd커서 위치를 1칸씩 잡아주는 변수, 임시 시간 저장변수
	unsigned char key = 0; // 시간 설정을 위한 입력키 값을 받아주기 위한 임시변수

	// 현재 시간의 초기화
	current.hour = 0;
     492:	e3 ee       	ldi	r30, 0xE3	; 227
     494:	f1 e0       	ldi	r31, 0x01	; 1
     496:	10 82       	st	Z, r1
	current.minute = 0;
     498:	11 82       	std	Z+1, r1	; 0x01
	current.seconds = 0;
     49a:	12 82       	std	Z+2, r1	; 0x02

	lcd_command_write(LCD_CURSOR); // 커서를 표시하라는 lcd 인스트럭션 함수
     49c:	8f e0       	ldi	r24, 0x0F	; 15
     49e:	70 de       	rcall	.-800    	; 0x180 <lcd_command_write>

	// 초기화면 표시 
	lcd_gotoxy(0, 0);
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	b4 de       	rcall	.-664    	; 0x20e <lcd_gotoxy>
	lcd_string(" <Time Setting> ");
     4a6:	88 e2       	ldi	r24, 0x28	; 40
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	a3 de       	rcall	.-698    	; 0x1f2 <lcd_string>
	lcd_gotoxy(0, 1);
     4ac:	61 e0       	ldi	r22, 0x01	; 1
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	ae de       	rcall	.-676    	; 0x20e <lcd_gotoxy>
	lcd_string("    00:00:00    "); // 4칸 padding(4 + "8" + 4 = 16), 가운데 8칸에서 시간을 설정한다
     4b2:	89 e3       	ldi	r24, 0x39	; 57
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	9d de       	rcall	.-710    	; 0x1f2 <lcd_string>

	lcd_gotoxy(4, 1); // '시'의 첫번째 칸으로 이동
     4b8:	61 e0       	ldi	r22, 0x01	; 1
     4ba:	84 e0       	ldi	r24, 0x04	; 4
     4bc:	a8 de       	rcall	.-688    	; 0x20e <lcd_gotoxy>
     4be:	c0 e0       	ldi	r28, 0x00	; 0

// 시간 설정 모드(모드 0): lcd파일 참조!
void time_setting(void)
{
	unsigned char pos, tmp; // lcd커서 위치를 1칸씩 잡아주는 변수, 임시 시간 저장변수
	unsigned char key = 0; // 시간 설정을 위한 입력키 값을 받아주기 위한 임시변수
     4c0:	10 e0       	ldi	r17, 0x00	; 0
	lcd_gotoxy(0, 1);
	lcd_string("    00:00:00    "); // 4칸 padding(4 + "8" + 4 = 16), 가운데 8칸에서 시간을 설정한다

	lcd_gotoxy(4, 1); // '시'의 첫번째 칸으로 이동
	pos = 0; // 그 칸을 0으로 설정한다(pos값은 0~7의 좌표를 가진다)
	tmp = 0; // 시간 저장을 위한 임시변수
     4c2:	d0 e0       	ldi	r29, 0x00	; 0
	lcd_string(" <Time Setting> ");
	lcd_gotoxy(0, 1);
	lcd_string("    00:00:00    "); // 4칸 padding(4 + "8" + 4 = 16), 가운데 8칸에서 시간을 설정한다

	lcd_gotoxy(4, 1); // '시'의 첫번째 칸으로 이동
	pos = 0; // 그 칸을 0으로 설정한다(pos값은 0~7의 좌표를 가진다)
     4c4:	d1 2c       	mov	r13, r1
				if( pos == 7 ) { // 만약 7번째 자리 수까지 완료 지으면, 시간 세팅 전체 완료 -> 루프 탈출 -> time_setting모드 종료 
					lcd_command_write(LCD_ON);
					return; // 루프탈출
				}
                // 자릿수 포지션이 7이 아니라면, 즉 아직 세팅할 시간이 남았다면...
				tmp = 0;
     4c6:	0f 2e       	mov	r0, r31
						lcd_data_write(tmp + 0x30); // 시의 일의 자리만 표시
						break;

					// Minute
					case 3 : // [3]
						if( current.minute < 50 )	current.minute += 10; // 1~5
     4c8:	f3 ee       	ldi	r31, 0xE3	; 227
     4ca:	ef 2e       	mov	r14, r31
     4cc:	f1 e0       	ldi	r31, 0x01	; 1
     4ce:	ff 2e       	mov	r15, r31
     4d0:	f0 2d       	mov	r31, r0
						else							current.minute = 0;
						lcd_data_write(current.minute / 10 + 0x30); // 분의 시의 자리만 출력
     4d2:	0d ec       	ldi	r16, 0xCD	; 205
	lcd_gotoxy(4, 1); // '시'의 첫번째 칸으로 이동
	pos = 0; // 그 칸을 0으로 설정한다(pos값은 0~7의 좌표를 가진다)
	tmp = 0; // 시간 저장을 위한 임시변수
	
	while( 1 ) { // 폴링 방식으로 키 값을 확인하여 시간을 설정(UP_KEY/ENTER_KEY두 개로 시간을 조정 및 세팅한다)
		key = getkey(key); // 키 값과 플래그 확인
     4d4:	8c 2f       	mov	r24, r28
     4d6:	1b de       	rcall	.-970    	; 0x10e <getkey>
     4d8:	c8 2f       	mov	r28, r24
     4da:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <key_flag>
		if( key_flag ) { //			 ▒ < T i m e  S e t t i n g > ▒ 
     4de:	88 23       	and	r24, r24
     4e0:	c9 f3       	breq	.-14     	; 0x4d4 <time_setting+0x50>
     4e2:	c3 30       	cpi	r28, 0x03	; 3
            
            // 시간 자리수 변경
			if( key == KEY_UP ) { // ▒ ▒ [0] [1] : [3] [4] : [6] [7] ▒ ▒
     4e4:	09 f0       	breq	.+2      	; 0x4e8 <time_setting+0x64>
     4e6:	c3 c0       	rjmp	.+390    	; 0x66e <time_setting+0x1ea>
     4e8:	d3 30       	cpi	r29, 0x03	; 3
				switch( pos ) {
     4ea:	09 f4       	brne	.+2      	; 0x4ee <time_setting+0x6a>
     4ec:	4e c0       	rjmp	.+156    	; 0x58a <time_setting+0x106>
     4ee:	28 f4       	brcc	.+10     	; 0x4fa <time_setting+0x76>
     4f0:	dd 23       	and	r29, r29
     4f2:	69 f0       	breq	.+26     	; 0x50e <time_setting+0x8a>
     4f4:	d1 30       	cpi	r29, 0x01	; 1
     4f6:	01 f1       	breq	.+64     	; 0x538 <time_setting+0xb4>
     4f8:	b5 c0       	rjmp	.+362    	; 0x664 <time_setting+0x1e0>
     4fa:	d6 30       	cpi	r29, 0x06	; 6
     4fc:	09 f4       	brne	.+2      	; 0x500 <time_setting+0x7c>
     4fe:	7c c0       	rjmp	.+248    	; 0x5f8 <time_setting+0x174>
     500:	d7 30       	cpi	r29, 0x07	; 7
     502:	09 f4       	brne	.+2      	; 0x506 <time_setting+0x82>
     504:	8e c0       	rjmp	.+284    	; 0x622 <time_setting+0x19e>
     506:	d4 30       	cpi	r29, 0x04	; 4
     508:	09 f0       	breq	.+2      	; 0x50c <time_setting+0x88>
     50a:	ac c0       	rjmp	.+344    	; 0x664 <time_setting+0x1e0>
     50c:	53 c0       	rjmp	.+166    	; 0x5b4 <time_setting+0x130>
     50e:	f7 01       	movw	r30, r14
					// Hour
					case 0 : // [0]: 0>1>2>0
						if( current.hour < 20 )	current.hour += 10;
     510:	80 81       	ld	r24, Z
     512:	84 31       	cpi	r24, 0x14	; 20
     514:	20 f4       	brcc	.+8      	; 0x51e <time_setting+0x9a>
     516:	80 81       	ld	r24, Z
     518:	86 5f       	subi	r24, 0xF6	; 246
     51a:	80 83       	st	Z, r24
     51c:	02 c0       	rjmp	.+4      	; 0x522 <time_setting+0x9e>
     51e:	f7 01       	movw	r30, r14
						else						current.hour = 0; // hrs > 20 -> 0(Reset)
     520:	10 82       	st	Z, r1
     522:	f7 01       	movw	r30, r14
						lcd_data_write(current.hour / 10 + 0x30); // 0x30 in ASCII code = '0' / 시의 십의 자리만 출력
     524:	80 81       	ld	r24, Z
     526:	80 9f       	mul	r24, r16
     528:	81 2d       	mov	r24, r1
     52a:	11 24       	eor	r1, r1
     52c:	86 95       	lsr	r24
     52e:	86 95       	lsr	r24
     530:	86 95       	lsr	r24
     532:	80 5d       	subi	r24, 0xD0	; 208
     534:	44 de       	rcall	.-888    	; 0x1be <lcd_data_write>
     536:	96 c0       	rjmp	.+300    	; 0x664 <time_setting+0x1e0>
						break;
     538:	f7 01       	movw	r30, r14
					case 1 : // [1]: 0>1>2>3>0
						if( (current.hour / 10) < 2 )	tmp = ++tmp % 10; // 01시 ~ 19시, tmp는 시의 일의 자리를 저장하는 임시변수
     53a:	80 81       	ld	r24, Z
     53c:	84 31       	cpi	r24, 0x14	; 20
     53e:	80 f4       	brcc	.+32     	; 0x560 <time_setting+0xdc>
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	91 0f       	add	r25, r17
     544:	90 9f       	mul	r25, r16
     546:	11 2d       	mov	r17, r1
     548:	11 24       	eor	r1, r1
     54a:	16 95       	lsr	r17
     54c:	16 95       	lsr	r17
     54e:	16 95       	lsr	r17
     550:	11 0f       	add	r17, r17
     552:	81 2f       	mov	r24, r17
     554:	88 0f       	add	r24, r24
     556:	88 0f       	add	r24, r24
     558:	18 0f       	add	r17, r24
     55a:	91 1b       	sub	r25, r17
     55c:	19 2f       	mov	r17, r25
     55e:	02 c0       	rjmp	.+4      	; 0x564 <time_setting+0xe0>
     560:	1f 5f       	subi	r17, 0xFF	; 255
						else								tmp = ++tmp % 4; // 21시 ~ 23시
     562:	13 70       	andi	r17, 0x03	; 3
     564:	f7 01       	movw	r30, r14
						current.hour = (current.hour / 10) * 10 + tmp; // 시 전체를 저장(시의 십의 자리 + 시의 일의 자리)
     566:	80 81       	ld	r24, Z
     568:	80 9f       	mul	r24, r16
     56a:	81 2d       	mov	r24, r1
     56c:	11 24       	eor	r1, r1
     56e:	86 95       	lsr	r24
     570:	86 95       	lsr	r24
     572:	86 95       	lsr	r24
     574:	88 0f       	add	r24, r24
     576:	98 2f       	mov	r25, r24
     578:	99 0f       	add	r25, r25
     57a:	99 0f       	add	r25, r25
     57c:	89 0f       	add	r24, r25
     57e:	81 0f       	add	r24, r17
     580:	80 83       	st	Z, r24
						lcd_data_write(tmp + 0x30); // 시의 일의 자리만 표시
     582:	80 e3       	ldi	r24, 0x30	; 48
     584:	81 0f       	add	r24, r17
     586:	1b de       	rcall	.-970    	; 0x1be <lcd_data_write>
     588:	6d c0       	rjmp	.+218    	; 0x664 <time_setting+0x1e0>
						break;
     58a:	f7 01       	movw	r30, r14

					// Minute
					case 3 : // [3]
						if( current.minute < 50 )	current.minute += 10; // 1~5
     58c:	81 81       	ldd	r24, Z+1	; 0x01
     58e:	82 33       	cpi	r24, 0x32	; 50
     590:	20 f4       	brcc	.+8      	; 0x59a <time_setting+0x116>
     592:	81 81       	ldd	r24, Z+1	; 0x01
     594:	86 5f       	subi	r24, 0xF6	; 246
     596:	81 83       	std	Z+1, r24	; 0x01
     598:	02 c0       	rjmp	.+4      	; 0x59e <time_setting+0x11a>
     59a:	f7 01       	movw	r30, r14
						else							current.minute = 0;
     59c:	11 82       	std	Z+1, r1	; 0x01
     59e:	f7 01       	movw	r30, r14
						lcd_data_write(current.minute / 10 + 0x30); // 분의 시의 자리만 출력
     5a0:	81 81       	ldd	r24, Z+1	; 0x01
     5a2:	80 9f       	mul	r24, r16
     5a4:	81 2d       	mov	r24, r1
     5a6:	11 24       	eor	r1, r1
     5a8:	86 95       	lsr	r24
     5aa:	86 95       	lsr	r24
     5ac:	86 95       	lsr	r24
     5ae:	80 5d       	subi	r24, 0xD0	; 208
     5b0:	06 de       	rcall	.-1012   	; 0x1be <lcd_data_write>
     5b2:	58 c0       	rjmp	.+176    	; 0x664 <time_setting+0x1e0>
						break;
     5b4:	91 e0       	ldi	r25, 0x01	; 1
					case 4 : // [4]
						tmp = ++tmp % 10; // temp에는 분의 일의 자리를 저장한다
     5b6:	91 0f       	add	r25, r17
     5b8:	90 9f       	mul	r25, r16
     5ba:	11 2d       	mov	r17, r1
     5bc:	11 24       	eor	r1, r1
     5be:	16 95       	lsr	r17
     5c0:	16 95       	lsr	r17
     5c2:	16 95       	lsr	r17
     5c4:	11 0f       	add	r17, r17
     5c6:	81 2f       	mov	r24, r17
     5c8:	88 0f       	add	r24, r24
     5ca:	88 0f       	add	r24, r24
     5cc:	18 0f       	add	r17, r24
     5ce:	91 1b       	sub	r25, r17
     5d0:	19 2f       	mov	r17, r25
     5d2:	f7 01       	movw	r30, r14
						current.minute = (current.minute / 10) * 10 + tmp; // 분 전체를 저장(분의 십의 자리 + 분의 일의 자리)
     5d4:	81 81       	ldd	r24, Z+1	; 0x01
     5d6:	80 9f       	mul	r24, r16
     5d8:	81 2d       	mov	r24, r1
     5da:	11 24       	eor	r1, r1
     5dc:	86 95       	lsr	r24
     5de:	86 95       	lsr	r24
     5e0:	86 95       	lsr	r24
     5e2:	88 0f       	add	r24, r24
     5e4:	98 2f       	mov	r25, r24
     5e6:	99 0f       	add	r25, r25
     5e8:	99 0f       	add	r25, r25
     5ea:	89 0f       	add	r24, r25
     5ec:	81 0f       	add	r24, r17
     5ee:	81 83       	std	Z+1, r24	; 0x01
						lcd_data_write(tmp + 0x30); // 분의 일의 자리만 출력
     5f0:	80 e3       	ldi	r24, 0x30	; 48
     5f2:	81 0f       	add	r24, r17
     5f4:	e4 dd       	rcall	.-1080   	; 0x1be <lcd_data_write>
     5f6:	36 c0       	rjmp	.+108    	; 0x664 <time_setting+0x1e0>
						break;
     5f8:	f7 01       	movw	r30, r14

						// Second
					case 6 : // [6]
						if( current.seconds < 50 )	current.seconds += 10;
     5fa:	82 81       	ldd	r24, Z+2	; 0x02
     5fc:	82 33       	cpi	r24, 0x32	; 50
     5fe:	20 f4       	brcc	.+8      	; 0x608 <time_setting+0x184>
     600:	82 81       	ldd	r24, Z+2	; 0x02
     602:	86 5f       	subi	r24, 0xF6	; 246
     604:	82 83       	std	Z+2, r24	; 0x02
     606:	02 c0       	rjmp	.+4      	; 0x60c <time_setting+0x188>
     608:	f7 01       	movw	r30, r14
						else							current.seconds = 0;
     60a:	12 82       	std	Z+2, r1	; 0x02
						lcd_data_write(current.seconds / 10 + 0x30); // 초의 십의 자리만 출력
     60c:	f7 01       	movw	r30, r14
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	80 9f       	mul	r24, r16
     612:	81 2d       	mov	r24, r1
     614:	11 24       	eor	r1, r1
     616:	86 95       	lsr	r24
     618:	86 95       	lsr	r24
     61a:	86 95       	lsr	r24
     61c:	80 5d       	subi	r24, 0xD0	; 208
     61e:	cf dd       	rcall	.-1122   	; 0x1be <lcd_data_write>
     620:	21 c0       	rjmp	.+66     	; 0x664 <time_setting+0x1e0>
						break;
     622:	91 e0       	ldi	r25, 0x01	; 1
					case 7 : // [7]
						tmp = ++tmp % 10;
     624:	91 0f       	add	r25, r17
     626:	90 9f       	mul	r25, r16
     628:	11 2d       	mov	r17, r1
     62a:	11 24       	eor	r1, r1
     62c:	16 95       	lsr	r17
     62e:	16 95       	lsr	r17
     630:	16 95       	lsr	r17
     632:	11 0f       	add	r17, r17
     634:	81 2f       	mov	r24, r17
     636:	88 0f       	add	r24, r24
     638:	88 0f       	add	r24, r24
     63a:	18 0f       	add	r17, r24
     63c:	91 1b       	sub	r25, r17
     63e:	19 2f       	mov	r17, r25
     640:	f7 01       	movw	r30, r14
						current.seconds = (current.seconds / 10) * 10 + tmp; // 초 전체를 저장(초의 십의 자리 + 초의 일의 자리)
     642:	82 81       	ldd	r24, Z+2	; 0x02
     644:	80 9f       	mul	r24, r16
     646:	81 2d       	mov	r24, r1
     648:	11 24       	eor	r1, r1
     64a:	86 95       	lsr	r24
     64c:	86 95       	lsr	r24
     64e:	86 95       	lsr	r24
     650:	88 0f       	add	r24, r24
     652:	98 2f       	mov	r25, r24
     654:	99 0f       	add	r25, r25
     656:	99 0f       	add	r25, r25
     658:	89 0f       	add	r24, r25
     65a:	81 0f       	add	r24, r17
						lcd_data_write(tmp + 0x30); // 초의 일의 자리만 출력
     65c:	82 83       	std	Z+2, r24	; 0x02
     65e:	80 e3       	ldi	r24, 0x30	; 48
     660:	81 0f       	add	r24, r17
						break;
				}

				lcd_gotoxy(pos + 4, 1); // 0x80(2번째줄 첫째라인)기준으로 해서 4씩 주소를 더하여 이동(데이터 시트 참조)
     662:	ad dd       	rcall	.-1190   	; 0x1be <lcd_data_write>
     664:	61 e0       	ldi	r22, 0x01	; 1
     666:	84 e0       	ldi	r24, 0x04	; 4
     668:	8d 0f       	add	r24, r29
     66a:	d1 dd       	rcall	.-1118   	; 0x20e <lcd_gotoxy>
     66c:	33 cf       	rjmp	.-410    	; 0x4d4 <time_setting+0x50>
			}
            
            // 시간 자리수 변경 완료: 자릿수를 이동시킨다
			else if( key == KEY_ENTER ) {
     66e:	c4 30       	cpi	r28, 0x04	; 4
     670:	09 f0       	breq	.+2      	; 0x674 <time_setting+0x1f0>
     672:	30 cf       	rjmp	.-416    	; 0x4d4 <time_setting+0x50>
				if( pos == 7 ) { // 만약 7번째 자리 수까지 완료 지으면, 시간 세팅 전체 완료 -> 루프 탈출 -> time_setting모드 종료 
     674:	d7 30       	cpi	r29, 0x07	; 7
     676:	19 f4       	brne	.+6      	; 0x67e <time_setting+0x1fa>
					lcd_command_write(LCD_ON);
     678:	8c e0       	ldi	r24, 0x0C	; 12
     67a:	82 dd       	rcall	.-1276   	; 0x180 <lcd_command_write>
					return; // 루프탈출
     67c:	0f c0       	rjmp	.+30     	; 0x69c <time_setting+0x218>
				}
                // 자릿수 포지션이 7이 아니라면, 즉 아직 세팅할 시간이 남았다면...
				tmp = 0;
				pos++;
     67e:	11 e0       	ldi	r17, 0x01	; 1
     680:	1d 0f       	add	r17, r29
				if( (pos == 2) || (pos == 5) )	pos++; // ":"위치에 커서가 위치할 경우에는 자리를 한칸씩 역으로 옮겨 3과 6의 포지션으로 갈 것
     682:	12 30       	cpi	r17, 0x02	; 2
     684:	11 f0       	breq	.+4      	; 0x68a <time_setting+0x206>
     686:	15 30       	cpi	r17, 0x05	; 5
     688:	11 f4       	brne	.+4      	; 0x68e <time_setting+0x20a>
     68a:	12 e0       	ldi	r17, 0x02	; 2
     68c:	1d 0f       	add	r17, r29
				lcd_gotoxy(pos + 4, 1); // 새로운 위치값을 기준으로 한 커서 이동(현재 위치의 주소값에 4를 더한다)
     68e:	61 e0       	ldi	r22, 0x01	; 1
     690:	84 e0       	ldi	r24, 0x04	; 4
     692:	81 0f       	add	r24, r17
     694:	bc dd       	rcall	.-1160   	; 0x20e <lcd_gotoxy>
     696:	d1 2f       	mov	r29, r17
     698:	1d 2d       	mov	r17, r13
				if( pos == 7 ) { // 만약 7번째 자리 수까지 완료 지으면, 시간 세팅 전체 완료 -> 루프 탈출 -> time_setting모드 종료 
					lcd_command_write(LCD_ON);
					return; // 루프탈출
				}
                // 자릿수 포지션이 7이 아니라면, 즉 아직 세팅할 시간이 남았다면...
				tmp = 0;
     69a:	1c cf       	rjmp	.-456    	; 0x4d4 <time_setting+0x50>
     69c:	df 91       	pop	r29
				if( (pos == 2) || (pos == 5) )	pos++; // ":"위치에 커서가 위치할 경우에는 자리를 한칸씩 역으로 옮겨 3과 6의 포지션으로 갈 것
				lcd_gotoxy(pos + 4, 1); // 새로운 위치값을 기준으로 한 커서 이동(현재 위치의 주소값에 4를 더한다)
			}
		}
	}
}
     69e:	cf 91       	pop	r28
     6a0:	1f 91       	pop	r17
     6a2:	0f 91       	pop	r16
     6a4:	ff 90       	pop	r15
     6a6:	ef 90       	pop	r14
     6a8:	df 90       	pop	r13
     6aa:	08 95       	ret

000006ac <init_screen>:
     6ac:	60 e0       	ldi	r22, 0x00	; 0

// 설정한 시간을 lcd에 출력하여 확인시켜주는 함수
void init_screen(void)
{
	lcd_gotoxy(0, 0); // 원점으로 가서
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	ae dd       	rcall	.-1188   	; 0x20e <lcd_gotoxy>
	lcd_string("  Health Care   "); //써라
     6b2:	86 e0       	ldi	r24, 0x06	; 6
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	9d dd       	rcall	.-1222   	; 0x1f2 <lcd_string>
	lcd_gotoxy(0, 1); // 다음줄로 가서
     6b8:	61 e0       	ldi	r22, 0x01	; 1
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	a8 dd       	rcall	.-1200   	; 0x20e <lcd_gotoxy>
	//printf("    %02d:%02d:%02d    ", current.hour, current.minute, current.seconds); // 현재 시간을 형식에 맞게 써라(화면 구동후, 인터럽트가 구동되면서 흐르기 시작하는 시간)
	sprintf (currentTime, "    %02d:%02d:%02d    ", current.hour, current.minute, current.seconds);
     6be:	e3 ee       	ldi	r30, 0xE3	; 227
     6c0:	f1 e0       	ldi	r31, 0x01	; 1
     6c2:	22 81       	ldd	r18, Z+2	; 0x02
     6c4:	91 81       	ldd	r25, Z+1	; 0x01
     6c6:	80 81       	ld	r24, Z
     6c8:	1f 92       	push	r1
     6ca:	2f 93       	push	r18
     6cc:	1f 92       	push	r1
     6ce:	9f 93       	push	r25
     6d0:	1f 92       	push	r1
     6d2:	8f 93       	push	r24
     6d4:	8a e4       	ldi	r24, 0x4A	; 74
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	9f 93       	push	r25
     6da:	8f 93       	push	r24
     6dc:	80 ed       	ldi	r24, 0xD0	; 208
     6de:	91 e0       	ldi	r25, 0x01	; 1
     6e0:	9f 93       	push	r25
     6e2:	8f 93       	push	r24
	lcd_string (currentTime);
     6e4:	57 d3       	rcall	.+1710   	; 0xd94 <sprintf>
     6e6:	80 ed       	ldi	r24, 0xD0	; 208
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	83 dd       	rcall	.-1274   	; 0x1f2 <lcd_string>
}
     6ec:	8d b7       	in	r24, 0x3d	; 61
     6ee:	9e b7       	in	r25, 0x3e	; 62
     6f0:	0a 96       	adiw	r24, 0x0a	; 10
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	f8 94       	cli
     6f6:	9e bf       	out	0x3e, r25	; 62
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	8d bf       	out	0x3d, r24	; 61
     6fc:	08 95       	ret

000006fe <main>:
{
	unsigned char oldsec = 0xFF; // MAX: 256
	unsigned char key = 0; // 어떠한 스위치의 입력도 받지 않은 상태
	
	/* constructor */
	mcu_init(); //각 동작의 초기화
     6fe:	83 de       	rcall	.-762    	; 0x406 <mcu_init>
	variable_init(); // 시간(타이머)와 모드의 초기화(어떠한 모드도 아님:default)
     700:	89 de       	rcall	.-750    	; 0x414 <variable_init>
     702:	60 e0       	ldi	r22, 0x00	; 0
	/* End of constructor*/
	
	fdevopen((void *)lcd_data_write, 0); //pritnf()를 LCD에 사용할 수 있도록 열어준다(기능의 추가/인터페이스)
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	8f ed       	ldi	r24, 0xDF	; 223
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	fa d2       	rcall	.+1524   	; 0xd00 <fdevopen>

	start_healthcare();// 헬스케어 초기화면으로 전환
     70c:	88 de       	rcall	.-752    	; 0x41e <start_healthcare>
     70e:	ba de       	rcall	.-652    	; 0x484 <time_setting>
	time_setting(); // 스위치의 입력이 발생하는 경우, 시간을 설정하는 모드로 진입
     710:	cd df       	rcall	.-102    	; 0x6ac <init_screen>
     712:	78 94       	sei
	init_screen(); // 설정한 시간을 화면에 표시(설정한 시간이 비로소 흐르기 시작한다)-> 일반적인 시계를 생각할 것(세팅하기 전에도 시간은 흐른다)
     714:	10 e0       	ldi	r17, 0x00	; 0
     716:	55 24       	eor	r5, r5

	sei(); // 인터럽트가 허용되면서 타이머가 돌아가기 시작할 것이다.
     718:	5a 94       	dec	r5
}

int main(void)
{
	unsigned char oldsec = 0xFF; // MAX: 256
	unsigned char key = 0; // 어떠한 스위치의 입력도 받지 않은 상태
     71a:	0f 2e       	mov	r0, r31
	lcd_string (currentTime);
}

int main(void)
{
	unsigned char oldsec = 0xFF; // MAX: 256
     71c:	f0 ee       	ldi	r31, 0xE0	; 224
     71e:	af 2e       	mov	r10, r31
					if( mode == START_MODE ) { // 현재 시작 모드 일때 의미가 있는 키 이므로, 현재 시작 모드인지 아닌지를 체크한다
						// 정지키 쿨렀을때 1) 운동시간과 2) 소모 칼로리량이 표시된다
						
						lcd_gotoxy(0, 0); //lcd 첫째라인의 출력
						//printf("Time    %02d:%02d:%02d", section.hour, section.minute, section.seconds); // 운동 소모 시간
						sprintf(sectionTime, "Time    %02d:%02d:%02d", section.hour, section.minute, section.seconds);
     720:	f1 e0       	ldi	r31, 0x01	; 1
     722:	bf 2e       	mov	r11, r31
     724:	f0 2d       	mov	r31, r0
     726:	0f 2e       	mov	r0, r31
     728:	f0 ec       	ldi	r31, 0xC0	; 192
     72a:	6f 2e       	mov	r6, r31
     72c:	f1 e0       	ldi	r31, 0x01	; 1
     72e:	7f 2e       	mov	r7, r31
     730:	f0 2d       	mov	r31, r0
     732:	0f 2e       	mov	r0, r31
     734:	f0 eb       	ldi	r31, 0xB0	; 176
     736:	2f 2e       	mov	r2, r31
						lcd_string (sectionTime);

						lcd_gotoxy(0, 1); // lcd둘째 라인의 출력
						//printf("Calorie %4.1fKcal", kcal); // 칼로리(ISR내에서 1초당 누적적으로 이루어짐)
						sprintf(kcalConsuption, "Calorie %4.1fKcal", kcal);
     738:	f1 e0       	ldi	r31, 0x01	; 1
     73a:	3f 2e       	mov	r3, r31
     73c:	f0 2d       	mov	r31, r0
     73e:	02 e0       	ldi	r16, 0x02	; 2
     740:	0f 2e       	mov	r0, r31
     742:	fb e9       	ldi	r31, 0x9B	; 155
						lcd_string (kcalConsuption);

						mode = STOP_MODE; // 정지키의 입력에 따른 출력을 수행하고 종료되면, 정지모드가 되면서 스위치 구문을 빠져나간다(할거 다하고 빠져나간다)
     744:	8f 2e       	mov	r8, r31
		velocity = (unsigned char)(var_read() / 20.4); // 가변저항 변화에 따른 ADC값을 읽어옴
		dcmotor_spin(velocity); // 읽어온 값을 모터 회전 값으로 전달

		lcd_gotoxy(10, 0); // 첫줄 10번째 칸으로 가서 업데이트 된 속도를 출력
		//printf("%2d", velocity); // 정수형 2칸
		sprintf (velocitydisp, "%2d", velocity);
     746:	f1 e0       	ldi	r31, 0x01	; 1
     748:	9f 2e       	mov	r9, r31
     74a:	f0 2d       	mov	r31, r0
     74c:	0f 2e       	mov	r0, r31
     74e:	f0 ea       	ldi	r31, 0xA0	; 160
     750:	cf 2e       	mov	r12, r31
     752:	f1 e0       	ldi	r31, 0x01	; 1
     754:	df 2e       	mov	r13, r31
     756:	f0 2d       	mov	r31, r0
     758:	c3 ee       	ldi	r28, 0xE3	; 227
     75a:	d1 e0       	ldi	r29, 0x01	; 1
     75c:	0f 2e       	mov	r0, r31
		led_light((unsigned char)(8 - (velocity / 6.2))); // led값으로도 속도상황을 출력(단, LED의 갯수를 고려하여 계산한 변수를 전달)
		}
		
		// 실시간 시간의 표시
		// oldsec의 초기값과 최대값은 0xFF(=256)
		if( oldsec |= current.seconds ) { // 현재 시점의 시간과 oldsec시간이 다르다면
     75e:	fa e4       	ldi	r31, 0x4A	; 74
     760:	ef 2e       	mov	r14, r31
			oldsec = current.seconds; // oldsec을 지속적으로 while안에서 업데이트하고 
			if( mode != STOP_MODE ) { // stop모드가 아닌, 초기모드나 시작모드라면, (*정지모드에서는 section time이 표시된다)
				lcd_gotoxy(0, 1); // 두번째 줄로 가서
				//printf("    %02d:%02d:%02d    ",
					//	current.hour, current.minute, current.seconds); // 시간을 계속 표시해라
				sprintf (currentTime, "    %02d:%02d:%02d    ", current.hour, current.minute, current.seconds);
     762:	f1 e0       	ldi	r31, 0x01	; 1
     764:	ff 2e       	mov	r15, r31
     766:	f0 2d       	mov	r31, r0
     768:	81 2f       	mov	r24, r17
     76a:	d1 dc       	rcall	.-1630   	; 0x10e <getkey>
	init_screen(); // 설정한 시간을 화면에 표시(설정한 시간이 비로소 흐르기 시작한다)-> 일반적인 시계를 생각할 것(세팅하기 전에도 시간은 흐른다)

	sei(); // 인터럽트가 허용되면서 타이머가 돌아가기 시작할 것이다.

	while( 1 ) { // 폴링방식, 스위치 입력검사, 해당명령 수행
		key = getkey(key); // 키 값을 읽음("키 값을 주고 키 값을 읽음", 초기 상태는 0) -> switch구문에서 서로 다른 키 값을 받기 위해서 설정
     76c:	18 2f       	mov	r17, r24
     76e:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <key_flag>
     772:	88 23       	and	r24, r24
		if( key_flag ) { // 성공적 키 입력의 확인 플래그 체크(이전 키 값과 다른 키 값이 들어오면)
     774:	09 f4       	brne	.+2      	; 0x778 <main+0x7a>
     776:	68 c0       	rjmp	.+208    	; 0x848 <main+0x14a>
     778:	12 30       	cpi	r17, 0x02	; 2
     77a:	09 f1       	breq	.+66     	; 0x7be <main+0xc0>
     77c:	14 30       	cpi	r17, 0x04	; 4
			switch( key ) { // (그제서야)키 입력에 따른 명령 분리 -> (1)키 값에 따른 제어, (2) 제어 상황에 따른 LCD출력
     77e:	09 f4       	brne	.+2      	; 0x782 <main+0x84>
     780:	5c c0       	rjmp	.+184    	; 0x83a <main+0x13c>
     782:	11 30       	cpi	r17, 0x01	; 1
     784:	09 f0       	breq	.+2      	; 0x788 <main+0x8a>
     786:	60 c0       	rjmp	.+192    	; 0x848 <main+0x14a>
     788:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <mode>
     78c:	81 11       	cpse	r24, r1
				// 시작 키
				case KEY_START :
					if( mode == NO_MODE ) { // 현재 상태가 시작도 정지도 아닌 (초기) 모드라면
     78e:	5c c0       	rjmp	.+184    	; 0x848 <main+0x14a>
     790:	f5 01       	movw	r30, r10
     792:	10 82       	st	Z, r1
     794:	11 82       	std	Z+1, r1	; 0x01
						// 시작모드부터 사용될 모든 시간 변수와 이와 관련하는 칼로리 값(단위시간당 운동 소모칼로리 이므로)을 초기화 한다
						section.hour = 0;
     796:	12 82       	std	Z+2, r1	; 0x02
     798:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <section_tick>
						section.minute = 0;
						section.seconds = 0;
     79c:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <kcal>
						section_tick = 0;
     7a0:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <kcal+0x1>
						kcal = 0.;
     7a4:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <kcal+0x2>
     7a8:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <kcal+0x3>
     7ac:	60 e0       	ldi	r22, 0x00	; 0
						// 초기화가 끝나면
						lcd_gotoxy(0, 0); // 커서를 원점으로 옮겨서
     7ae:	2f dd       	rcall	.-1442   	; 0x20e <lcd_gotoxy>
     7b0:	81 e6       	ldi	r24, 0x61	; 97
     7b2:	91 e0       	ldi	r25, 0x01	; 1
						lcd_string("Velocity:   Km/H"); // 초기 속도 화면을 lcd에 뿌려준다
     7b4:	1e dd       	rcall	.-1476   	; 0x1f2 <lcd_string>
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <mode>

						mode = START_MODE; // 이제서야, 시작모드로 진입하고, 스위치 구문을 빠져 나가서 다음 구문으로 분기한다
     7bc:	45 c0       	rjmp	.+138    	; 0x848 <main+0x14a>
     7be:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <mode>
					}
					break;
				// 정지 키
				case KEY_STOP :
					if( mode == START_MODE ) { // 현재 시작 모드 일때 의미가 있는 키 이므로, 현재 시작 모드인지 아닌지를 체크한다
     7c2:	81 30       	cpi	r24, 0x01	; 1
     7c4:	09 f0       	breq	.+2      	; 0x7c8 <main+0xca>
     7c6:	40 c0       	rjmp	.+128    	; 0x848 <main+0x14a>
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	80 e0       	ldi	r24, 0x00	; 0
						// 정지키 쿨렀을때 1) 운동시간과 2) 소모 칼로리량이 표시된다
						
						lcd_gotoxy(0, 0); //lcd 첫째라인의 출력
     7cc:	20 dd       	rcall	.-1472   	; 0x20e <lcd_gotoxy>
     7ce:	f5 01       	movw	r30, r10
     7d0:	22 81       	ldd	r18, Z+2	; 0x02
     7d2:	91 81       	ldd	r25, Z+1	; 0x01
						//printf("Time    %02d:%02d:%02d", section.hour, section.minute, section.seconds); // 운동 소모 시간
						sprintf(sectionTime, "Time    %02d:%02d:%02d", section.hour, section.minute, section.seconds);
     7d4:	80 81       	ld	r24, Z
     7d6:	1f 92       	push	r1
     7d8:	2f 93       	push	r18
     7da:	1f 92       	push	r1
     7dc:	9f 93       	push	r25
     7de:	1f 92       	push	r1
     7e0:	8f 93       	push	r24
     7e2:	82 e7       	ldi	r24, 0x72	; 114
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	9f 93       	push	r25
     7e8:	8f 93       	push	r24
     7ea:	7f 92       	push	r7
     7ec:	6f 92       	push	r6
     7ee:	d2 d2       	rcall	.+1444   	; 0xd94 <sprintf>
     7f0:	c3 01       	movw	r24, r6
						lcd_string (sectionTime);
     7f2:	ff dc       	rcall	.-1538   	; 0x1f2 <lcd_string>
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	80 e0       	ldi	r24, 0x00	; 0

						lcd_gotoxy(0, 1); // lcd둘째 라인의 출력
     7f8:	0a dd       	rcall	.-1516   	; 0x20e <lcd_gotoxy>
     7fa:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <kcal>
     7fe:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <kcal+0x1>
						//printf("Calorie %4.1fKcal", kcal); // 칼로리(ISR내에서 1초당 누적적으로 이루어짐)
						sprintf(kcalConsuption, "Calorie %4.1fKcal", kcal);
     802:	a0 91 ed 01 	lds	r26, 0x01ED	; 0x8001ed <kcal+0x2>
     806:	b0 91 ee 01 	lds	r27, 0x01EE	; 0x8001ee <kcal+0x3>
     80a:	bf 93       	push	r27
     80c:	af 93       	push	r26
     80e:	9f 93       	push	r25
     810:	8f 93       	push	r24
     812:	89 e8       	ldi	r24, 0x89	; 137
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	9f 93       	push	r25
     818:	8f 93       	push	r24
     81a:	3f 92       	push	r3
     81c:	2f 92       	push	r2
     81e:	ba d2       	rcall	.+1396   	; 0xd94 <sprintf>
     820:	c1 01       	movw	r24, r2
     822:	e7 dc       	rcall	.-1586   	; 0x1f2 <lcd_string>
						lcd_string (kcalConsuption);
     824:	00 93 e8 01 	sts	0x01E8, r16	; 0x8001e8 <mode>
     828:	8d b7       	in	r24, 0x3d	; 61

						mode = STOP_MODE; // 정지키의 입력에 따른 출력을 수행하고 종료되면, 정지모드가 되면서 스위치 구문을 빠져나간다(할거 다하고 빠져나간다)
     82a:	9e b7       	in	r25, 0x3e	; 62
     82c:	42 96       	adiw	r24, 0x12	; 18
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	f8 94       	cli
     832:	9e bf       	out	0x3e, r25	; 62
     834:	0f be       	out	0x3f, r0	; 63
     836:	8d bf       	out	0x3d, r24	; 61
     838:	07 c0       	rjmp	.+14     	; 0x848 <main+0x14a>
     83a:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <mode>
					}
					break;
				// 선택 키
				case KEY_ENTER : // 3) 선택키
					if( mode == STOP_MODE ) { // 현재 모드가 정지모드라면
     83e:	82 30       	cpi	r24, 0x02	; 2
     840:	19 f4       	brne	.+6      	; 0x848 <main+0x14a>
						init_screen(); //초기 모드로 진입한다
     842:	34 df       	rcall	.-408    	; 0x6ac <init_screen>
     844:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <mode>
			}
		}
		// 시작모드에서의 진행
		// 스위치 구문을 빠져나온 상황에서, 
		// 시작모드라면(상단 북마크 참조), 
		if( mode == START_MODE ) { // 시작 모드에서 속도 조절시 실시간 상황 업데이트
     848:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <mode>
     84c:	81 30       	cpi	r24, 0x01	; 1
     84e:	09 f0       	breq	.+2      	; 0x852 <main+0x154>
	
		// 가변저항 입력값을 읽어 모터의 속도조절 및 LCD에 상황표시
		velocity = (unsigned char)(var_read() / 20.4); // 가변저항 변화에 따른 ADC값을 읽어옴
     850:	3a c0       	rjmp	.+116    	; 0x8c6 <main+0x1c8>
     852:	62 d0       	rcall	.+196    	; 0x918 <var_read>
     854:	bc 01       	movw	r22, r24
     856:	99 0f       	add	r25, r25
     858:	88 0b       	sbc	r24, r24
     85a:	99 0b       	sbc	r25, r25
     85c:	62 d1       	rcall	.+708    	; 0xb22 <__floatsisf>
     85e:	23 e3       	ldi	r18, 0x33	; 51
     860:	33 e3       	ldi	r19, 0x33	; 51
     862:	43 ea       	ldi	r20, 0xA3	; 163
     864:	51 e4       	ldi	r21, 0x41	; 65
     866:	c7 d0       	rcall	.+398    	; 0x9f6 <__divsf3>
     868:	2e d1       	rcall	.+604    	; 0xac6 <__fixunssfsi>
     86a:	60 93 ea 01 	sts	0x01EA, r22	; 0x8001ea <velocity>
		dcmotor_spin(velocity); // 읽어온 값을 모터 회전 값으로 전달
     86e:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <velocity>

		lcd_gotoxy(10, 0); // 첫줄 10번째 칸으로 가서 업데이트 된 속도를 출력
     872:	36 dc       	rcall	.-1940   	; 0xe0 <dcmotor_spin>
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	8a e0       	ldi	r24, 0x0A	; 10
		//printf("%2d", velocity); // 정수형 2칸
		sprintf (velocitydisp, "%2d", velocity);
     878:	ca dc       	rcall	.-1644   	; 0x20e <lcd_gotoxy>
     87a:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <velocity>
     87e:	1f 92       	push	r1
     880:	8f 93       	push	r24
     882:	9f 92       	push	r9
     884:	8f 92       	push	r8
     886:	df 92       	push	r13
		lcd_string (velocitydisp);
     888:	cf 92       	push	r12
     88a:	84 d2       	rcall	.+1288   	; 0xd94 <sprintf>
     88c:	c6 01       	movw	r24, r12

		led_light((unsigned char)(8 - (velocity / 6.2))); // led값으로도 속도상황을 출력(단, LED의 갯수를 고려하여 계산한 변수를 전달)
     88e:	b1 dc       	rcall	.-1694   	; 0x1f2 <lcd_string>
     890:	60 91 ea 01 	lds	r22, 0x01EA	; 0x8001ea <velocity>
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	43 d1       	rcall	.+646    	; 0xb22 <__floatsisf>
     89c:	26 e6       	ldi	r18, 0x66	; 102
     89e:	36 e6       	ldi	r19, 0x66	; 102
     8a0:	46 ec       	ldi	r20, 0xC6	; 198
     8a2:	50 e4       	ldi	r21, 0x40	; 64
     8a4:	a8 d0       	rcall	.+336    	; 0x9f6 <__divsf3>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	91 e4       	ldi	r25, 0x41	; 65
     8b2:	3c d0       	rcall	.+120    	; 0x92c <__subsf3>
     8b4:	08 d1       	rcall	.+528    	; 0xac6 <__fixunssfsi>
     8b6:	86 2f       	mov	r24, r22
     8b8:	dd dc       	rcall	.-1606   	; 0x274 <led_light>
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	8a 81       	ldd	r24, Y+2	; 0x02
     8c8:	58 2a       	or	r5, r24
     8ca:	09 f4       	brne	.+2      	; 0x8ce <main+0x1d0>
		}
		
		// 실시간 시간의 표시
		// oldsec의 초기값과 최대값은 0xFF(=256)
		if( oldsec |= current.seconds ) { // 현재 시점의 시간과 oldsec시간이 다르다면
     8cc:	4d cf       	rjmp	.-358    	; 0x768 <main+0x6a>
     8ce:	5a 80       	ldd	r5, Y+2	; 0x02
     8d0:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <mode>
			oldsec = current.seconds; // oldsec을 지속적으로 while안에서 업데이트하고 
			if( mode != STOP_MODE ) { // stop모드가 아닌, 초기모드나 시작모드라면, (*정지모드에서는 section time이 표시된다)
     8d4:	82 30       	cpi	r24, 0x02	; 2
     8d6:	09 f4       	brne	.+2      	; 0x8da <main+0x1dc>
     8d8:	47 cf       	rjmp	.-370    	; 0x768 <main+0x6a>
     8da:	61 e0       	ldi	r22, 0x01	; 1
     8dc:	80 e0       	ldi	r24, 0x00	; 0
				lcd_gotoxy(0, 1); // 두번째 줄로 가서
     8de:	97 dc       	rcall	.-1746   	; 0x20e <lcd_gotoxy>
     8e0:	2a 81       	ldd	r18, Y+2	; 0x02
     8e2:	99 81       	ldd	r25, Y+1	; 0x01
     8e4:	88 81       	ld	r24, Y
				//printf("    %02d:%02d:%02d    ",
					//	current.hour, current.minute, current.seconds); // 시간을 계속 표시해라
				sprintf (currentTime, "    %02d:%02d:%02d    ", current.hour, current.minute, current.seconds);
     8e6:	1f 92       	push	r1
     8e8:	2f 93       	push	r18
     8ea:	1f 92       	push	r1
     8ec:	9f 93       	push	r25
     8ee:	1f 92       	push	r1
     8f0:	8f 93       	push	r24
     8f2:	ff 92       	push	r15
     8f4:	ef 92       	push	r14
     8f6:	e0 ed       	ldi	r30, 0xD0	; 208
     8f8:	f1 e0       	ldi	r31, 0x01	; 1
     8fa:	ff 93       	push	r31
     8fc:	ef 93       	push	r30
     8fe:	4a d2       	rcall	.+1172   	; 0xd94 <sprintf>
     900:	80 ed       	ldi	r24, 0xD0	; 208
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	76 dc       	rcall	.-1812   	; 0x1f2 <lcd_string>
     906:	8d b7       	in	r24, 0x3d	; 61
				lcd_string (currentTime);
     908:	9e b7       	in	r25, 0x3e	; 62
     90a:	0a 96       	adiw	r24, 0x0a	; 10
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	f8 94       	cli
     910:	9e bf       	out	0x3e, r25	; 62
     912:	0f be       	out	0x3f, r0	; 63
     914:	8d bf       	out	0x3d, r24	; 61
     916:	28 cf       	rjmp	.-432    	; 0x768 <main+0x6a>

00000918 <var_read>:
#include "var.h"

// 아날로그 값(가변저항)을 읽어와서 반환(getter)
int var_read(void)
{
	ADCSRA |= 0x40;
     918:	36 9a       	sbi	0x06, 6	; 6
	while( !(ADCSRA & 0x10) ); // AD변환이 끝날때까지 대기
     91a:	34 9b       	sbis	0x06, 4	; 6
     91c:	fe cf       	rjmp	.-4      	; 0x91a <var_read+0x2>

	return ADC; // ADC(ADCH + ADCL)에 저장된 아날로그 입력값을 읽어온다
     91e:	84 b1       	in	r24, 0x04	; 4
     920:	95 b1       	in	r25, 0x05	; 5
}
     922:	08 95       	ret

00000924 <var_init>:

// 아날로그 레지스터의 기본값 설정
void var_init(void)
{
	ADCSRA = 0x87; // 0b1000_0111, (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1 << ADPS0), 128 presale
     924:	87 e8       	ldi	r24, 0x87	; 135
     926:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x00; // AREF단자 전압 사용, 하위 10비트 저장모드, 차동입력 X, ADC0사용
     928:	17 b8       	out	0x07, r1	; 7
     92a:	08 95       	ret

0000092c <__subsf3>:
     92c:	50 58       	subi	r21, 0x80	; 128

0000092e <__addsf3>:
     92e:	bb 27       	eor	r27, r27
     930:	aa 27       	eor	r26, r26
     932:	0e d0       	rcall	.+28     	; 0x950 <__addsf3x>
     934:	48 c1       	rjmp	.+656    	; 0xbc6 <__fp_round>
     936:	39 d1       	rcall	.+626    	; 0xbaa <__fp_pscA>
     938:	30 f0       	brcs	.+12     	; 0x946 <__addsf3+0x18>
     93a:	3e d1       	rcall	.+636    	; 0xbb8 <__fp_pscB>
     93c:	20 f0       	brcs	.+8      	; 0x946 <__addsf3+0x18>
     93e:	31 f4       	brne	.+12     	; 0x94c <__addsf3+0x1e>
     940:	9f 3f       	cpi	r25, 0xFF	; 255
     942:	11 f4       	brne	.+4      	; 0x948 <__addsf3+0x1a>
     944:	1e f4       	brtc	.+6      	; 0x94c <__addsf3+0x1e>
     946:	2e c1       	rjmp	.+604    	; 0xba4 <__fp_nan>
     948:	0e f4       	brtc	.+2      	; 0x94c <__addsf3+0x1e>
     94a:	e0 95       	com	r30
     94c:	e7 fb       	bst	r30, 7
     94e:	24 c1       	rjmp	.+584    	; 0xb98 <__fp_inf>

00000950 <__addsf3x>:
     950:	e9 2f       	mov	r30, r25
     952:	4a d1       	rcall	.+660    	; 0xbe8 <__fp_split3>
     954:	80 f3       	brcs	.-32     	; 0x936 <__addsf3+0x8>
     956:	ba 17       	cp	r27, r26
     958:	62 07       	cpc	r22, r18
     95a:	73 07       	cpc	r23, r19
     95c:	84 07       	cpc	r24, r20
     95e:	95 07       	cpc	r25, r21
     960:	18 f0       	brcs	.+6      	; 0x968 <__addsf3x+0x18>
     962:	71 f4       	brne	.+28     	; 0x980 <__addsf3x+0x30>
     964:	9e f5       	brtc	.+102    	; 0x9cc <__addsf3x+0x7c>
     966:	62 c1       	rjmp	.+708    	; 0xc2c <__fp_zero>
     968:	0e f4       	brtc	.+2      	; 0x96c <__addsf3x+0x1c>
     96a:	e0 95       	com	r30
     96c:	0b 2e       	mov	r0, r27
     96e:	ba 2f       	mov	r27, r26
     970:	a0 2d       	mov	r26, r0
     972:	0b 01       	movw	r0, r22
     974:	b9 01       	movw	r22, r18
     976:	90 01       	movw	r18, r0
     978:	0c 01       	movw	r0, r24
     97a:	ca 01       	movw	r24, r20
     97c:	a0 01       	movw	r20, r0
     97e:	11 24       	eor	r1, r1
     980:	ff 27       	eor	r31, r31
     982:	59 1b       	sub	r21, r25
     984:	99 f0       	breq	.+38     	; 0x9ac <__addsf3x+0x5c>
     986:	59 3f       	cpi	r21, 0xF9	; 249
     988:	50 f4       	brcc	.+20     	; 0x99e <__addsf3x+0x4e>
     98a:	50 3e       	cpi	r21, 0xE0	; 224
     98c:	68 f1       	brcs	.+90     	; 0x9e8 <__addsf3x+0x98>
     98e:	1a 16       	cp	r1, r26
     990:	f0 40       	sbci	r31, 0x00	; 0
     992:	a2 2f       	mov	r26, r18
     994:	23 2f       	mov	r18, r19
     996:	34 2f       	mov	r19, r20
     998:	44 27       	eor	r20, r20
     99a:	58 5f       	subi	r21, 0xF8	; 248
     99c:	f3 cf       	rjmp	.-26     	; 0x984 <__addsf3x+0x34>
     99e:	46 95       	lsr	r20
     9a0:	37 95       	ror	r19
     9a2:	27 95       	ror	r18
     9a4:	a7 95       	ror	r26
     9a6:	f0 40       	sbci	r31, 0x00	; 0
     9a8:	53 95       	inc	r21
     9aa:	c9 f7       	brne	.-14     	; 0x99e <__addsf3x+0x4e>
     9ac:	7e f4       	brtc	.+30     	; 0x9cc <__addsf3x+0x7c>
     9ae:	1f 16       	cp	r1, r31
     9b0:	ba 0b       	sbc	r27, r26
     9b2:	62 0b       	sbc	r22, r18
     9b4:	73 0b       	sbc	r23, r19
     9b6:	84 0b       	sbc	r24, r20
     9b8:	ba f0       	brmi	.+46     	; 0x9e8 <__addsf3x+0x98>
     9ba:	91 50       	subi	r25, 0x01	; 1
     9bc:	a1 f0       	breq	.+40     	; 0x9e6 <__addsf3x+0x96>
     9be:	ff 0f       	add	r31, r31
     9c0:	bb 1f       	adc	r27, r27
     9c2:	66 1f       	adc	r22, r22
     9c4:	77 1f       	adc	r23, r23
     9c6:	88 1f       	adc	r24, r24
     9c8:	c2 f7       	brpl	.-16     	; 0x9ba <__addsf3x+0x6a>
     9ca:	0e c0       	rjmp	.+28     	; 0x9e8 <__addsf3x+0x98>
     9cc:	ba 0f       	add	r27, r26
     9ce:	62 1f       	adc	r22, r18
     9d0:	73 1f       	adc	r23, r19
     9d2:	84 1f       	adc	r24, r20
     9d4:	48 f4       	brcc	.+18     	; 0x9e8 <__addsf3x+0x98>
     9d6:	87 95       	ror	r24
     9d8:	77 95       	ror	r23
     9da:	67 95       	ror	r22
     9dc:	b7 95       	ror	r27
     9de:	f7 95       	ror	r31
     9e0:	9e 3f       	cpi	r25, 0xFE	; 254
     9e2:	08 f0       	brcs	.+2      	; 0x9e6 <__addsf3x+0x96>
     9e4:	b3 cf       	rjmp	.-154    	; 0x94c <__addsf3+0x1e>
     9e6:	93 95       	inc	r25
     9e8:	88 0f       	add	r24, r24
     9ea:	08 f0       	brcs	.+2      	; 0x9ee <__addsf3x+0x9e>
     9ec:	99 27       	eor	r25, r25
     9ee:	ee 0f       	add	r30, r30
     9f0:	97 95       	ror	r25
     9f2:	87 95       	ror	r24
     9f4:	08 95       	ret

000009f6 <__divsf3>:
     9f6:	0c d0       	rcall	.+24     	; 0xa10 <__divsf3x>
     9f8:	e6 c0       	rjmp	.+460    	; 0xbc6 <__fp_round>
     9fa:	de d0       	rcall	.+444    	; 0xbb8 <__fp_pscB>
     9fc:	40 f0       	brcs	.+16     	; 0xa0e <__divsf3+0x18>
     9fe:	d5 d0       	rcall	.+426    	; 0xbaa <__fp_pscA>
     a00:	30 f0       	brcs	.+12     	; 0xa0e <__divsf3+0x18>
     a02:	21 f4       	brne	.+8      	; 0xa0c <__divsf3+0x16>
     a04:	5f 3f       	cpi	r21, 0xFF	; 255
     a06:	19 f0       	breq	.+6      	; 0xa0e <__divsf3+0x18>
     a08:	c7 c0       	rjmp	.+398    	; 0xb98 <__fp_inf>
     a0a:	51 11       	cpse	r21, r1
     a0c:	10 c1       	rjmp	.+544    	; 0xc2e <__fp_szero>
     a0e:	ca c0       	rjmp	.+404    	; 0xba4 <__fp_nan>

00000a10 <__divsf3x>:
     a10:	eb d0       	rcall	.+470    	; 0xbe8 <__fp_split3>
     a12:	98 f3       	brcs	.-26     	; 0x9fa <__divsf3+0x4>

00000a14 <__divsf3_pse>:
     a14:	99 23       	and	r25, r25
     a16:	c9 f3       	breq	.-14     	; 0xa0a <__divsf3+0x14>
     a18:	55 23       	and	r21, r21
     a1a:	b1 f3       	breq	.-20     	; 0xa08 <__divsf3+0x12>
     a1c:	95 1b       	sub	r25, r21
     a1e:	55 0b       	sbc	r21, r21
     a20:	bb 27       	eor	r27, r27
     a22:	aa 27       	eor	r26, r26
     a24:	62 17       	cp	r22, r18
     a26:	73 07       	cpc	r23, r19
     a28:	84 07       	cpc	r24, r20
     a2a:	38 f0       	brcs	.+14     	; 0xa3a <__divsf3_pse+0x26>
     a2c:	9f 5f       	subi	r25, 0xFF	; 255
     a2e:	5f 4f       	sbci	r21, 0xFF	; 255
     a30:	22 0f       	add	r18, r18
     a32:	33 1f       	adc	r19, r19
     a34:	44 1f       	adc	r20, r20
     a36:	aa 1f       	adc	r26, r26
     a38:	a9 f3       	breq	.-22     	; 0xa24 <__divsf3_pse+0x10>
     a3a:	33 d0       	rcall	.+102    	; 0xaa2 <__divsf3_pse+0x8e>
     a3c:	0e 2e       	mov	r0, r30
     a3e:	3a f0       	brmi	.+14     	; 0xa4e <__divsf3_pse+0x3a>
     a40:	e0 e8       	ldi	r30, 0x80	; 128
     a42:	30 d0       	rcall	.+96     	; 0xaa4 <__divsf3_pse+0x90>
     a44:	91 50       	subi	r25, 0x01	; 1
     a46:	50 40       	sbci	r21, 0x00	; 0
     a48:	e6 95       	lsr	r30
     a4a:	00 1c       	adc	r0, r0
     a4c:	ca f7       	brpl	.-14     	; 0xa40 <__divsf3_pse+0x2c>
     a4e:	29 d0       	rcall	.+82     	; 0xaa2 <__divsf3_pse+0x8e>
     a50:	fe 2f       	mov	r31, r30
     a52:	27 d0       	rcall	.+78     	; 0xaa2 <__divsf3_pse+0x8e>
     a54:	66 0f       	add	r22, r22
     a56:	77 1f       	adc	r23, r23
     a58:	88 1f       	adc	r24, r24
     a5a:	bb 1f       	adc	r27, r27
     a5c:	26 17       	cp	r18, r22
     a5e:	37 07       	cpc	r19, r23
     a60:	48 07       	cpc	r20, r24
     a62:	ab 07       	cpc	r26, r27
     a64:	b0 e8       	ldi	r27, 0x80	; 128
     a66:	09 f0       	breq	.+2      	; 0xa6a <__divsf3_pse+0x56>
     a68:	bb 0b       	sbc	r27, r27
     a6a:	80 2d       	mov	r24, r0
     a6c:	bf 01       	movw	r22, r30
     a6e:	ff 27       	eor	r31, r31
     a70:	93 58       	subi	r25, 0x83	; 131
     a72:	5f 4f       	sbci	r21, 0xFF	; 255
     a74:	2a f0       	brmi	.+10     	; 0xa80 <__divsf3_pse+0x6c>
     a76:	9e 3f       	cpi	r25, 0xFE	; 254
     a78:	51 05       	cpc	r21, r1
     a7a:	68 f0       	brcs	.+26     	; 0xa96 <__divsf3_pse+0x82>
     a7c:	8d c0       	rjmp	.+282    	; 0xb98 <__fp_inf>
     a7e:	d7 c0       	rjmp	.+430    	; 0xc2e <__fp_szero>
     a80:	5f 3f       	cpi	r21, 0xFF	; 255
     a82:	ec f3       	brlt	.-6      	; 0xa7e <__divsf3_pse+0x6a>
     a84:	98 3e       	cpi	r25, 0xE8	; 232
     a86:	dc f3       	brlt	.-10     	; 0xa7e <__divsf3_pse+0x6a>
     a88:	86 95       	lsr	r24
     a8a:	77 95       	ror	r23
     a8c:	67 95       	ror	r22
     a8e:	b7 95       	ror	r27
     a90:	f7 95       	ror	r31
     a92:	9f 5f       	subi	r25, 0xFF	; 255
     a94:	c9 f7       	brne	.-14     	; 0xa88 <__divsf3_pse+0x74>
     a96:	88 0f       	add	r24, r24
     a98:	91 1d       	adc	r25, r1
     a9a:	96 95       	lsr	r25
     a9c:	87 95       	ror	r24
     a9e:	97 f9       	bld	r25, 7
     aa0:	08 95       	ret
     aa2:	e1 e0       	ldi	r30, 0x01	; 1
     aa4:	66 0f       	add	r22, r22
     aa6:	77 1f       	adc	r23, r23
     aa8:	88 1f       	adc	r24, r24
     aaa:	bb 1f       	adc	r27, r27
     aac:	62 17       	cp	r22, r18
     aae:	73 07       	cpc	r23, r19
     ab0:	84 07       	cpc	r24, r20
     ab2:	ba 07       	cpc	r27, r26
     ab4:	20 f0       	brcs	.+8      	; 0xabe <__divsf3_pse+0xaa>
     ab6:	62 1b       	sub	r22, r18
     ab8:	73 0b       	sbc	r23, r19
     aba:	84 0b       	sbc	r24, r20
     abc:	ba 0b       	sbc	r27, r26
     abe:	ee 1f       	adc	r30, r30
     ac0:	88 f7       	brcc	.-30     	; 0xaa4 <__divsf3_pse+0x90>
     ac2:	e0 95       	com	r30
     ac4:	08 95       	ret

00000ac6 <__fixunssfsi>:
     ac6:	98 d0       	rcall	.+304    	; 0xbf8 <__fp_splitA>
     ac8:	88 f0       	brcs	.+34     	; 0xaec <__fixunssfsi+0x26>
     aca:	9f 57       	subi	r25, 0x7F	; 127
     acc:	90 f0       	brcs	.+36     	; 0xaf2 <__fixunssfsi+0x2c>
     ace:	b9 2f       	mov	r27, r25
     ad0:	99 27       	eor	r25, r25
     ad2:	b7 51       	subi	r27, 0x17	; 23
     ad4:	a0 f0       	brcs	.+40     	; 0xafe <__fixunssfsi+0x38>
     ad6:	d1 f0       	breq	.+52     	; 0xb0c <__fixunssfsi+0x46>
     ad8:	66 0f       	add	r22, r22
     ada:	77 1f       	adc	r23, r23
     adc:	88 1f       	adc	r24, r24
     ade:	99 1f       	adc	r25, r25
     ae0:	1a f0       	brmi	.+6      	; 0xae8 <__fixunssfsi+0x22>
     ae2:	ba 95       	dec	r27
     ae4:	c9 f7       	brne	.-14     	; 0xad8 <__fixunssfsi+0x12>
     ae6:	12 c0       	rjmp	.+36     	; 0xb0c <__fixunssfsi+0x46>
     ae8:	b1 30       	cpi	r27, 0x01	; 1
     aea:	81 f0       	breq	.+32     	; 0xb0c <__fixunssfsi+0x46>
     aec:	9f d0       	rcall	.+318    	; 0xc2c <__fp_zero>
     aee:	b1 e0       	ldi	r27, 0x01	; 1
     af0:	08 95       	ret
     af2:	9c c0       	rjmp	.+312    	; 0xc2c <__fp_zero>
     af4:	67 2f       	mov	r22, r23
     af6:	78 2f       	mov	r23, r24
     af8:	88 27       	eor	r24, r24
     afa:	b8 5f       	subi	r27, 0xF8	; 248
     afc:	39 f0       	breq	.+14     	; 0xb0c <__fixunssfsi+0x46>
     afe:	b9 3f       	cpi	r27, 0xF9	; 249
     b00:	cc f3       	brlt	.-14     	; 0xaf4 <__fixunssfsi+0x2e>
     b02:	86 95       	lsr	r24
     b04:	77 95       	ror	r23
     b06:	67 95       	ror	r22
     b08:	b3 95       	inc	r27
     b0a:	d9 f7       	brne	.-10     	; 0xb02 <__fixunssfsi+0x3c>
     b0c:	3e f4       	brtc	.+14     	; 0xb1c <__fixunssfsi+0x56>
     b0e:	90 95       	com	r25
     b10:	80 95       	com	r24
     b12:	70 95       	com	r23
     b14:	61 95       	neg	r22
     b16:	7f 4f       	sbci	r23, 0xFF	; 255
     b18:	8f 4f       	sbci	r24, 0xFF	; 255
     b1a:	9f 4f       	sbci	r25, 0xFF	; 255
     b1c:	08 95       	ret

00000b1e <__floatunsisf>:
     b1e:	e8 94       	clt
     b20:	09 c0       	rjmp	.+18     	; 0xb34 <__floatsisf+0x12>

00000b22 <__floatsisf>:
     b22:	97 fb       	bst	r25, 7
     b24:	3e f4       	brtc	.+14     	; 0xb34 <__floatsisf+0x12>
     b26:	90 95       	com	r25
     b28:	80 95       	com	r24
     b2a:	70 95       	com	r23
     b2c:	61 95       	neg	r22
     b2e:	7f 4f       	sbci	r23, 0xFF	; 255
     b30:	8f 4f       	sbci	r24, 0xFF	; 255
     b32:	9f 4f       	sbci	r25, 0xFF	; 255
     b34:	99 23       	and	r25, r25
     b36:	a9 f0       	breq	.+42     	; 0xb62 <__floatsisf+0x40>
     b38:	f9 2f       	mov	r31, r25
     b3a:	96 e9       	ldi	r25, 0x96	; 150
     b3c:	bb 27       	eor	r27, r27
     b3e:	93 95       	inc	r25
     b40:	f6 95       	lsr	r31
     b42:	87 95       	ror	r24
     b44:	77 95       	ror	r23
     b46:	67 95       	ror	r22
     b48:	b7 95       	ror	r27
     b4a:	f1 11       	cpse	r31, r1
     b4c:	f8 cf       	rjmp	.-16     	; 0xb3e <__floatsisf+0x1c>
     b4e:	fa f4       	brpl	.+62     	; 0xb8e <__floatsisf+0x6c>
     b50:	bb 0f       	add	r27, r27
     b52:	11 f4       	brne	.+4      	; 0xb58 <__floatsisf+0x36>
     b54:	60 ff       	sbrs	r22, 0
     b56:	1b c0       	rjmp	.+54     	; 0xb8e <__floatsisf+0x6c>
     b58:	6f 5f       	subi	r22, 0xFF	; 255
     b5a:	7f 4f       	sbci	r23, 0xFF	; 255
     b5c:	8f 4f       	sbci	r24, 0xFF	; 255
     b5e:	9f 4f       	sbci	r25, 0xFF	; 255
     b60:	16 c0       	rjmp	.+44     	; 0xb8e <__floatsisf+0x6c>
     b62:	88 23       	and	r24, r24
     b64:	11 f0       	breq	.+4      	; 0xb6a <__floatsisf+0x48>
     b66:	96 e9       	ldi	r25, 0x96	; 150
     b68:	11 c0       	rjmp	.+34     	; 0xb8c <__floatsisf+0x6a>
     b6a:	77 23       	and	r23, r23
     b6c:	21 f0       	breq	.+8      	; 0xb76 <__floatsisf+0x54>
     b6e:	9e e8       	ldi	r25, 0x8E	; 142
     b70:	87 2f       	mov	r24, r23
     b72:	76 2f       	mov	r23, r22
     b74:	05 c0       	rjmp	.+10     	; 0xb80 <__floatsisf+0x5e>
     b76:	66 23       	and	r22, r22
     b78:	71 f0       	breq	.+28     	; 0xb96 <__floatsisf+0x74>
     b7a:	96 e8       	ldi	r25, 0x86	; 134
     b7c:	86 2f       	mov	r24, r22
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	2a f0       	brmi	.+10     	; 0xb8e <__floatsisf+0x6c>
     b84:	9a 95       	dec	r25
     b86:	66 0f       	add	r22, r22
     b88:	77 1f       	adc	r23, r23
     b8a:	88 1f       	adc	r24, r24
     b8c:	da f7       	brpl	.-10     	; 0xb84 <__floatsisf+0x62>
     b8e:	88 0f       	add	r24, r24
     b90:	96 95       	lsr	r25
     b92:	87 95       	ror	r24
     b94:	97 f9       	bld	r25, 7
     b96:	08 95       	ret

00000b98 <__fp_inf>:
     b98:	97 f9       	bld	r25, 7
     b9a:	9f 67       	ori	r25, 0x7F	; 127
     b9c:	80 e8       	ldi	r24, 0x80	; 128
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	60 e0       	ldi	r22, 0x00	; 0
     ba2:	08 95       	ret

00000ba4 <__fp_nan>:
     ba4:	9f ef       	ldi	r25, 0xFF	; 255
     ba6:	80 ec       	ldi	r24, 0xC0	; 192
     ba8:	08 95       	ret

00000baa <__fp_pscA>:
     baa:	00 24       	eor	r0, r0
     bac:	0a 94       	dec	r0
     bae:	16 16       	cp	r1, r22
     bb0:	17 06       	cpc	r1, r23
     bb2:	18 06       	cpc	r1, r24
     bb4:	09 06       	cpc	r0, r25
     bb6:	08 95       	ret

00000bb8 <__fp_pscB>:
     bb8:	00 24       	eor	r0, r0
     bba:	0a 94       	dec	r0
     bbc:	12 16       	cp	r1, r18
     bbe:	13 06       	cpc	r1, r19
     bc0:	14 06       	cpc	r1, r20
     bc2:	05 06       	cpc	r0, r21
     bc4:	08 95       	ret

00000bc6 <__fp_round>:
     bc6:	09 2e       	mov	r0, r25
     bc8:	03 94       	inc	r0
     bca:	00 0c       	add	r0, r0
     bcc:	11 f4       	brne	.+4      	; 0xbd2 <__fp_round+0xc>
     bce:	88 23       	and	r24, r24
     bd0:	52 f0       	brmi	.+20     	; 0xbe6 <__fp_round+0x20>
     bd2:	bb 0f       	add	r27, r27
     bd4:	40 f4       	brcc	.+16     	; 0xbe6 <__fp_round+0x20>
     bd6:	bf 2b       	or	r27, r31
     bd8:	11 f4       	brne	.+4      	; 0xbde <__fp_round+0x18>
     bda:	60 ff       	sbrs	r22, 0
     bdc:	04 c0       	rjmp	.+8      	; 0xbe6 <__fp_round+0x20>
     bde:	6f 5f       	subi	r22, 0xFF	; 255
     be0:	7f 4f       	sbci	r23, 0xFF	; 255
     be2:	8f 4f       	sbci	r24, 0xFF	; 255
     be4:	9f 4f       	sbci	r25, 0xFF	; 255
     be6:	08 95       	ret

00000be8 <__fp_split3>:
     be8:	57 fd       	sbrc	r21, 7
     bea:	90 58       	subi	r25, 0x80	; 128
     bec:	44 0f       	add	r20, r20
     bee:	55 1f       	adc	r21, r21
     bf0:	59 f0       	breq	.+22     	; 0xc08 <__fp_splitA+0x10>
     bf2:	5f 3f       	cpi	r21, 0xFF	; 255
     bf4:	71 f0       	breq	.+28     	; 0xc12 <__fp_splitA+0x1a>
     bf6:	47 95       	ror	r20

00000bf8 <__fp_splitA>:
     bf8:	88 0f       	add	r24, r24
     bfa:	97 fb       	bst	r25, 7
     bfc:	99 1f       	adc	r25, r25
     bfe:	61 f0       	breq	.+24     	; 0xc18 <__fp_splitA+0x20>
     c00:	9f 3f       	cpi	r25, 0xFF	; 255
     c02:	79 f0       	breq	.+30     	; 0xc22 <__fp_splitA+0x2a>
     c04:	87 95       	ror	r24
     c06:	08 95       	ret
     c08:	12 16       	cp	r1, r18
     c0a:	13 06       	cpc	r1, r19
     c0c:	14 06       	cpc	r1, r20
     c0e:	55 1f       	adc	r21, r21
     c10:	f2 cf       	rjmp	.-28     	; 0xbf6 <__fp_split3+0xe>
     c12:	46 95       	lsr	r20
     c14:	f1 df       	rcall	.-30     	; 0xbf8 <__fp_splitA>
     c16:	08 c0       	rjmp	.+16     	; 0xc28 <__fp_splitA+0x30>
     c18:	16 16       	cp	r1, r22
     c1a:	17 06       	cpc	r1, r23
     c1c:	18 06       	cpc	r1, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	f1 cf       	rjmp	.-30     	; 0xc04 <__fp_splitA+0xc>
     c22:	86 95       	lsr	r24
     c24:	71 05       	cpc	r23, r1
     c26:	61 05       	cpc	r22, r1
     c28:	08 94       	sec
     c2a:	08 95       	ret

00000c2c <__fp_zero>:
     c2c:	e8 94       	clt

00000c2e <__fp_szero>:
     c2e:	bb 27       	eor	r27, r27
     c30:	66 27       	eor	r22, r22
     c32:	77 27       	eor	r23, r23
     c34:	cb 01       	movw	r24, r22
     c36:	97 f9       	bld	r25, 7
     c38:	08 95       	ret

00000c3a <__mulsf3>:
     c3a:	0b d0       	rcall	.+22     	; 0xc52 <__mulsf3x>
     c3c:	c4 cf       	rjmp	.-120    	; 0xbc6 <__fp_round>
     c3e:	b5 df       	rcall	.-150    	; 0xbaa <__fp_pscA>
     c40:	28 f0       	brcs	.+10     	; 0xc4c <__mulsf3+0x12>
     c42:	ba df       	rcall	.-140    	; 0xbb8 <__fp_pscB>
     c44:	18 f0       	brcs	.+6      	; 0xc4c <__mulsf3+0x12>
     c46:	95 23       	and	r25, r21
     c48:	09 f0       	breq	.+2      	; 0xc4c <__mulsf3+0x12>
     c4a:	a6 cf       	rjmp	.-180    	; 0xb98 <__fp_inf>
     c4c:	ab cf       	rjmp	.-170    	; 0xba4 <__fp_nan>
     c4e:	11 24       	eor	r1, r1
     c50:	ee cf       	rjmp	.-36     	; 0xc2e <__fp_szero>

00000c52 <__mulsf3x>:
     c52:	ca df       	rcall	.-108    	; 0xbe8 <__fp_split3>
     c54:	a0 f3       	brcs	.-24     	; 0xc3e <__mulsf3+0x4>

00000c56 <__mulsf3_pse>:
     c56:	95 9f       	mul	r25, r21
     c58:	d1 f3       	breq	.-12     	; 0xc4e <__mulsf3+0x14>
     c5a:	95 0f       	add	r25, r21
     c5c:	50 e0       	ldi	r21, 0x00	; 0
     c5e:	55 1f       	adc	r21, r21
     c60:	62 9f       	mul	r22, r18
     c62:	f0 01       	movw	r30, r0
     c64:	72 9f       	mul	r23, r18
     c66:	bb 27       	eor	r27, r27
     c68:	f0 0d       	add	r31, r0
     c6a:	b1 1d       	adc	r27, r1
     c6c:	63 9f       	mul	r22, r19
     c6e:	aa 27       	eor	r26, r26
     c70:	f0 0d       	add	r31, r0
     c72:	b1 1d       	adc	r27, r1
     c74:	aa 1f       	adc	r26, r26
     c76:	64 9f       	mul	r22, r20
     c78:	66 27       	eor	r22, r22
     c7a:	b0 0d       	add	r27, r0
     c7c:	a1 1d       	adc	r26, r1
     c7e:	66 1f       	adc	r22, r22
     c80:	82 9f       	mul	r24, r18
     c82:	22 27       	eor	r18, r18
     c84:	b0 0d       	add	r27, r0
     c86:	a1 1d       	adc	r26, r1
     c88:	62 1f       	adc	r22, r18
     c8a:	73 9f       	mul	r23, r19
     c8c:	b0 0d       	add	r27, r0
     c8e:	a1 1d       	adc	r26, r1
     c90:	62 1f       	adc	r22, r18
     c92:	83 9f       	mul	r24, r19
     c94:	a0 0d       	add	r26, r0
     c96:	61 1d       	adc	r22, r1
     c98:	22 1f       	adc	r18, r18
     c9a:	74 9f       	mul	r23, r20
     c9c:	33 27       	eor	r19, r19
     c9e:	a0 0d       	add	r26, r0
     ca0:	61 1d       	adc	r22, r1
     ca2:	23 1f       	adc	r18, r19
     ca4:	84 9f       	mul	r24, r20
     ca6:	60 0d       	add	r22, r0
     ca8:	21 1d       	adc	r18, r1
     caa:	82 2f       	mov	r24, r18
     cac:	76 2f       	mov	r23, r22
     cae:	6a 2f       	mov	r22, r26
     cb0:	11 24       	eor	r1, r1
     cb2:	9f 57       	subi	r25, 0x7F	; 127
     cb4:	50 40       	sbci	r21, 0x00	; 0
     cb6:	8a f0       	brmi	.+34     	; 0xcda <__mulsf3_pse+0x84>
     cb8:	e1 f0       	breq	.+56     	; 0xcf2 <__mulsf3_pse+0x9c>
     cba:	88 23       	and	r24, r24
     cbc:	4a f0       	brmi	.+18     	; 0xcd0 <__mulsf3_pse+0x7a>
     cbe:	ee 0f       	add	r30, r30
     cc0:	ff 1f       	adc	r31, r31
     cc2:	bb 1f       	adc	r27, r27
     cc4:	66 1f       	adc	r22, r22
     cc6:	77 1f       	adc	r23, r23
     cc8:	88 1f       	adc	r24, r24
     cca:	91 50       	subi	r25, 0x01	; 1
     ccc:	50 40       	sbci	r21, 0x00	; 0
     cce:	a9 f7       	brne	.-22     	; 0xcba <__mulsf3_pse+0x64>
     cd0:	9e 3f       	cpi	r25, 0xFE	; 254
     cd2:	51 05       	cpc	r21, r1
     cd4:	70 f0       	brcs	.+28     	; 0xcf2 <__mulsf3_pse+0x9c>
     cd6:	60 cf       	rjmp	.-320    	; 0xb98 <__fp_inf>
     cd8:	aa cf       	rjmp	.-172    	; 0xc2e <__fp_szero>
     cda:	5f 3f       	cpi	r21, 0xFF	; 255
     cdc:	ec f3       	brlt	.-6      	; 0xcd8 <__mulsf3_pse+0x82>
     cde:	98 3e       	cpi	r25, 0xE8	; 232
     ce0:	dc f3       	brlt	.-10     	; 0xcd8 <__mulsf3_pse+0x82>
     ce2:	86 95       	lsr	r24
     ce4:	77 95       	ror	r23
     ce6:	67 95       	ror	r22
     ce8:	b7 95       	ror	r27
     cea:	f7 95       	ror	r31
     cec:	e7 95       	ror	r30
     cee:	9f 5f       	subi	r25, 0xFF	; 255
     cf0:	c1 f7       	brne	.-16     	; 0xce2 <__mulsf3_pse+0x8c>
     cf2:	fe 2b       	or	r31, r30
     cf4:	88 0f       	add	r24, r24
     cf6:	91 1d       	adc	r25, r1
     cf8:	96 95       	lsr	r25
     cfa:	87 95       	ror	r24
     cfc:	97 f9       	bld	r25, 7
     cfe:	08 95       	ret

00000d00 <fdevopen>:
     d00:	0f 93       	push	r16
     d02:	1f 93       	push	r17
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	31 f4       	brne	.+12     	; 0xd18 <fdevopen+0x18>
     d0c:	61 15       	cp	r22, r1
     d0e:	71 05       	cpc	r23, r1
     d10:	19 f4       	brne	.+6      	; 0xd18 <fdevopen+0x18>
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	39 c0       	rjmp	.+114    	; 0xd8a <fdevopen+0x8a>
     d18:	8b 01       	movw	r16, r22
     d1a:	ec 01       	movw	r28, r24
     d1c:	6e e0       	ldi	r22, 0x0E	; 14
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	62 d2       	rcall	.+1220   	; 0x11ea <calloc>
     d26:	fc 01       	movw	r30, r24
     d28:	89 2b       	or	r24, r25
     d2a:	99 f3       	breq	.-26     	; 0xd12 <fdevopen+0x12>
     d2c:	80 e8       	ldi	r24, 0x80	; 128
     d2e:	83 83       	std	Z+3, r24	; 0x03
     d30:	01 15       	cp	r16, r1
     d32:	11 05       	cpc	r17, r1
     d34:	71 f0       	breq	.+28     	; 0xd52 <fdevopen+0x52>
     d36:	13 87       	std	Z+11, r17	; 0x0b
     d38:	02 87       	std	Z+10, r16	; 0x0a
     d3a:	81 e8       	ldi	r24, 0x81	; 129
     d3c:	83 83       	std	Z+3, r24	; 0x03
     d3e:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <__iob>
     d42:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <__iob+0x1>
     d46:	89 2b       	or	r24, r25
     d48:	21 f4       	brne	.+8      	; 0xd52 <fdevopen+0x52>
     d4a:	f0 93 f0 01 	sts	0x01F0, r31	; 0x8001f0 <__iob+0x1>
     d4e:	e0 93 ef 01 	sts	0x01EF, r30	; 0x8001ef <__iob>
     d52:	20 97       	sbiw	r28, 0x00	; 0
     d54:	c9 f0       	breq	.+50     	; 0xd88 <fdevopen+0x88>
     d56:	d1 87       	std	Z+9, r29	; 0x09
     d58:	c0 87       	std	Z+8, r28	; 0x08
     d5a:	83 81       	ldd	r24, Z+3	; 0x03
     d5c:	82 60       	ori	r24, 0x02	; 2
     d5e:	83 83       	std	Z+3, r24	; 0x03
     d60:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <__iob+0x2>
     d64:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <__iob+0x3>
     d68:	89 2b       	or	r24, r25
     d6a:	71 f4       	brne	.+28     	; 0xd88 <fdevopen+0x88>
     d6c:	f0 93 f2 01 	sts	0x01F2, r31	; 0x8001f2 <__iob+0x3>
     d70:	e0 93 f1 01 	sts	0x01F1, r30	; 0x8001f1 <__iob+0x2>
     d74:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <__iob+0x4>
     d78:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <__iob+0x5>
     d7c:	89 2b       	or	r24, r25
     d7e:	21 f4       	brne	.+8      	; 0xd88 <fdevopen+0x88>
     d80:	f0 93 f4 01 	sts	0x01F4, r31	; 0x8001f4 <__iob+0x5>
     d84:	e0 93 f3 01 	sts	0x01F3, r30	; 0x8001f3 <__iob+0x4>
     d88:	cf 01       	movw	r24, r30
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	08 95       	ret

00000d94 <sprintf>:
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	2e 97       	sbiw	r28, 0x0e	; 14
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	0d 89       	ldd	r16, Y+21	; 0x15
     dae:	1e 89       	ldd	r17, Y+22	; 0x16
     db0:	86 e0       	ldi	r24, 0x06	; 6
     db2:	8c 83       	std	Y+4, r24	; 0x04
     db4:	1a 83       	std	Y+2, r17	; 0x02
     db6:	09 83       	std	Y+1, r16	; 0x01
     db8:	8f ef       	ldi	r24, 0xFF	; 255
     dba:	9f e7       	ldi	r25, 0x7F	; 127
     dbc:	9e 83       	std	Y+6, r25	; 0x06
     dbe:	8d 83       	std	Y+5, r24	; 0x05
     dc0:	ae 01       	movw	r20, r28
     dc2:	47 5e       	subi	r20, 0xE7	; 231
     dc4:	5f 4f       	sbci	r21, 0xFF	; 255
     dc6:	6f 89       	ldd	r22, Y+23	; 0x17
     dc8:	78 8d       	ldd	r23, Y+24	; 0x18
     dca:	ce 01       	movw	r24, r28
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	10 d0       	rcall	.+32     	; 0xdf0 <vfprintf>
     dd0:	ef 81       	ldd	r30, Y+7	; 0x07
     dd2:	f8 85       	ldd	r31, Y+8	; 0x08
     dd4:	e0 0f       	add	r30, r16
     dd6:	f1 1f       	adc	r31, r17
     dd8:	10 82       	st	Z, r1
     dda:	2e 96       	adiw	r28, 0x0e	; 14
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	cd bf       	out	0x3d, r28	; 61
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	08 95       	ret

00000df0 <vfprintf>:
     df0:	2f 92       	push	r2
     df2:	3f 92       	push	r3
     df4:	4f 92       	push	r4
     df6:	5f 92       	push	r5
     df8:	6f 92       	push	r6
     dfa:	7f 92       	push	r7
     dfc:	8f 92       	push	r8
     dfe:	9f 92       	push	r9
     e00:	af 92       	push	r10
     e02:	bf 92       	push	r11
     e04:	cf 92       	push	r12
     e06:	df 92       	push	r13
     e08:	ef 92       	push	r14
     e0a:	ff 92       	push	r15
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	2b 97       	sbiw	r28, 0x0b	; 11
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	6c 01       	movw	r12, r24
     e26:	7b 01       	movw	r14, r22
     e28:	8a 01       	movw	r16, r20
     e2a:	fc 01       	movw	r30, r24
     e2c:	17 82       	std	Z+7, r1	; 0x07
     e2e:	16 82       	std	Z+6, r1	; 0x06
     e30:	83 81       	ldd	r24, Z+3	; 0x03
     e32:	81 ff       	sbrs	r24, 1
     e34:	bf c1       	rjmp	.+894    	; 0x11b4 <__stack+0xb5>
     e36:	ce 01       	movw	r24, r28
     e38:	01 96       	adiw	r24, 0x01	; 1
     e3a:	3c 01       	movw	r6, r24
     e3c:	f6 01       	movw	r30, r12
     e3e:	93 81       	ldd	r25, Z+3	; 0x03
     e40:	f7 01       	movw	r30, r14
     e42:	93 fd       	sbrc	r25, 3
     e44:	85 91       	lpm	r24, Z+
     e46:	93 ff       	sbrs	r25, 3
     e48:	81 91       	ld	r24, Z+
     e4a:	7f 01       	movw	r14, r30
     e4c:	88 23       	and	r24, r24
     e4e:	09 f4       	brne	.+2      	; 0xe52 <vfprintf+0x62>
     e50:	ad c1       	rjmp	.+858    	; 0x11ac <__stack+0xad>
     e52:	85 32       	cpi	r24, 0x25	; 37
     e54:	39 f4       	brne	.+14     	; 0xe64 <vfprintf+0x74>
     e56:	93 fd       	sbrc	r25, 3
     e58:	85 91       	lpm	r24, Z+
     e5a:	93 ff       	sbrs	r25, 3
     e5c:	81 91       	ld	r24, Z+
     e5e:	7f 01       	movw	r14, r30
     e60:	85 32       	cpi	r24, 0x25	; 37
     e62:	21 f4       	brne	.+8      	; 0xe6c <vfprintf+0x7c>
     e64:	b6 01       	movw	r22, r12
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	18 d3       	rcall	.+1584   	; 0x149a <fputc>
     e6a:	e8 cf       	rjmp	.-48     	; 0xe3c <vfprintf+0x4c>
     e6c:	91 2c       	mov	r9, r1
     e6e:	21 2c       	mov	r2, r1
     e70:	31 2c       	mov	r3, r1
     e72:	ff e1       	ldi	r31, 0x1F	; 31
     e74:	f3 15       	cp	r31, r3
     e76:	d8 f0       	brcs	.+54     	; 0xeae <vfprintf+0xbe>
     e78:	8b 32       	cpi	r24, 0x2B	; 43
     e7a:	79 f0       	breq	.+30     	; 0xe9a <vfprintf+0xaa>
     e7c:	38 f4       	brcc	.+14     	; 0xe8c <vfprintf+0x9c>
     e7e:	80 32       	cpi	r24, 0x20	; 32
     e80:	79 f0       	breq	.+30     	; 0xea0 <vfprintf+0xb0>
     e82:	83 32       	cpi	r24, 0x23	; 35
     e84:	a1 f4       	brne	.+40     	; 0xeae <vfprintf+0xbe>
     e86:	23 2d       	mov	r18, r3
     e88:	20 61       	ori	r18, 0x10	; 16
     e8a:	1d c0       	rjmp	.+58     	; 0xec6 <vfprintf+0xd6>
     e8c:	8d 32       	cpi	r24, 0x2D	; 45
     e8e:	61 f0       	breq	.+24     	; 0xea8 <vfprintf+0xb8>
     e90:	80 33       	cpi	r24, 0x30	; 48
     e92:	69 f4       	brne	.+26     	; 0xeae <vfprintf+0xbe>
     e94:	23 2d       	mov	r18, r3
     e96:	21 60       	ori	r18, 0x01	; 1
     e98:	16 c0       	rjmp	.+44     	; 0xec6 <vfprintf+0xd6>
     e9a:	83 2d       	mov	r24, r3
     e9c:	82 60       	ori	r24, 0x02	; 2
     e9e:	38 2e       	mov	r3, r24
     ea0:	e3 2d       	mov	r30, r3
     ea2:	e4 60       	ori	r30, 0x04	; 4
     ea4:	3e 2e       	mov	r3, r30
     ea6:	2a c0       	rjmp	.+84     	; 0xefc <vfprintf+0x10c>
     ea8:	f3 2d       	mov	r31, r3
     eaa:	f8 60       	ori	r31, 0x08	; 8
     eac:	1d c0       	rjmp	.+58     	; 0xee8 <vfprintf+0xf8>
     eae:	37 fc       	sbrc	r3, 7
     eb0:	2d c0       	rjmp	.+90     	; 0xf0c <vfprintf+0x11c>
     eb2:	20 ed       	ldi	r18, 0xD0	; 208
     eb4:	28 0f       	add	r18, r24
     eb6:	2a 30       	cpi	r18, 0x0A	; 10
     eb8:	40 f0       	brcs	.+16     	; 0xeca <vfprintf+0xda>
     eba:	8e 32       	cpi	r24, 0x2E	; 46
     ebc:	b9 f4       	brne	.+46     	; 0xeec <vfprintf+0xfc>
     ebe:	36 fc       	sbrc	r3, 6
     ec0:	75 c1       	rjmp	.+746    	; 0x11ac <__stack+0xad>
     ec2:	23 2d       	mov	r18, r3
     ec4:	20 64       	ori	r18, 0x40	; 64
     ec6:	32 2e       	mov	r3, r18
     ec8:	19 c0       	rjmp	.+50     	; 0xefc <vfprintf+0x10c>
     eca:	36 fe       	sbrs	r3, 6
     ecc:	06 c0       	rjmp	.+12     	; 0xeda <vfprintf+0xea>
     ece:	8a e0       	ldi	r24, 0x0A	; 10
     ed0:	98 9e       	mul	r9, r24
     ed2:	20 0d       	add	r18, r0
     ed4:	11 24       	eor	r1, r1
     ed6:	92 2e       	mov	r9, r18
     ed8:	11 c0       	rjmp	.+34     	; 0xefc <vfprintf+0x10c>
     eda:	ea e0       	ldi	r30, 0x0A	; 10
     edc:	2e 9e       	mul	r2, r30
     ede:	20 0d       	add	r18, r0
     ee0:	11 24       	eor	r1, r1
     ee2:	22 2e       	mov	r2, r18
     ee4:	f3 2d       	mov	r31, r3
     ee6:	f0 62       	ori	r31, 0x20	; 32
     ee8:	3f 2e       	mov	r3, r31
     eea:	08 c0       	rjmp	.+16     	; 0xefc <vfprintf+0x10c>
     eec:	8c 36       	cpi	r24, 0x6C	; 108
     eee:	21 f4       	brne	.+8      	; 0xef8 <vfprintf+0x108>
     ef0:	83 2d       	mov	r24, r3
     ef2:	80 68       	ori	r24, 0x80	; 128
     ef4:	38 2e       	mov	r3, r24
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <vfprintf+0x10c>
     ef8:	88 36       	cpi	r24, 0x68	; 104
     efa:	41 f4       	brne	.+16     	; 0xf0c <vfprintf+0x11c>
     efc:	f7 01       	movw	r30, r14
     efe:	93 fd       	sbrc	r25, 3
     f00:	85 91       	lpm	r24, Z+
     f02:	93 ff       	sbrs	r25, 3
     f04:	81 91       	ld	r24, Z+
     f06:	7f 01       	movw	r14, r30
     f08:	81 11       	cpse	r24, r1
     f0a:	b3 cf       	rjmp	.-154    	; 0xe72 <vfprintf+0x82>
     f0c:	98 2f       	mov	r25, r24
     f0e:	9f 7d       	andi	r25, 0xDF	; 223
     f10:	95 54       	subi	r25, 0x45	; 69
     f12:	93 30       	cpi	r25, 0x03	; 3
     f14:	28 f4       	brcc	.+10     	; 0xf20 <vfprintf+0x130>
     f16:	0c 5f       	subi	r16, 0xFC	; 252
     f18:	1f 4f       	sbci	r17, 0xFF	; 255
     f1a:	9f e3       	ldi	r25, 0x3F	; 63
     f1c:	99 83       	std	Y+1, r25	; 0x01
     f1e:	0d c0       	rjmp	.+26     	; 0xf3a <vfprintf+0x14a>
     f20:	83 36       	cpi	r24, 0x63	; 99
     f22:	31 f0       	breq	.+12     	; 0xf30 <vfprintf+0x140>
     f24:	83 37       	cpi	r24, 0x73	; 115
     f26:	71 f0       	breq	.+28     	; 0xf44 <vfprintf+0x154>
     f28:	83 35       	cpi	r24, 0x53	; 83
     f2a:	09 f0       	breq	.+2      	; 0xf2e <vfprintf+0x13e>
     f2c:	55 c0       	rjmp	.+170    	; 0xfd8 <vfprintf+0x1e8>
     f2e:	20 c0       	rjmp	.+64     	; 0xf70 <vfprintf+0x180>
     f30:	f8 01       	movw	r30, r16
     f32:	80 81       	ld	r24, Z
     f34:	89 83       	std	Y+1, r24	; 0x01
     f36:	0e 5f       	subi	r16, 0xFE	; 254
     f38:	1f 4f       	sbci	r17, 0xFF	; 255
     f3a:	88 24       	eor	r8, r8
     f3c:	83 94       	inc	r8
     f3e:	91 2c       	mov	r9, r1
     f40:	53 01       	movw	r10, r6
     f42:	12 c0       	rjmp	.+36     	; 0xf68 <vfprintf+0x178>
     f44:	28 01       	movw	r4, r16
     f46:	f2 e0       	ldi	r31, 0x02	; 2
     f48:	4f 0e       	add	r4, r31
     f4a:	51 1c       	adc	r5, r1
     f4c:	f8 01       	movw	r30, r16
     f4e:	a0 80       	ld	r10, Z
     f50:	b1 80       	ldd	r11, Z+1	; 0x01
     f52:	36 fe       	sbrs	r3, 6
     f54:	03 c0       	rjmp	.+6      	; 0xf5c <vfprintf+0x16c>
     f56:	69 2d       	mov	r22, r9
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <vfprintf+0x170>
     f5c:	6f ef       	ldi	r22, 0xFF	; 255
     f5e:	7f ef       	ldi	r23, 0xFF	; 255
     f60:	c5 01       	movw	r24, r10
     f62:	90 d2       	rcall	.+1312   	; 0x1484 <strnlen>
     f64:	4c 01       	movw	r8, r24
     f66:	82 01       	movw	r16, r4
     f68:	f3 2d       	mov	r31, r3
     f6a:	ff 77       	andi	r31, 0x7F	; 127
     f6c:	3f 2e       	mov	r3, r31
     f6e:	15 c0       	rjmp	.+42     	; 0xf9a <vfprintf+0x1aa>
     f70:	28 01       	movw	r4, r16
     f72:	22 e0       	ldi	r18, 0x02	; 2
     f74:	42 0e       	add	r4, r18
     f76:	51 1c       	adc	r5, r1
     f78:	f8 01       	movw	r30, r16
     f7a:	a0 80       	ld	r10, Z
     f7c:	b1 80       	ldd	r11, Z+1	; 0x01
     f7e:	36 fe       	sbrs	r3, 6
     f80:	03 c0       	rjmp	.+6      	; 0xf88 <vfprintf+0x198>
     f82:	69 2d       	mov	r22, r9
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <vfprintf+0x19c>
     f88:	6f ef       	ldi	r22, 0xFF	; 255
     f8a:	7f ef       	ldi	r23, 0xFF	; 255
     f8c:	c5 01       	movw	r24, r10
     f8e:	68 d2       	rcall	.+1232   	; 0x1460 <strnlen_P>
     f90:	4c 01       	movw	r8, r24
     f92:	f3 2d       	mov	r31, r3
     f94:	f0 68       	ori	r31, 0x80	; 128
     f96:	3f 2e       	mov	r3, r31
     f98:	82 01       	movw	r16, r4
     f9a:	33 fc       	sbrc	r3, 3
     f9c:	19 c0       	rjmp	.+50     	; 0xfd0 <vfprintf+0x1e0>
     f9e:	82 2d       	mov	r24, r2
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	88 16       	cp	r8, r24
     fa4:	99 06       	cpc	r9, r25
     fa6:	a0 f4       	brcc	.+40     	; 0xfd0 <vfprintf+0x1e0>
     fa8:	b6 01       	movw	r22, r12
     faa:	80 e2       	ldi	r24, 0x20	; 32
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	75 d2       	rcall	.+1258   	; 0x149a <fputc>
     fb0:	2a 94       	dec	r2
     fb2:	f5 cf       	rjmp	.-22     	; 0xf9e <vfprintf+0x1ae>
     fb4:	f5 01       	movw	r30, r10
     fb6:	37 fc       	sbrc	r3, 7
     fb8:	85 91       	lpm	r24, Z+
     fba:	37 fe       	sbrs	r3, 7
     fbc:	81 91       	ld	r24, Z+
     fbe:	5f 01       	movw	r10, r30
     fc0:	b6 01       	movw	r22, r12
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	6a d2       	rcall	.+1236   	; 0x149a <fputc>
     fc6:	21 10       	cpse	r2, r1
     fc8:	2a 94       	dec	r2
     fca:	21 e0       	ldi	r18, 0x01	; 1
     fcc:	82 1a       	sub	r8, r18
     fce:	91 08       	sbc	r9, r1
     fd0:	81 14       	cp	r8, r1
     fd2:	91 04       	cpc	r9, r1
     fd4:	79 f7       	brne	.-34     	; 0xfb4 <vfprintf+0x1c4>
     fd6:	e1 c0       	rjmp	.+450    	; 0x119a <__stack+0x9b>
     fd8:	84 36       	cpi	r24, 0x64	; 100
     fda:	11 f0       	breq	.+4      	; 0xfe0 <vfprintf+0x1f0>
     fdc:	89 36       	cpi	r24, 0x69	; 105
     fde:	39 f5       	brne	.+78     	; 0x102e <vfprintf+0x23e>
     fe0:	f8 01       	movw	r30, r16
     fe2:	37 fe       	sbrs	r3, 7
     fe4:	07 c0       	rjmp	.+14     	; 0xff4 <vfprintf+0x204>
     fe6:	60 81       	ld	r22, Z
     fe8:	71 81       	ldd	r23, Z+1	; 0x01
     fea:	82 81       	ldd	r24, Z+2	; 0x02
     fec:	93 81       	ldd	r25, Z+3	; 0x03
     fee:	0c 5f       	subi	r16, 0xFC	; 252
     ff0:	1f 4f       	sbci	r17, 0xFF	; 255
     ff2:	08 c0       	rjmp	.+16     	; 0x1004 <vfprintf+0x214>
     ff4:	60 81       	ld	r22, Z
     ff6:	71 81       	ldd	r23, Z+1	; 0x01
     ff8:	07 2e       	mov	r0, r23
     ffa:	00 0c       	add	r0, r0
     ffc:	88 0b       	sbc	r24, r24
     ffe:	99 0b       	sbc	r25, r25
    1000:	0e 5f       	subi	r16, 0xFE	; 254
    1002:	1f 4f       	sbci	r17, 0xFF	; 255
    1004:	f3 2d       	mov	r31, r3
    1006:	ff 76       	andi	r31, 0x6F	; 111
    1008:	3f 2e       	mov	r3, r31
    100a:	97 ff       	sbrs	r25, 7
    100c:	09 c0       	rjmp	.+18     	; 0x1020 <vfprintf+0x230>
    100e:	90 95       	com	r25
    1010:	80 95       	com	r24
    1012:	70 95       	com	r23
    1014:	61 95       	neg	r22
    1016:	7f 4f       	sbci	r23, 0xFF	; 255
    1018:	8f 4f       	sbci	r24, 0xFF	; 255
    101a:	9f 4f       	sbci	r25, 0xFF	; 255
    101c:	f0 68       	ori	r31, 0x80	; 128
    101e:	3f 2e       	mov	r3, r31
    1020:	2a e0       	ldi	r18, 0x0A	; 10
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	a3 01       	movw	r20, r6
    1026:	75 d2       	rcall	.+1258   	; 0x1512 <__ultoa_invert>
    1028:	88 2e       	mov	r8, r24
    102a:	86 18       	sub	r8, r6
    102c:	44 c0       	rjmp	.+136    	; 0x10b6 <vfprintf+0x2c6>
    102e:	85 37       	cpi	r24, 0x75	; 117
    1030:	31 f4       	brne	.+12     	; 0x103e <vfprintf+0x24e>
    1032:	23 2d       	mov	r18, r3
    1034:	2f 7e       	andi	r18, 0xEF	; 239
    1036:	b2 2e       	mov	r11, r18
    1038:	2a e0       	ldi	r18, 0x0A	; 10
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	25 c0       	rjmp	.+74     	; 0x1088 <vfprintf+0x298>
    103e:	93 2d       	mov	r25, r3
    1040:	99 7f       	andi	r25, 0xF9	; 249
    1042:	b9 2e       	mov	r11, r25
    1044:	8f 36       	cpi	r24, 0x6F	; 111
    1046:	c1 f0       	breq	.+48     	; 0x1078 <vfprintf+0x288>
    1048:	18 f4       	brcc	.+6      	; 0x1050 <vfprintf+0x260>
    104a:	88 35       	cpi	r24, 0x58	; 88
    104c:	79 f0       	breq	.+30     	; 0x106c <vfprintf+0x27c>
    104e:	ae c0       	rjmp	.+348    	; 0x11ac <__stack+0xad>
    1050:	80 37       	cpi	r24, 0x70	; 112
    1052:	19 f0       	breq	.+6      	; 0x105a <vfprintf+0x26a>
    1054:	88 37       	cpi	r24, 0x78	; 120
    1056:	21 f0       	breq	.+8      	; 0x1060 <vfprintf+0x270>
    1058:	a9 c0       	rjmp	.+338    	; 0x11ac <__stack+0xad>
    105a:	e9 2f       	mov	r30, r25
    105c:	e0 61       	ori	r30, 0x10	; 16
    105e:	be 2e       	mov	r11, r30
    1060:	b4 fe       	sbrs	r11, 4
    1062:	0d c0       	rjmp	.+26     	; 0x107e <vfprintf+0x28e>
    1064:	fb 2d       	mov	r31, r11
    1066:	f4 60       	ori	r31, 0x04	; 4
    1068:	bf 2e       	mov	r11, r31
    106a:	09 c0       	rjmp	.+18     	; 0x107e <vfprintf+0x28e>
    106c:	34 fe       	sbrs	r3, 4
    106e:	0a c0       	rjmp	.+20     	; 0x1084 <vfprintf+0x294>
    1070:	29 2f       	mov	r18, r25
    1072:	26 60       	ori	r18, 0x06	; 6
    1074:	b2 2e       	mov	r11, r18
    1076:	06 c0       	rjmp	.+12     	; 0x1084 <vfprintf+0x294>
    1078:	28 e0       	ldi	r18, 0x08	; 8
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	05 c0       	rjmp	.+10     	; 0x1088 <vfprintf+0x298>
    107e:	20 e1       	ldi	r18, 0x10	; 16
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <vfprintf+0x298>
    1084:	20 e1       	ldi	r18, 0x10	; 16
    1086:	32 e0       	ldi	r19, 0x02	; 2
    1088:	f8 01       	movw	r30, r16
    108a:	b7 fe       	sbrs	r11, 7
    108c:	07 c0       	rjmp	.+14     	; 0x109c <vfprintf+0x2ac>
    108e:	60 81       	ld	r22, Z
    1090:	71 81       	ldd	r23, Z+1	; 0x01
    1092:	82 81       	ldd	r24, Z+2	; 0x02
    1094:	93 81       	ldd	r25, Z+3	; 0x03
    1096:	0c 5f       	subi	r16, 0xFC	; 252
    1098:	1f 4f       	sbci	r17, 0xFF	; 255
    109a:	06 c0       	rjmp	.+12     	; 0x10a8 <vfprintf+0x2b8>
    109c:	60 81       	ld	r22, Z
    109e:	71 81       	ldd	r23, Z+1	; 0x01
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0e 5f       	subi	r16, 0xFE	; 254
    10a6:	1f 4f       	sbci	r17, 0xFF	; 255
    10a8:	a3 01       	movw	r20, r6
    10aa:	33 d2       	rcall	.+1126   	; 0x1512 <__ultoa_invert>
    10ac:	88 2e       	mov	r8, r24
    10ae:	86 18       	sub	r8, r6
    10b0:	fb 2d       	mov	r31, r11
    10b2:	ff 77       	andi	r31, 0x7F	; 127
    10b4:	3f 2e       	mov	r3, r31
    10b6:	36 fe       	sbrs	r3, 6
    10b8:	0d c0       	rjmp	.+26     	; 0x10d4 <vfprintf+0x2e4>
    10ba:	23 2d       	mov	r18, r3
    10bc:	2e 7f       	andi	r18, 0xFE	; 254
    10be:	a2 2e       	mov	r10, r18
    10c0:	89 14       	cp	r8, r9
    10c2:	58 f4       	brcc	.+22     	; 0x10da <vfprintf+0x2ea>
    10c4:	34 fe       	sbrs	r3, 4
    10c6:	0b c0       	rjmp	.+22     	; 0x10de <vfprintf+0x2ee>
    10c8:	32 fc       	sbrc	r3, 2
    10ca:	09 c0       	rjmp	.+18     	; 0x10de <vfprintf+0x2ee>
    10cc:	83 2d       	mov	r24, r3
    10ce:	8e 7e       	andi	r24, 0xEE	; 238
    10d0:	a8 2e       	mov	r10, r24
    10d2:	05 c0       	rjmp	.+10     	; 0x10de <vfprintf+0x2ee>
    10d4:	b8 2c       	mov	r11, r8
    10d6:	a3 2c       	mov	r10, r3
    10d8:	03 c0       	rjmp	.+6      	; 0x10e0 <vfprintf+0x2f0>
    10da:	b8 2c       	mov	r11, r8
    10dc:	01 c0       	rjmp	.+2      	; 0x10e0 <vfprintf+0x2f0>
    10de:	b9 2c       	mov	r11, r9
    10e0:	a4 fe       	sbrs	r10, 4
    10e2:	0f c0       	rjmp	.+30     	; 0x1102 <__stack+0x3>
    10e4:	fe 01       	movw	r30, r28
    10e6:	e8 0d       	add	r30, r8
    10e8:	f1 1d       	adc	r31, r1
    10ea:	80 81       	ld	r24, Z
    10ec:	80 33       	cpi	r24, 0x30	; 48
    10ee:	21 f4       	brne	.+8      	; 0x10f8 <vfprintf+0x308>
    10f0:	9a 2d       	mov	r25, r10
    10f2:	99 7e       	andi	r25, 0xE9	; 233
    10f4:	a9 2e       	mov	r10, r25
    10f6:	09 c0       	rjmp	.+18     	; 0x110a <__stack+0xb>
    10f8:	a2 fe       	sbrs	r10, 2
    10fa:	06 c0       	rjmp	.+12     	; 0x1108 <__stack+0x9>
    10fc:	b3 94       	inc	r11
    10fe:	b3 94       	inc	r11
    1100:	04 c0       	rjmp	.+8      	; 0x110a <__stack+0xb>
    1102:	8a 2d       	mov	r24, r10
    1104:	86 78       	andi	r24, 0x86	; 134
    1106:	09 f0       	breq	.+2      	; 0x110a <__stack+0xb>
    1108:	b3 94       	inc	r11
    110a:	a3 fc       	sbrc	r10, 3
    110c:	10 c0       	rjmp	.+32     	; 0x112e <__stack+0x2f>
    110e:	a0 fe       	sbrs	r10, 0
    1110:	06 c0       	rjmp	.+12     	; 0x111e <__stack+0x1f>
    1112:	b2 14       	cp	r11, r2
    1114:	80 f4       	brcc	.+32     	; 0x1136 <__stack+0x37>
    1116:	28 0c       	add	r2, r8
    1118:	92 2c       	mov	r9, r2
    111a:	9b 18       	sub	r9, r11
    111c:	0d c0       	rjmp	.+26     	; 0x1138 <__stack+0x39>
    111e:	b2 14       	cp	r11, r2
    1120:	58 f4       	brcc	.+22     	; 0x1138 <__stack+0x39>
    1122:	b6 01       	movw	r22, r12
    1124:	80 e2       	ldi	r24, 0x20	; 32
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	b8 d1       	rcall	.+880    	; 0x149a <fputc>
    112a:	b3 94       	inc	r11
    112c:	f8 cf       	rjmp	.-16     	; 0x111e <__stack+0x1f>
    112e:	b2 14       	cp	r11, r2
    1130:	18 f4       	brcc	.+6      	; 0x1138 <__stack+0x39>
    1132:	2b 18       	sub	r2, r11
    1134:	02 c0       	rjmp	.+4      	; 0x113a <__stack+0x3b>
    1136:	98 2c       	mov	r9, r8
    1138:	21 2c       	mov	r2, r1
    113a:	a4 fe       	sbrs	r10, 4
    113c:	0f c0       	rjmp	.+30     	; 0x115c <__stack+0x5d>
    113e:	b6 01       	movw	r22, r12
    1140:	80 e3       	ldi	r24, 0x30	; 48
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	aa d1       	rcall	.+852    	; 0x149a <fputc>
    1146:	a2 fe       	sbrs	r10, 2
    1148:	16 c0       	rjmp	.+44     	; 0x1176 <__stack+0x77>
    114a:	a1 fc       	sbrc	r10, 1
    114c:	03 c0       	rjmp	.+6      	; 0x1154 <__stack+0x55>
    114e:	88 e7       	ldi	r24, 0x78	; 120
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <__stack+0x59>
    1154:	88 e5       	ldi	r24, 0x58	; 88
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	b6 01       	movw	r22, r12
    115a:	0c c0       	rjmp	.+24     	; 0x1174 <__stack+0x75>
    115c:	8a 2d       	mov	r24, r10
    115e:	86 78       	andi	r24, 0x86	; 134
    1160:	51 f0       	breq	.+20     	; 0x1176 <__stack+0x77>
    1162:	a1 fe       	sbrs	r10, 1
    1164:	02 c0       	rjmp	.+4      	; 0x116a <__stack+0x6b>
    1166:	8b e2       	ldi	r24, 0x2B	; 43
    1168:	01 c0       	rjmp	.+2      	; 0x116c <__stack+0x6d>
    116a:	80 e2       	ldi	r24, 0x20	; 32
    116c:	a7 fc       	sbrc	r10, 7
    116e:	8d e2       	ldi	r24, 0x2D	; 45
    1170:	b6 01       	movw	r22, r12
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	92 d1       	rcall	.+804    	; 0x149a <fputc>
    1176:	89 14       	cp	r8, r9
    1178:	30 f4       	brcc	.+12     	; 0x1186 <__stack+0x87>
    117a:	b6 01       	movw	r22, r12
    117c:	80 e3       	ldi	r24, 0x30	; 48
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	8c d1       	rcall	.+792    	; 0x149a <fputc>
    1182:	9a 94       	dec	r9
    1184:	f8 cf       	rjmp	.-16     	; 0x1176 <__stack+0x77>
    1186:	8a 94       	dec	r8
    1188:	f3 01       	movw	r30, r6
    118a:	e8 0d       	add	r30, r8
    118c:	f1 1d       	adc	r31, r1
    118e:	80 81       	ld	r24, Z
    1190:	b6 01       	movw	r22, r12
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	82 d1       	rcall	.+772    	; 0x149a <fputc>
    1196:	81 10       	cpse	r8, r1
    1198:	f6 cf       	rjmp	.-20     	; 0x1186 <__stack+0x87>
    119a:	22 20       	and	r2, r2
    119c:	09 f4       	brne	.+2      	; 0x11a0 <__stack+0xa1>
    119e:	4e ce       	rjmp	.-868    	; 0xe3c <vfprintf+0x4c>
    11a0:	b6 01       	movw	r22, r12
    11a2:	80 e2       	ldi	r24, 0x20	; 32
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	79 d1       	rcall	.+754    	; 0x149a <fputc>
    11a8:	2a 94       	dec	r2
    11aa:	f7 cf       	rjmp	.-18     	; 0x119a <__stack+0x9b>
    11ac:	f6 01       	movw	r30, r12
    11ae:	86 81       	ldd	r24, Z+6	; 0x06
    11b0:	97 81       	ldd	r25, Z+7	; 0x07
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <__stack+0xb9>
    11b4:	8f ef       	ldi	r24, 0xFF	; 255
    11b6:	9f ef       	ldi	r25, 0xFF	; 255
    11b8:	2b 96       	adiw	r28, 0x0b	; 11
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	ff 90       	pop	r15
    11ce:	ef 90       	pop	r14
    11d0:	df 90       	pop	r13
    11d2:	cf 90       	pop	r12
    11d4:	bf 90       	pop	r11
    11d6:	af 90       	pop	r10
    11d8:	9f 90       	pop	r9
    11da:	8f 90       	pop	r8
    11dc:	7f 90       	pop	r7
    11de:	6f 90       	pop	r6
    11e0:	5f 90       	pop	r5
    11e2:	4f 90       	pop	r4
    11e4:	3f 90       	pop	r3
    11e6:	2f 90       	pop	r2
    11e8:	08 95       	ret

000011ea <calloc>:
    11ea:	0f 93       	push	r16
    11ec:	1f 93       	push	r17
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	86 9f       	mul	r24, r22
    11f4:	80 01       	movw	r16, r0
    11f6:	87 9f       	mul	r24, r23
    11f8:	10 0d       	add	r17, r0
    11fa:	96 9f       	mul	r25, r22
    11fc:	10 0d       	add	r17, r0
    11fe:	11 24       	eor	r1, r1
    1200:	c8 01       	movw	r24, r16
    1202:	0d d0       	rcall	.+26     	; 0x121e <malloc>
    1204:	ec 01       	movw	r28, r24
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	21 f0       	breq	.+8      	; 0x1212 <calloc+0x28>
    120a:	a8 01       	movw	r20, r16
    120c:	60 e0       	ldi	r22, 0x00	; 0
    120e:	70 e0       	ldi	r23, 0x00	; 0
    1210:	32 d1       	rcall	.+612    	; 0x1476 <memset>
    1212:	ce 01       	movw	r24, r28
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	0f 91       	pop	r16
    121c:	08 95       	ret

0000121e <malloc>:
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	82 30       	cpi	r24, 0x02	; 2
    1228:	91 05       	cpc	r25, r1
    122a:	10 f4       	brcc	.+4      	; 0x1230 <malloc+0x12>
    122c:	82 e0       	ldi	r24, 0x02	; 2
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	e0 91 f7 01 	lds	r30, 0x01F7	; 0x8001f7 <__flp>
    1234:	f0 91 f8 01 	lds	r31, 0x01F8	; 0x8001f8 <__flp+0x1>
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	a0 e0       	ldi	r26, 0x00	; 0
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	30 97       	sbiw	r30, 0x00	; 0
    1242:	19 f1       	breq	.+70     	; 0x128a <malloc+0x6c>
    1244:	40 81       	ld	r20, Z
    1246:	51 81       	ldd	r21, Z+1	; 0x01
    1248:	02 81       	ldd	r16, Z+2	; 0x02
    124a:	13 81       	ldd	r17, Z+3	; 0x03
    124c:	48 17       	cp	r20, r24
    124e:	59 07       	cpc	r21, r25
    1250:	c8 f0       	brcs	.+50     	; 0x1284 <malloc+0x66>
    1252:	84 17       	cp	r24, r20
    1254:	95 07       	cpc	r25, r21
    1256:	69 f4       	brne	.+26     	; 0x1272 <malloc+0x54>
    1258:	10 97       	sbiw	r26, 0x00	; 0
    125a:	31 f0       	breq	.+12     	; 0x1268 <malloc+0x4a>
    125c:	12 96       	adiw	r26, 0x02	; 2
    125e:	0c 93       	st	X, r16
    1260:	12 97       	sbiw	r26, 0x02	; 2
    1262:	13 96       	adiw	r26, 0x03	; 3
    1264:	1c 93       	st	X, r17
    1266:	27 c0       	rjmp	.+78     	; 0x12b6 <malloc+0x98>
    1268:	00 93 f7 01 	sts	0x01F7, r16	; 0x8001f7 <__flp>
    126c:	10 93 f8 01 	sts	0x01F8, r17	; 0x8001f8 <__flp+0x1>
    1270:	22 c0       	rjmp	.+68     	; 0x12b6 <malloc+0x98>
    1272:	21 15       	cp	r18, r1
    1274:	31 05       	cpc	r19, r1
    1276:	19 f0       	breq	.+6      	; 0x127e <malloc+0x60>
    1278:	42 17       	cp	r20, r18
    127a:	53 07       	cpc	r21, r19
    127c:	18 f4       	brcc	.+6      	; 0x1284 <malloc+0x66>
    127e:	9a 01       	movw	r18, r20
    1280:	bd 01       	movw	r22, r26
    1282:	ef 01       	movw	r28, r30
    1284:	df 01       	movw	r26, r30
    1286:	f8 01       	movw	r30, r16
    1288:	db cf       	rjmp	.-74     	; 0x1240 <malloc+0x22>
    128a:	21 15       	cp	r18, r1
    128c:	31 05       	cpc	r19, r1
    128e:	f9 f0       	breq	.+62     	; 0x12ce <malloc+0xb0>
    1290:	28 1b       	sub	r18, r24
    1292:	39 0b       	sbc	r19, r25
    1294:	24 30       	cpi	r18, 0x04	; 4
    1296:	31 05       	cpc	r19, r1
    1298:	80 f4       	brcc	.+32     	; 0x12ba <malloc+0x9c>
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	9b 81       	ldd	r25, Y+3	; 0x03
    129e:	61 15       	cp	r22, r1
    12a0:	71 05       	cpc	r23, r1
    12a2:	21 f0       	breq	.+8      	; 0x12ac <malloc+0x8e>
    12a4:	fb 01       	movw	r30, r22
    12a6:	93 83       	std	Z+3, r25	; 0x03
    12a8:	82 83       	std	Z+2, r24	; 0x02
    12aa:	04 c0       	rjmp	.+8      	; 0x12b4 <malloc+0x96>
    12ac:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <__flp+0x1>
    12b0:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <__flp>
    12b4:	fe 01       	movw	r30, r28
    12b6:	32 96       	adiw	r30, 0x02	; 2
    12b8:	44 c0       	rjmp	.+136    	; 0x1342 <malloc+0x124>
    12ba:	fe 01       	movw	r30, r28
    12bc:	e2 0f       	add	r30, r18
    12be:	f3 1f       	adc	r31, r19
    12c0:	81 93       	st	Z+, r24
    12c2:	91 93       	st	Z+, r25
    12c4:	22 50       	subi	r18, 0x02	; 2
    12c6:	31 09       	sbc	r19, r1
    12c8:	39 83       	std	Y+1, r19	; 0x01
    12ca:	28 83       	st	Y, r18
    12cc:	3a c0       	rjmp	.+116    	; 0x1342 <malloc+0x124>
    12ce:	20 91 f5 01 	lds	r18, 0x01F5	; 0x8001f5 <__brkval>
    12d2:	30 91 f6 01 	lds	r19, 0x01F6	; 0x8001f6 <__brkval+0x1>
    12d6:	23 2b       	or	r18, r19
    12d8:	41 f4       	brne	.+16     	; 0x12ea <malloc+0xcc>
    12da:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    12de:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    12e2:	30 93 f6 01 	sts	0x01F6, r19	; 0x8001f6 <__brkval+0x1>
    12e6:	20 93 f5 01 	sts	0x01F5, r18	; 0x8001f5 <__brkval>
    12ea:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    12ee:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    12f2:	21 15       	cp	r18, r1
    12f4:	31 05       	cpc	r19, r1
    12f6:	41 f4       	brne	.+16     	; 0x1308 <malloc+0xea>
    12f8:	2d b7       	in	r18, 0x3d	; 61
    12fa:	3e b7       	in	r19, 0x3e	; 62
    12fc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1300:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1304:	24 1b       	sub	r18, r20
    1306:	35 0b       	sbc	r19, r21
    1308:	e0 91 f5 01 	lds	r30, 0x01F5	; 0x8001f5 <__brkval>
    130c:	f0 91 f6 01 	lds	r31, 0x01F6	; 0x8001f6 <__brkval+0x1>
    1310:	e2 17       	cp	r30, r18
    1312:	f3 07       	cpc	r31, r19
    1314:	a0 f4       	brcc	.+40     	; 0x133e <malloc+0x120>
    1316:	2e 1b       	sub	r18, r30
    1318:	3f 0b       	sbc	r19, r31
    131a:	28 17       	cp	r18, r24
    131c:	39 07       	cpc	r19, r25
    131e:	78 f0       	brcs	.+30     	; 0x133e <malloc+0x120>
    1320:	ac 01       	movw	r20, r24
    1322:	4e 5f       	subi	r20, 0xFE	; 254
    1324:	5f 4f       	sbci	r21, 0xFF	; 255
    1326:	24 17       	cp	r18, r20
    1328:	35 07       	cpc	r19, r21
    132a:	48 f0       	brcs	.+18     	; 0x133e <malloc+0x120>
    132c:	4e 0f       	add	r20, r30
    132e:	5f 1f       	adc	r21, r31
    1330:	50 93 f6 01 	sts	0x01F6, r21	; 0x8001f6 <__brkval+0x1>
    1334:	40 93 f5 01 	sts	0x01F5, r20	; 0x8001f5 <__brkval>
    1338:	81 93       	st	Z+, r24
    133a:	91 93       	st	Z+, r25
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <malloc+0x124>
    133e:	e0 e0       	ldi	r30, 0x00	; 0
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	cf 01       	movw	r24, r30
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	08 95       	ret

0000134e <free>:
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	09 f4       	brne	.+2      	; 0x1358 <free+0xa>
    1356:	81 c0       	rjmp	.+258    	; 0x145a <free+0x10c>
    1358:	fc 01       	movw	r30, r24
    135a:	32 97       	sbiw	r30, 0x02	; 2
    135c:	13 82       	std	Z+3, r1	; 0x03
    135e:	12 82       	std	Z+2, r1	; 0x02
    1360:	a0 91 f7 01 	lds	r26, 0x01F7	; 0x8001f7 <__flp>
    1364:	b0 91 f8 01 	lds	r27, 0x01F8	; 0x8001f8 <__flp+0x1>
    1368:	10 97       	sbiw	r26, 0x00	; 0
    136a:	81 f4       	brne	.+32     	; 0x138c <free+0x3e>
    136c:	20 81       	ld	r18, Z
    136e:	31 81       	ldd	r19, Z+1	; 0x01
    1370:	82 0f       	add	r24, r18
    1372:	93 1f       	adc	r25, r19
    1374:	20 91 f5 01 	lds	r18, 0x01F5	; 0x8001f5 <__brkval>
    1378:	30 91 f6 01 	lds	r19, 0x01F6	; 0x8001f6 <__brkval+0x1>
    137c:	28 17       	cp	r18, r24
    137e:	39 07       	cpc	r19, r25
    1380:	51 f5       	brne	.+84     	; 0x13d6 <free+0x88>
    1382:	f0 93 f6 01 	sts	0x01F6, r31	; 0x8001f6 <__brkval+0x1>
    1386:	e0 93 f5 01 	sts	0x01F5, r30	; 0x8001f5 <__brkval>
    138a:	67 c0       	rjmp	.+206    	; 0x145a <free+0x10c>
    138c:	ed 01       	movw	r28, r26
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	ce 17       	cp	r28, r30
    1394:	df 07       	cpc	r29, r31
    1396:	40 f4       	brcc	.+16     	; 0x13a8 <free+0x5a>
    1398:	4a 81       	ldd	r20, Y+2	; 0x02
    139a:	5b 81       	ldd	r21, Y+3	; 0x03
    139c:	9e 01       	movw	r18, r28
    139e:	41 15       	cp	r20, r1
    13a0:	51 05       	cpc	r21, r1
    13a2:	f1 f0       	breq	.+60     	; 0x13e0 <free+0x92>
    13a4:	ea 01       	movw	r28, r20
    13a6:	f5 cf       	rjmp	.-22     	; 0x1392 <free+0x44>
    13a8:	d3 83       	std	Z+3, r29	; 0x03
    13aa:	c2 83       	std	Z+2, r28	; 0x02
    13ac:	40 81       	ld	r20, Z
    13ae:	51 81       	ldd	r21, Z+1	; 0x01
    13b0:	84 0f       	add	r24, r20
    13b2:	95 1f       	adc	r25, r21
    13b4:	c8 17       	cp	r28, r24
    13b6:	d9 07       	cpc	r29, r25
    13b8:	59 f4       	brne	.+22     	; 0x13d0 <free+0x82>
    13ba:	88 81       	ld	r24, Y
    13bc:	99 81       	ldd	r25, Y+1	; 0x01
    13be:	84 0f       	add	r24, r20
    13c0:	95 1f       	adc	r25, r21
    13c2:	02 96       	adiw	r24, 0x02	; 2
    13c4:	91 83       	std	Z+1, r25	; 0x01
    13c6:	80 83       	st	Z, r24
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	9b 81       	ldd	r25, Y+3	; 0x03
    13cc:	93 83       	std	Z+3, r25	; 0x03
    13ce:	82 83       	std	Z+2, r24	; 0x02
    13d0:	21 15       	cp	r18, r1
    13d2:	31 05       	cpc	r19, r1
    13d4:	29 f4       	brne	.+10     	; 0x13e0 <free+0x92>
    13d6:	f0 93 f8 01 	sts	0x01F8, r31	; 0x8001f8 <__flp+0x1>
    13da:	e0 93 f7 01 	sts	0x01F7, r30	; 0x8001f7 <__flp>
    13de:	3d c0       	rjmp	.+122    	; 0x145a <free+0x10c>
    13e0:	e9 01       	movw	r28, r18
    13e2:	fb 83       	std	Y+3, r31	; 0x03
    13e4:	ea 83       	std	Y+2, r30	; 0x02
    13e6:	49 91       	ld	r20, Y+
    13e8:	59 91       	ld	r21, Y+
    13ea:	c4 0f       	add	r28, r20
    13ec:	d5 1f       	adc	r29, r21
    13ee:	ec 17       	cp	r30, r28
    13f0:	fd 07       	cpc	r31, r29
    13f2:	61 f4       	brne	.+24     	; 0x140c <free+0xbe>
    13f4:	80 81       	ld	r24, Z
    13f6:	91 81       	ldd	r25, Z+1	; 0x01
    13f8:	84 0f       	add	r24, r20
    13fa:	95 1f       	adc	r25, r21
    13fc:	02 96       	adiw	r24, 0x02	; 2
    13fe:	e9 01       	movw	r28, r18
    1400:	99 83       	std	Y+1, r25	; 0x01
    1402:	88 83       	st	Y, r24
    1404:	82 81       	ldd	r24, Z+2	; 0x02
    1406:	93 81       	ldd	r25, Z+3	; 0x03
    1408:	9b 83       	std	Y+3, r25	; 0x03
    140a:	8a 83       	std	Y+2, r24	; 0x02
    140c:	e0 e0       	ldi	r30, 0x00	; 0
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	12 96       	adiw	r26, 0x02	; 2
    1412:	8d 91       	ld	r24, X+
    1414:	9c 91       	ld	r25, X
    1416:	13 97       	sbiw	r26, 0x03	; 3
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	19 f0       	breq	.+6      	; 0x1422 <free+0xd4>
    141c:	fd 01       	movw	r30, r26
    141e:	dc 01       	movw	r26, r24
    1420:	f7 cf       	rjmp	.-18     	; 0x1410 <free+0xc2>
    1422:	8d 91       	ld	r24, X+
    1424:	9c 91       	ld	r25, X
    1426:	11 97       	sbiw	r26, 0x01	; 1
    1428:	9d 01       	movw	r18, r26
    142a:	2e 5f       	subi	r18, 0xFE	; 254
    142c:	3f 4f       	sbci	r19, 0xFF	; 255
    142e:	82 0f       	add	r24, r18
    1430:	93 1f       	adc	r25, r19
    1432:	20 91 f5 01 	lds	r18, 0x01F5	; 0x8001f5 <__brkval>
    1436:	30 91 f6 01 	lds	r19, 0x01F6	; 0x8001f6 <__brkval+0x1>
    143a:	28 17       	cp	r18, r24
    143c:	39 07       	cpc	r19, r25
    143e:	69 f4       	brne	.+26     	; 0x145a <free+0x10c>
    1440:	30 97       	sbiw	r30, 0x00	; 0
    1442:	29 f4       	brne	.+10     	; 0x144e <free+0x100>
    1444:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <__flp+0x1>
    1448:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <__flp>
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <free+0x104>
    144e:	13 82       	std	Z+3, r1	; 0x03
    1450:	12 82       	std	Z+2, r1	; 0x02
    1452:	b0 93 f6 01 	sts	0x01F6, r27	; 0x8001f6 <__brkval+0x1>
    1456:	a0 93 f5 01 	sts	0x01F5, r26	; 0x8001f5 <__brkval>
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	08 95       	ret

00001460 <strnlen_P>:
    1460:	fc 01       	movw	r30, r24
    1462:	05 90       	lpm	r0, Z+
    1464:	61 50       	subi	r22, 0x01	; 1
    1466:	70 40       	sbci	r23, 0x00	; 0
    1468:	01 10       	cpse	r0, r1
    146a:	d8 f7       	brcc	.-10     	; 0x1462 <strnlen_P+0x2>
    146c:	80 95       	com	r24
    146e:	90 95       	com	r25
    1470:	8e 0f       	add	r24, r30
    1472:	9f 1f       	adc	r25, r31
    1474:	08 95       	ret

00001476 <memset>:
    1476:	dc 01       	movw	r26, r24
    1478:	01 c0       	rjmp	.+2      	; 0x147c <memset+0x6>
    147a:	6d 93       	st	X+, r22
    147c:	41 50       	subi	r20, 0x01	; 1
    147e:	50 40       	sbci	r21, 0x00	; 0
    1480:	e0 f7       	brcc	.-8      	; 0x147a <memset+0x4>
    1482:	08 95       	ret

00001484 <strnlen>:
    1484:	fc 01       	movw	r30, r24
    1486:	61 50       	subi	r22, 0x01	; 1
    1488:	70 40       	sbci	r23, 0x00	; 0
    148a:	01 90       	ld	r0, Z+
    148c:	01 10       	cpse	r0, r1
    148e:	d8 f7       	brcc	.-10     	; 0x1486 <strnlen+0x2>
    1490:	80 95       	com	r24
    1492:	90 95       	com	r25
    1494:	8e 0f       	add	r24, r30
    1496:	9f 1f       	adc	r25, r31
    1498:	08 95       	ret

0000149a <fputc>:
    149a:	0f 93       	push	r16
    149c:	1f 93       	push	r17
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
    14a2:	fb 01       	movw	r30, r22
    14a4:	23 81       	ldd	r18, Z+3	; 0x03
    14a6:	21 fd       	sbrc	r18, 1
    14a8:	03 c0       	rjmp	.+6      	; 0x14b0 <fputc+0x16>
    14aa:	8f ef       	ldi	r24, 0xFF	; 255
    14ac:	9f ef       	ldi	r25, 0xFF	; 255
    14ae:	2c c0       	rjmp	.+88     	; 0x1508 <fputc+0x6e>
    14b0:	22 ff       	sbrs	r18, 2
    14b2:	16 c0       	rjmp	.+44     	; 0x14e0 <fputc+0x46>
    14b4:	46 81       	ldd	r20, Z+6	; 0x06
    14b6:	57 81       	ldd	r21, Z+7	; 0x07
    14b8:	24 81       	ldd	r18, Z+4	; 0x04
    14ba:	35 81       	ldd	r19, Z+5	; 0x05
    14bc:	42 17       	cp	r20, r18
    14be:	53 07       	cpc	r21, r19
    14c0:	44 f4       	brge	.+16     	; 0x14d2 <fputc+0x38>
    14c2:	a0 81       	ld	r26, Z
    14c4:	b1 81       	ldd	r27, Z+1	; 0x01
    14c6:	9d 01       	movw	r18, r26
    14c8:	2f 5f       	subi	r18, 0xFF	; 255
    14ca:	3f 4f       	sbci	r19, 0xFF	; 255
    14cc:	31 83       	std	Z+1, r19	; 0x01
    14ce:	20 83       	st	Z, r18
    14d0:	8c 93       	st	X, r24
    14d2:	26 81       	ldd	r18, Z+6	; 0x06
    14d4:	37 81       	ldd	r19, Z+7	; 0x07
    14d6:	2f 5f       	subi	r18, 0xFF	; 255
    14d8:	3f 4f       	sbci	r19, 0xFF	; 255
    14da:	37 83       	std	Z+7, r19	; 0x07
    14dc:	26 83       	std	Z+6, r18	; 0x06
    14de:	14 c0       	rjmp	.+40     	; 0x1508 <fputc+0x6e>
    14e0:	8b 01       	movw	r16, r22
    14e2:	ec 01       	movw	r28, r24
    14e4:	fb 01       	movw	r30, r22
    14e6:	00 84       	ldd	r0, Z+8	; 0x08
    14e8:	f1 85       	ldd	r31, Z+9	; 0x09
    14ea:	e0 2d       	mov	r30, r0
    14ec:	09 95       	icall
    14ee:	89 2b       	or	r24, r25
    14f0:	e1 f6       	brne	.-72     	; 0x14aa <fputc+0x10>
    14f2:	d8 01       	movw	r26, r16
    14f4:	16 96       	adiw	r26, 0x06	; 6
    14f6:	8d 91       	ld	r24, X+
    14f8:	9c 91       	ld	r25, X
    14fa:	17 97       	sbiw	r26, 0x07	; 7
    14fc:	01 96       	adiw	r24, 0x01	; 1
    14fe:	17 96       	adiw	r26, 0x07	; 7
    1500:	9c 93       	st	X, r25
    1502:	8e 93       	st	-X, r24
    1504:	16 97       	sbiw	r26, 0x06	; 6
    1506:	ce 01       	movw	r24, r28
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	1f 91       	pop	r17
    150e:	0f 91       	pop	r16
    1510:	08 95       	ret

00001512 <__ultoa_invert>:
    1512:	fa 01       	movw	r30, r20
    1514:	aa 27       	eor	r26, r26
    1516:	28 30       	cpi	r18, 0x08	; 8
    1518:	51 f1       	breq	.+84     	; 0x156e <__ultoa_invert+0x5c>
    151a:	20 31       	cpi	r18, 0x10	; 16
    151c:	81 f1       	breq	.+96     	; 0x157e <__ultoa_invert+0x6c>
    151e:	e8 94       	clt
    1520:	6f 93       	push	r22
    1522:	6e 7f       	andi	r22, 0xFE	; 254
    1524:	6e 5f       	subi	r22, 0xFE	; 254
    1526:	7f 4f       	sbci	r23, 0xFF	; 255
    1528:	8f 4f       	sbci	r24, 0xFF	; 255
    152a:	9f 4f       	sbci	r25, 0xFF	; 255
    152c:	af 4f       	sbci	r26, 0xFF	; 255
    152e:	b1 e0       	ldi	r27, 0x01	; 1
    1530:	3e d0       	rcall	.+124    	; 0x15ae <__ultoa_invert+0x9c>
    1532:	b4 e0       	ldi	r27, 0x04	; 4
    1534:	3c d0       	rcall	.+120    	; 0x15ae <__ultoa_invert+0x9c>
    1536:	67 0f       	add	r22, r23
    1538:	78 1f       	adc	r23, r24
    153a:	89 1f       	adc	r24, r25
    153c:	9a 1f       	adc	r25, r26
    153e:	a1 1d       	adc	r26, r1
    1540:	68 0f       	add	r22, r24
    1542:	79 1f       	adc	r23, r25
    1544:	8a 1f       	adc	r24, r26
    1546:	91 1d       	adc	r25, r1
    1548:	a1 1d       	adc	r26, r1
    154a:	6a 0f       	add	r22, r26
    154c:	71 1d       	adc	r23, r1
    154e:	81 1d       	adc	r24, r1
    1550:	91 1d       	adc	r25, r1
    1552:	a1 1d       	adc	r26, r1
    1554:	20 d0       	rcall	.+64     	; 0x1596 <__ultoa_invert+0x84>
    1556:	09 f4       	brne	.+2      	; 0x155a <__ultoa_invert+0x48>
    1558:	68 94       	set
    155a:	3f 91       	pop	r19
    155c:	2a e0       	ldi	r18, 0x0A	; 10
    155e:	26 9f       	mul	r18, r22
    1560:	11 24       	eor	r1, r1
    1562:	30 19       	sub	r19, r0
    1564:	30 5d       	subi	r19, 0xD0	; 208
    1566:	31 93       	st	Z+, r19
    1568:	de f6       	brtc	.-74     	; 0x1520 <__ultoa_invert+0xe>
    156a:	cf 01       	movw	r24, r30
    156c:	08 95       	ret
    156e:	46 2f       	mov	r20, r22
    1570:	47 70       	andi	r20, 0x07	; 7
    1572:	40 5d       	subi	r20, 0xD0	; 208
    1574:	41 93       	st	Z+, r20
    1576:	b3 e0       	ldi	r27, 0x03	; 3
    1578:	0f d0       	rcall	.+30     	; 0x1598 <__ultoa_invert+0x86>
    157a:	c9 f7       	brne	.-14     	; 0x156e <__ultoa_invert+0x5c>
    157c:	f6 cf       	rjmp	.-20     	; 0x156a <__ultoa_invert+0x58>
    157e:	46 2f       	mov	r20, r22
    1580:	4f 70       	andi	r20, 0x0F	; 15
    1582:	40 5d       	subi	r20, 0xD0	; 208
    1584:	4a 33       	cpi	r20, 0x3A	; 58
    1586:	18 f0       	brcs	.+6      	; 0x158e <__ultoa_invert+0x7c>
    1588:	49 5d       	subi	r20, 0xD9	; 217
    158a:	31 fd       	sbrc	r19, 1
    158c:	40 52       	subi	r20, 0x20	; 32
    158e:	41 93       	st	Z+, r20
    1590:	02 d0       	rcall	.+4      	; 0x1596 <__ultoa_invert+0x84>
    1592:	a9 f7       	brne	.-22     	; 0x157e <__ultoa_invert+0x6c>
    1594:	ea cf       	rjmp	.-44     	; 0x156a <__ultoa_invert+0x58>
    1596:	b4 e0       	ldi	r27, 0x04	; 4
    1598:	a6 95       	lsr	r26
    159a:	97 95       	ror	r25
    159c:	87 95       	ror	r24
    159e:	77 95       	ror	r23
    15a0:	67 95       	ror	r22
    15a2:	ba 95       	dec	r27
    15a4:	c9 f7       	brne	.-14     	; 0x1598 <__ultoa_invert+0x86>
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	61 05       	cpc	r22, r1
    15aa:	71 05       	cpc	r23, r1
    15ac:	08 95       	ret
    15ae:	9b 01       	movw	r18, r22
    15b0:	ac 01       	movw	r20, r24
    15b2:	0a 2e       	mov	r0, r26
    15b4:	06 94       	lsr	r0
    15b6:	57 95       	ror	r21
    15b8:	47 95       	ror	r20
    15ba:	37 95       	ror	r19
    15bc:	27 95       	ror	r18
    15be:	ba 95       	dec	r27
    15c0:	c9 f7       	brne	.-14     	; 0x15b4 <__ultoa_invert+0xa2>
    15c2:	62 0f       	add	r22, r18
    15c4:	73 1f       	adc	r23, r19
    15c6:	84 1f       	adc	r24, r20
    15c8:	95 1f       	adc	r25, r21
    15ca:	a0 1d       	adc	r26, r0
    15cc:	08 95       	ret

000015ce <_exit>:
    15ce:	f8 94       	cli

000015d0 <__stop_program>:
    15d0:	ff cf       	rjmp	.-2      	; 0x15d0 <__stop_program>
