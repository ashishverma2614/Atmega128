
Question2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002cc  00000360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010c  0080010c  0000036c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000090e  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f5  00000000  00000000  00000d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032b  00000000  00000000  0000151f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  0000184c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042f  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000118  00000000  00000000  00001d13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001e2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	45 c0       	rjmp	.+138    	; 0xc8 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ec       	ldi	r30, 0xCC	; 204
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d8 d0       	rcall	.+432    	; 0x274 <main>
  c4:	01 c1       	rjmp	.+514    	; 0x2c8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_15>:
unit32_t fndNum;
unit8_t cnt0; // for timer0
unit8_t cnt2; // for timer2

ISR(TIMER0_COMP_vect) // for dynamic operation(1ms)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
	++cnt0;
  d4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cnt0>
  d8:	8f 5f       	subi	r24, 0xFF	; 255
  da:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <cnt0>
	if (cnt0 == 5) // 5ms
  de:	85 30       	cpi	r24, 0x05	; 5
  e0:	69 f4       	brne	.+26     	; 0xfc <__vector_15+0x34>
	{
		fndPosition <<= 1;
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  e6:	88 0f       	add	r24, r24
		if (fndPosition == 0x10)
  e8:	80 31       	cpi	r24, 0x10	; 16
  ea:	19 f0       	breq	.+6      	; 0xf2 <__vector_15+0x2a>
ISR(TIMER0_COMP_vect) // for dynamic operation(1ms)
{
	++cnt0;
	if (cnt0 == 5) // 5ms
	{
		fndPosition <<= 1;
  ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  f0:	03 c0       	rjmp	.+6      	; 0xf8 <__vector_15+0x30>
		if (fndPosition == 0x10)
			fndPosition = 0x01;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		cnt0 = 0;
  f8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cnt0>
	}
}
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <__vector_9>:

ISR(TIMER2_COMP_vect) // for count-up(1ms)
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	2f 93       	push	r18
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	af 93       	push	r26
 11a:	bf 93       	push	r27
	++cnt2;
 11c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	if (cnt2 == 100) // 100ms
 126:	84 36       	cpi	r24, 0x64	; 100
 128:	21 f5       	brne	.+72     	; 0x172 <__vector_9+0x6a>
	{
		fndNum++;
 12a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <fndNum>
 12e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <fndNum+0x1>
 132:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <fndNum+0x2>
 136:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <fndNum+0x3>
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	a1 1d       	adc	r26, r1
 13e:	b1 1d       	adc	r27, r1
		if (fndNum == MAX_COUNT)
 140:	80 31       	cpi	r24, 0x10	; 16
 142:	27 e2       	ldi	r18, 0x27	; 39
 144:	92 07       	cpc	r25, r18
 146:	a1 05       	cpc	r26, r1
 148:	b1 05       	cpc	r27, r1
 14a:	49 f0       	breq	.+18     	; 0x15e <__vector_9+0x56>
ISR(TIMER2_COMP_vect) // for count-up(1ms)
{
	++cnt2;
	if (cnt2 == 100) // 100ms
	{
		fndNum++;
 14c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <fndNum>
 150:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <fndNum+0x1>
 154:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <fndNum+0x2>
 158:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <fndNum+0x3>
 15c:	08 c0       	rjmp	.+16     	; 0x16e <__vector_9+0x66>
		if (fndNum == MAX_COUNT)
			fndNum = 0;
 15e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <fndNum>
 162:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <fndNum+0x1>
 166:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <fndNum+0x2>
 16a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <fndNum+0x3>
		cnt2 = 0;
 16e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
	}
}
 172:	bf 91       	pop	r27
 174:	af 91       	pop	r26
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	2f 91       	pop	r18
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <INIT>:
/* Function Implementations */

void INIT(void)
{
	// FND port
	DDRA = 0xFF; // a~g, dot
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF; // fnd[0:3]
 18a:	84 bb       	out	0x14, r24	; 20
	
	// timer0, 2. CTC(Mode2), pre-scaler ratio 64, 1ms
	TIMSK |= (1 << OCIE0) | (1 << OCIE2);
 18c:	87 b7       	in	r24, 0x37	; 55
 18e:	82 68       	ori	r24, 0x82	; 130
 190:	87 bf       	out	0x37, r24	; 55
	TCCR0 |= (1 << WGM01) | (1 << CS02);
 192:	83 b7       	in	r24, 0x33	; 51
 194:	8c 60       	ori	r24, 0x0C	; 12
 196:	83 bf       	out	0x33, r24	; 51
	TCCR2 |= (1 << WGM21) | (1 << CS22);
 198:	85 b5       	in	r24, 0x25	; 37
 19a:	8c 60       	ori	r24, 0x0C	; 12
 19c:	85 bd       	out	0x25, r24	; 37
	OCR0 = 249;
 19e:	89 ef       	ldi	r24, 0xF9	; 249
 1a0:	81 bf       	out	0x31, r24	; 49
	OCR2 = 249;
 1a2:	83 bd       	out	0x23, r24	; 35
	
	sei();
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <displayFND>:
}
void displayFND(unit8_t pos)
{
	switch(pos)
 1a8:	82 30       	cpi	r24, 0x02	; 2
 1aa:	f1 f0       	breq	.+60     	; 0x1e8 <displayFND+0x40>
 1ac:	18 f4       	brcc	.+6      	; 0x1b4 <displayFND+0xc>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	39 f0       	breq	.+14     	; 0x1c0 <displayFND+0x18>
 1b2:	08 95       	ret
 1b4:	84 30       	cpi	r24, 0x04	; 4
 1b6:	89 f1       	breq	.+98     	; 0x21a <displayFND+0x72>
 1b8:	88 30       	cpi	r24, 0x08	; 8
 1ba:	09 f4       	brne	.+2      	; 0x1be <displayFND+0x16>
 1bc:	47 c0       	rjmp	.+142    	; 0x24c <displayFND+0xa4>
 1be:	08 95       	ret
	{
		case 1: // FND 0
			PORTA = ~fndPattern[fndNum % 10];
 1c0:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <fndNum>
 1c4:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <fndNum+0x1>
 1c8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <fndNum+0x2>
 1cc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <fndNum+0x3>
 1d0:	2a e0       	ldi	r18, 0x0A	; 10
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	55 d0       	rcall	.+170    	; 0x284 <__udivmodsi4>
 1da:	fb 01       	movw	r30, r22
 1dc:	ef 5f       	subi	r30, 0xFF	; 255
 1de:	fe 4f       	sbci	r31, 0xFE	; 254
 1e0:	80 81       	ld	r24, Z
 1e2:	80 95       	com	r24
 1e4:	8b bb       	out	0x1b, r24	; 27
			break;
 1e6:	08 95       	ret
		case 2: // FND 1
			PORTA = ~fndPattern[(fndNum % 100) / 10];
 1e8:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <fndNum>
 1ec:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <fndNum+0x1>
 1f0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <fndNum+0x2>
 1f4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <fndNum+0x3>
 1f8:	24 e6       	ldi	r18, 0x64	; 100
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	41 d0       	rcall	.+130    	; 0x284 <__udivmodsi4>
 202:	2a e0       	ldi	r18, 0x0A	; 10
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	50 e0       	ldi	r21, 0x00	; 0
 20a:	3c d0       	rcall	.+120    	; 0x284 <__udivmodsi4>
 20c:	f9 01       	movw	r30, r18
 20e:	ef 5f       	subi	r30, 0xFF	; 255
 210:	fe 4f       	sbci	r31, 0xFE	; 254
 212:	80 81       	ld	r24, Z
 214:	80 95       	com	r24
 216:	8b bb       	out	0x1b, r24	; 27
			break;
 218:	08 95       	ret
		case 4: // FND 2
			PORTA = ~fndPattern[(fndNum % 1000) / 100];
 21a:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <fndNum>
 21e:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <fndNum+0x1>
 222:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <fndNum+0x2>
 226:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <fndNum+0x3>
 22a:	28 ee       	ldi	r18, 0xE8	; 232
 22c:	33 e0       	ldi	r19, 0x03	; 3
 22e:	40 e0       	ldi	r20, 0x00	; 0
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	28 d0       	rcall	.+80     	; 0x284 <__udivmodsi4>
 234:	24 e6       	ldi	r18, 0x64	; 100
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	23 d0       	rcall	.+70     	; 0x284 <__udivmodsi4>
 23e:	f9 01       	movw	r30, r18
 240:	ef 5f       	subi	r30, 0xFF	; 255
 242:	fe 4f       	sbci	r31, 0xFE	; 254
 244:	80 81       	ld	r24, Z
 246:	80 95       	com	r24
 248:	8b bb       	out	0x1b, r24	; 27
			break;
 24a:	08 95       	ret
		case 8: // FND 3
			PORTA = ~fndPattern[(fndNum / 1000)];
 24c:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <fndNum>
 250:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <fndNum+0x1>
 254:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <fndNum+0x2>
 258:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <fndNum+0x3>
 25c:	28 ee       	ldi	r18, 0xE8	; 232
 25e:	33 e0       	ldi	r19, 0x03	; 3
 260:	40 e0       	ldi	r20, 0x00	; 0
 262:	50 e0       	ldi	r21, 0x00	; 0
 264:	0f d0       	rcall	.+30     	; 0x284 <__udivmodsi4>
 266:	f9 01       	movw	r30, r18
 268:	ef 5f       	subi	r30, 0xFF	; 255
 26a:	fe 4f       	sbci	r31, 0xFE	; 254
 26c:	80 81       	ld	r24, Z
 26e:	80 95       	com	r24
 270:	8b bb       	out	0x1b, r24	; 27
 272:	08 95       	ret

00000274 <main>:
	}
}

void main(void)
{
	INIT();
 274:	88 df       	rcall	.-240    	; 0x186 <INIT>
	while (1)
	{
		PORTC = fndPosition;
 276:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 27a:	85 bb       	out	0x15, r24	; 21
		displayFND(fndPosition);
 27c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 280:	93 df       	rcall	.-218    	; 0x1a8 <displayFND>
 282:	f9 cf       	rjmp	.-14     	; 0x276 <main+0x2>

00000284 <__udivmodsi4>:
 284:	a1 e2       	ldi	r26, 0x21	; 33
 286:	1a 2e       	mov	r1, r26
 288:	aa 1b       	sub	r26, r26
 28a:	bb 1b       	sub	r27, r27
 28c:	fd 01       	movw	r30, r26
 28e:	0d c0       	rjmp	.+26     	; 0x2aa <__udivmodsi4_ep>

00000290 <__udivmodsi4_loop>:
 290:	aa 1f       	adc	r26, r26
 292:	bb 1f       	adc	r27, r27
 294:	ee 1f       	adc	r30, r30
 296:	ff 1f       	adc	r31, r31
 298:	a2 17       	cp	r26, r18
 29a:	b3 07       	cpc	r27, r19
 29c:	e4 07       	cpc	r30, r20
 29e:	f5 07       	cpc	r31, r21
 2a0:	20 f0       	brcs	.+8      	; 0x2aa <__udivmodsi4_ep>
 2a2:	a2 1b       	sub	r26, r18
 2a4:	b3 0b       	sbc	r27, r19
 2a6:	e4 0b       	sbc	r30, r20
 2a8:	f5 0b       	sbc	r31, r21

000002aa <__udivmodsi4_ep>:
 2aa:	66 1f       	adc	r22, r22
 2ac:	77 1f       	adc	r23, r23
 2ae:	88 1f       	adc	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	1a 94       	dec	r1
 2b4:	69 f7       	brne	.-38     	; 0x290 <__udivmodsi4_loop>
 2b6:	60 95       	com	r22
 2b8:	70 95       	com	r23
 2ba:	80 95       	com	r24
 2bc:	90 95       	com	r25
 2be:	9b 01       	movw	r18, r22
 2c0:	ac 01       	movw	r20, r24
 2c2:	bd 01       	movw	r22, r26
 2c4:	cf 01       	movw	r24, r30
 2c6:	08 95       	ret

000002c8 <_exit>:
 2c8:	f8 94       	cli

000002ca <__stop_program>:
 2ca:	ff cf       	rjmp	.-2      	; 0x2ca <__stop_program>
