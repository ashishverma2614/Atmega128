
Question1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000021a  000002ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  000002b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000917  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080f  00000000  00000000  00000c87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032b  00000000  00000000  00001496  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  000017c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000443  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000179  00000000  00000000  00001ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001e64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5d c0       	rjmp	.+186    	; 0xc8 <__vector_3>
   e:	00 00       	nop
  10:	67 c0       	rjmp	.+206    	; 0xe0 <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	70 c0       	rjmp	.+224    	; 0xfe <__vector_7>
  1e:	00 00       	nop
  20:	8a c0       	rjmp	.+276    	; 0x136 <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	8b c0       	rjmp	.+278    	; 0x154 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e1       	ldi	r30, 0x1A	; 26
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 30       	cpi	r26, 0x03	; 3
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a7 d0       	rcall	.+334    	; 0x212 <main>
  c4:	a8 c0       	rjmp	.+336    	; 0x216 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_3>:
volatile unit8_t cnt;
void INIT(void);


ISR(INT2_vect) // LSB to MSB
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
	btnDir = 0;
  d2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <btnDir>
}
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <__vector_4>:

ISR(INT3_vect) // MSB to LSB
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	8f 93       	push	r24
	btnDir = 1;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <btnDir>
}
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__vector_7>:

ISR(INT6_vect) // toggle blinking direction
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
	btnDir = (btnDir + 1) % 2;
 10c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <btnDir>
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	81 70       	andi	r24, 0x01	; 1
 116:	90 78       	andi	r25, 0x80	; 128
 118:	99 23       	and	r25, r25
 11a:	24 f4       	brge	.+8      	; 0x124 <__vector_7+0x26>
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	8e 6f       	ori	r24, 0xFE	; 254
 120:	9f 6f       	ori	r25, 0xFF	; 255
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <btnDir>
}
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <__vector_8>:

ISR(INT7_vect) // stop led
{
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
	btnDir = 2;
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <btnDir>
}
 148:	8f 91       	pop	r24
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <__vector_15>:

ISR(TIMER0_COMP_vect)
{
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	2f 93       	push	r18
 160:	3f 93       	push	r19
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
	cnt++;
 166:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 16a:	8f 5f       	subi	r24, 0xFF	; 255
 16c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	TCNT0 = 0x00; // use CTC instead
 170:	12 be       	out	0x32, r1	; 50
	if (cnt == 100)
 172:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 176:	84 36       	cpi	r24, 0x64	; 100
 178:	31 f5       	brne	.+76     	; 0x1c6 <__vector_15+0x72>
	{
		if (btnDir == 0)
 17a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <btnDir>
 17e:	81 11       	cpse	r24, r1
 180:	0e c0       	rjmp	.+28     	; 0x19e <__vector_15+0x4a>
		{
			unit8_t rightPattern = (ledPattern >> 1) | (ledPattern << 7);
 182:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 186:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 18a:	28 2f       	mov	r18, r24
 18c:	26 95       	lsr	r18
 18e:	30 e8       	ldi	r19, 0x80	; 128
 190:	93 9f       	mul	r25, r19
 192:	c0 01       	movw	r24, r0
 194:	11 24       	eor	r1, r1
 196:	82 2b       	or	r24, r18
			ledPattern = rightPattern;
 198:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 19c:	0f c0       	rjmp	.+30     	; 0x1bc <__vector_15+0x68>
		}
			
		else if (btnDir == 1)
 19e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <btnDir>
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	59 f4       	brne	.+22     	; 0x1bc <__vector_15+0x68>
		{
			unit8_t leftPattern = (ledPattern << 1) | (ledPattern >> 7);
 1a6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 1aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ae:	99 0f       	add	r25, r25
 1b0:	88 1f       	adc	r24, r24
 1b2:	88 27       	eor	r24, r24
 1b4:	88 1f       	adc	r24, r24
 1b6:	89 2b       	or	r24, r25
			ledPattern = leftPattern;
 1b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		}
			
		PORTB = ledPattern;
 1bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1c0:	88 bb       	out	0x18, r24	; 24
		cnt = 0;
 1c2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	}
}
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <INIT>:
}

void INIT(void)
{
	// led setting
	DDRB = 0xFF;
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	87 bb       	out	0x17, r24	; 23
	// SW[1:4], internal pull-up
	DDRD = 0x00;
 1dc:	11 ba       	out	0x11, r1	; 17
	DDRE = 0x00;
 1de:	12 b8       	out	0x02, r1	; 2
	PORTD = 0x08;
 1e0:	88 e0       	ldi	r24, 0x08	; 8
 1e2:	82 bb       	out	0x12, r24	; 18
	PORTE = 0x80;
 1e4:	80 e8       	ldi	r24, 0x80	; 128
 1e6:	83 b9       	out	0x03, r24	; 3
	
	// Ext. INT. 2, 3, 6, 7(falling edge detection)
	EIMSK |= (1 << INT7) | (1 << INT6) | (1 << INT3) | (1 << INT2);
 1e8:	89 b7       	in	r24, 0x39	; 57
 1ea:	8c 6c       	ori	r24, 0xCC	; 204
 1ec:	89 bf       	out	0x39, r24	; 57
	EICRA |= (1 << ISC31) | (1 << ISC21);
 1ee:	ea e6       	ldi	r30, 0x6A	; 106
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	80 6a       	ori	r24, 0xA0	; 160
 1f6:	80 83       	st	Z, r24
	EICRB |= (1 << ISC61) | (1 << ISC71);
 1f8:	8a b7       	in	r24, 0x3a	; 58
 1fa:	80 6a       	ori	r24, 0xA0	; 160
 1fc:	8a bf       	out	0x3a, r24	; 58
	
	// timer0 INT, pre-scaler ratio 64
	TIMSK |= (1 << OCIE0);
 1fe:	87 b7       	in	r24, 0x37	; 55
 200:	82 60       	ori	r24, 0x02	; 2
 202:	87 bf       	out	0x37, r24	; 55
	TCCR0 |= (1 << CS02);
 204:	83 b7       	in	r24, 0x33	; 51
 206:	84 60       	ori	r24, 0x04	; 4
 208:	83 bf       	out	0x33, r24	; 51
	OCR0 = 249;
 20a:	89 ef       	ldi	r24, 0xF9	; 249
 20c:	81 bf       	out	0x31, r24	; 49
	
	sei(); // GLB. INT. enable
 20e:	78 94       	sei
 210:	08 95       	ret

00000212 <main>:



void main(void)
{
	INIT();
 212:	e2 df       	rcall	.-60     	; 0x1d8 <INIT>
 214:	ff cf       	rjmp	.-2      	; 0x214 <main+0x2>

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>
