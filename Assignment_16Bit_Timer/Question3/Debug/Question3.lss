
Question3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000368  000003fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000368  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010c  0080010c  00000408  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000949  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f5  00000000  00000000  00000e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036d  00000000  00000000  0000160e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  0000197c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000454  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020d  00000000  00000000  00001ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000020f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5d c0       	rjmp	.+186    	; 0xc8 <__vector_3>
   e:	00 00       	nop
  10:	91 c0       	rjmp	.+290    	; 0x134 <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b0 c0       	rjmp	.+352    	; 0x17e <__vector_7>
  1e:	00 00       	nop
  20:	c0 c0       	rjmp	.+384    	; 0x1a2 <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	d6 c0       	rjmp	.+428    	; 0x1de <__vector_12>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e6       	ldi	r30, 0x68	; 104
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 31       	cpi	r26, 0x11	; 17
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	26 d1       	rcall	.+588    	; 0x310 <main>
  c4:	4f c1       	rjmp	.+670    	; 0x364 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_3>:
unit8_t fndPosition = 0x01;
unit32_t fndNum = 0;
unit8_t cnt1; // for timer1

ISR(INT2_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	af 93       	push	r26
  da:	bf 93       	push	r27
	if (fndNum == 10000)
  dc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
  e0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
  e4:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <__data_end+0x2>
  e8:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <__data_end+0x3>
  ec:	80 31       	cpi	r24, 0x10	; 16
  ee:	27 e2       	ldi	r18, 0x27	; 39
  f0:	92 07       	cpc	r25, r18
  f2:	a1 05       	cpc	r26, r1
  f4:	b1 05       	cpc	r27, r1
  f6:	49 f4       	brne	.+18     	; 0x10a <__vector_3+0x42>
		fndNum = 0;
  f8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
  fc:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
 100:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end+0x2>
 104:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x3>
 108:	0b c0       	rjmp	.+22     	; 0x120 <__vector_3+0x58>
	else
		fndNum++;
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	a1 1d       	adc	r26, r1
 10e:	b1 1d       	adc	r27, r1
 110:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 114:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 118:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_end+0x2>
 11c:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_end+0x3>
}
 120:	bf 91       	pop	r27
 122:	af 91       	pop	r26
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	2f 91       	pop	r18
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <__vector_4>:
ISR(INT3_vect)
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
	if (fndNum < 0)
		fndNum = 9999;
	else
		fndNum--;
 146:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 14a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 14e:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <__data_end+0x2>
 152:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <__data_end+0x3>
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	a1 09       	sbc	r26, r1
 15a:	b1 09       	sbc	r27, r1
 15c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 160:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 164:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_end+0x2>
 168:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_end+0x3>
}
 16c:	bf 91       	pop	r27
 16e:	af 91       	pop	r26
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <__vector_7>:
ISR(INT6_vect)
{
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
	fndNum = 0;
 188:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 18c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
 190:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end+0x2>
 194:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x3>
}
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <__vector_8>:
ISR(INT7_vect)
{
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	af 93       	push	r26
 1b2:	bf 93       	push	r27
	fndNum = 9999;
 1b4:	8f e0       	ldi	r24, 0x0F	; 15
 1b6:	97 e2       	ldi	r25, 0x27	; 39
 1b8:	a0 e0       	ldi	r26, 0x00	; 0
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 1c0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 1c4:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_end+0x2>
 1c8:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_end+0x3>
}
 1cc:	bf 91       	pop	r27
 1ce:	af 91       	pop	r26
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <__vector_12>:

ISR(TIMER1_COMPA_vect) // 1ms
{
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	8f 93       	push	r24
	++cnt1;
 1ea:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <cnt1>
 1ee:	8f 5f       	subi	r24, 0xFF	; 255
 1f0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <cnt1>
	if (cnt1 == 5) // 5ms
 1f4:	85 30       	cpi	r24, 0x05	; 5
 1f6:	69 f4       	brne	.+26     	; 0x212 <__vector_12+0x34>
	{
		fndPosition <<= 1;
 1f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1fc:	88 0f       	add	r24, r24
		if (fndPosition == 0x10)
 1fe:	80 31       	cpi	r24, 0x10	; 16
 200:	19 f0       	breq	.+6      	; 0x208 <__vector_12+0x2a>
ISR(TIMER1_COMPA_vect) // 1ms
{
	++cnt1;
	if (cnt1 == 5) // 5ms
	{
		fndPosition <<= 1;
 202:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 206:	03 c0       	rjmp	.+6      	; 0x20e <__vector_12+0x30>
		if (fndPosition == 0x10)
			fndPosition = 0x01;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		cnt1 = 0;
 20e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <cnt1>
	}
}
 212:	8f 91       	pop	r24
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <INIT>:
/* Function Implementations */

void INIT(void)
{
	// FND port
	DDRA = 0xFF; // a~g, dot
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF; // fnd[0:3]
 222:	84 bb       	out	0x14, r24	; 20
	
	// timer1 setting: CTC, 64 pre-scaler ratio
	TIMSK = (1 << OCIE1A);
 224:	80 e1       	ldi	r24, 0x10	; 16
 226:	87 bf       	out	0x37, r24	; 55
	TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10);
 228:	8b e0       	ldi	r24, 0x0B	; 11
 22a:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 249;
 22c:	89 ef       	ldi	r24, 0xF9	; 249
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	9b bd       	out	0x2b, r25	; 43
 232:	8a bd       	out	0x2a, r24	; 42
	
	// Ext. INT. 2, 3, 6, 7(falling edge detection)
	EIMSK = (1 << INT7) | (1 << INT6) | (1 << INT3) | (1 << INT2);
 234:	8c ec       	ldi	r24, 0xCC	; 204
 236:	89 bf       	out	0x39, r24	; 57
	EICRA = (1 << ISC31) | (1 << ISC21);
 238:	80 ea       	ldi	r24, 0xA0	; 160
 23a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB = (1 << ISC61) | (1 << ISC71);
 23e:	8a bf       	out	0x3a, r24	; 58
	
	sei();
 240:	78 94       	sei
 242:	08 95       	ret

00000244 <displayFND>:
}
void displayFND(unit8_t pos)
{
	switch(pos)
 244:	82 30       	cpi	r24, 0x02	; 2
 246:	f1 f0       	breq	.+60     	; 0x284 <displayFND+0x40>
 248:	18 f4       	brcc	.+6      	; 0x250 <displayFND+0xc>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	39 f0       	breq	.+14     	; 0x25c <displayFND+0x18>
 24e:	08 95       	ret
 250:	84 30       	cpi	r24, 0x04	; 4
 252:	89 f1       	breq	.+98     	; 0x2b6 <displayFND+0x72>
 254:	88 30       	cpi	r24, 0x08	; 8
 256:	09 f4       	brne	.+2      	; 0x25a <displayFND+0x16>
 258:	47 c0       	rjmp	.+142    	; 0x2e8 <displayFND+0xa4>
 25a:	08 95       	ret
	{
		case 1: // FND 0
			PORTA = ~fndPattern[fndNum % 10];
 25c:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <__data_end>
 260:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <__data_end+0x1>
 264:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end+0x2>
 268:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x3>
 26c:	2a e0       	ldi	r18, 0x0A	; 10
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	50 e0       	ldi	r21, 0x00	; 0
 274:	55 d0       	rcall	.+170    	; 0x320 <__udivmodsi4>
 276:	fb 01       	movw	r30, r22
 278:	ef 5f       	subi	r30, 0xFF	; 255
 27a:	fe 4f       	sbci	r31, 0xFE	; 254
 27c:	80 81       	ld	r24, Z
 27e:	80 95       	com	r24
 280:	8b bb       	out	0x1b, r24	; 27
			break;
 282:	08 95       	ret
		case 2: // FND 1
			PORTA = ~fndPattern[(fndNum % 100) / 10];
 284:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <__data_end>
 288:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <__data_end+0x1>
 28c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end+0x2>
 290:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x3>
 294:	24 e6       	ldi	r18, 0x64	; 100
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	50 e0       	ldi	r21, 0x00	; 0
 29c:	41 d0       	rcall	.+130    	; 0x320 <__udivmodsi4>
 29e:	2a e0       	ldi	r18, 0x0A	; 10
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	50 e0       	ldi	r21, 0x00	; 0
 2a6:	3c d0       	rcall	.+120    	; 0x320 <__udivmodsi4>
 2a8:	f9 01       	movw	r30, r18
 2aa:	ef 5f       	subi	r30, 0xFF	; 255
 2ac:	fe 4f       	sbci	r31, 0xFE	; 254
 2ae:	80 81       	ld	r24, Z
 2b0:	80 95       	com	r24
 2b2:	8b bb       	out	0x1b, r24	; 27
			break;
 2b4:	08 95       	ret
		case 4: // FND 2
			PORTA = ~fndPattern[(fndNum % 1000) / 100];
 2b6:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <__data_end>
 2ba:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <__data_end+0x1>
 2be:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end+0x2>
 2c2:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x3>
 2c6:	28 ee       	ldi	r18, 0xE8	; 232
 2c8:	33 e0       	ldi	r19, 0x03	; 3
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	50 e0       	ldi	r21, 0x00	; 0
 2ce:	28 d0       	rcall	.+80     	; 0x320 <__udivmodsi4>
 2d0:	24 e6       	ldi	r18, 0x64	; 100
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	40 e0       	ldi	r20, 0x00	; 0
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	23 d0       	rcall	.+70     	; 0x320 <__udivmodsi4>
 2da:	f9 01       	movw	r30, r18
 2dc:	ef 5f       	subi	r30, 0xFF	; 255
 2de:	fe 4f       	sbci	r31, 0xFE	; 254
 2e0:	80 81       	ld	r24, Z
 2e2:	80 95       	com	r24
 2e4:	8b bb       	out	0x1b, r24	; 27
			break;
 2e6:	08 95       	ret
		case 8: // FND 3
			PORTA = ~fndPattern[(fndNum / 1000)];
 2e8:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <__data_end>
 2ec:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <__data_end+0x1>
 2f0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end+0x2>
 2f4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x3>
 2f8:	28 ee       	ldi	r18, 0xE8	; 232
 2fa:	33 e0       	ldi	r19, 0x03	; 3
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	50 e0       	ldi	r21, 0x00	; 0
 300:	0f d0       	rcall	.+30     	; 0x320 <__udivmodsi4>
 302:	f9 01       	movw	r30, r18
 304:	ef 5f       	subi	r30, 0xFF	; 255
 306:	fe 4f       	sbci	r31, 0xFE	; 254
 308:	80 81       	ld	r24, Z
 30a:	80 95       	com	r24
 30c:	8b bb       	out	0x1b, r24	; 27
 30e:	08 95       	ret

00000310 <main>:
	}
}

void main(void)
{
	INIT();
 310:	86 df       	rcall	.-244    	; 0x21e <INIT>
	while (1)
	{
		PORTC = fndPosition;
 312:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 316:	85 bb       	out	0x15, r24	; 21
		displayFND(fndPosition);
 318:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 31c:	93 df       	rcall	.-218    	; 0x244 <displayFND>
 31e:	f9 cf       	rjmp	.-14     	; 0x312 <main+0x2>

00000320 <__udivmodsi4>:
 320:	a1 e2       	ldi	r26, 0x21	; 33
 322:	1a 2e       	mov	r1, r26
 324:	aa 1b       	sub	r26, r26
 326:	bb 1b       	sub	r27, r27
 328:	fd 01       	movw	r30, r26
 32a:	0d c0       	rjmp	.+26     	; 0x346 <__udivmodsi4_ep>

0000032c <__udivmodsi4_loop>:
 32c:	aa 1f       	adc	r26, r26
 32e:	bb 1f       	adc	r27, r27
 330:	ee 1f       	adc	r30, r30
 332:	ff 1f       	adc	r31, r31
 334:	a2 17       	cp	r26, r18
 336:	b3 07       	cpc	r27, r19
 338:	e4 07       	cpc	r30, r20
 33a:	f5 07       	cpc	r31, r21
 33c:	20 f0       	brcs	.+8      	; 0x346 <__udivmodsi4_ep>
 33e:	a2 1b       	sub	r26, r18
 340:	b3 0b       	sbc	r27, r19
 342:	e4 0b       	sbc	r30, r20
 344:	f5 0b       	sbc	r31, r21

00000346 <__udivmodsi4_ep>:
 346:	66 1f       	adc	r22, r22
 348:	77 1f       	adc	r23, r23
 34a:	88 1f       	adc	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	1a 94       	dec	r1
 350:	69 f7       	brne	.-38     	; 0x32c <__udivmodsi4_loop>
 352:	60 95       	com	r22
 354:	70 95       	com	r23
 356:	80 95       	com	r24
 358:	90 95       	com	r25
 35a:	9b 01       	movw	r18, r22
 35c:	ac 01       	movw	r20, r24
 35e:	bd 01       	movw	r22, r26
 360:	cf 01       	movw	r24, r30
 362:	08 95       	ret

00000364 <_exit>:
 364:	f8 94       	cli

00000366 <__stop_program>:
 366:	ff cf       	rjmp	.-2      	; 0x366 <__stop_program>
