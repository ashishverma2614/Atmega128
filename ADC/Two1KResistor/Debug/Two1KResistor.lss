
Two1KResistor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000896  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007dd  00000000  00000000  00000aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000328  00000000  00000000  0000128b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000015b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000407  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000019df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	49 c0       	rjmp	.+146    	; 0x12e <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

int main(void)
{
	static unsigned int ad_val;
	// port setting
	DDRB = 0xFF; // led port
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	87 bb       	out	0x17, r24	; 23

	// ADC setting
	ADMUX = 0x41; // 0x41
  a2:	81 e4       	ldi	r24, 0x41	; 65
  a4:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0x87; // 0x87;
  a6:	87 e8       	ldi	r24, 0x87	; 135
  a8:	86 b9       	out	0x06, r24	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	8f e1       	ldi	r24, 0x1F	; 31
  ac:	9e e4       	ldi	r25, 0x4E	; 78
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x10>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x16>
  b4:	00 00       	nop
	_delay_ms(5);

    while (1) 
    {
		ADCSRA = 0xC7; // 0xC7
  b6:	37 ec       	ldi	r19, 0xC7	; 199
		else if (ad_val <= 768)
			PORTB = 0x20;
		else if (ad_val <= 896)
			PORTB = 0x40;
		else
			PORTB = 0x80;
  b8:	b0 e8       	ldi	r27, 0x80	; 128
		else if (ad_val <= 640)
			PORTB = 0x10;
		else if (ad_val <= 768)
			PORTB = 0x20;
		else if (ad_val <= 896)
			PORTB = 0x40;
  ba:	a0 e4       	ldi	r26, 0x40	; 64
		else if (ad_val <= 512)
			PORTB = 0x08;
		else if (ad_val <= 640)
			PORTB = 0x10;
		else if (ad_val <= 768)
			PORTB = 0x20;
  bc:	f0 e2       	ldi	r31, 0x20	; 32
		else if (ad_val <= 384)
			PORTB = 0x04;
		else if (ad_val <= 512)
			PORTB = 0x08;
		else if (ad_val <= 640)
			PORTB = 0x10;
  be:	e0 e1       	ldi	r30, 0x10	; 16
		else if (ad_val <= 256)
			PORTB = 0x02;
		else if (ad_val <= 384)
			PORTB = 0x04;
		else if (ad_val <= 512)
			PORTB = 0x08;
  c0:	78 e0       	ldi	r23, 0x08	; 8
		if (ad_val <= 128)
			PORTB = 0x01;
		else if (ad_val <= 256)
			PORTB = 0x02;
		else if (ad_val <= 384)
			PORTB = 0x04;
  c2:	64 e0       	ldi	r22, 0x04	; 4
		ad_val = (int)(ADCL) + ((int)(ADCH << 8));

		if (ad_val <= 128)
			PORTB = 0x01;
		else if (ad_val <= 256)
			PORTB = 0x02;
  c4:	52 e0       	ldi	r21, 0x02	; 2
		ADCSRA = 0xC7; // 0xC7
		while ((ADCSRA & 0x40) == 1); // 쓰고 있는 중에는 대기
		ad_val = (int)(ADCL) + ((int)(ADCH << 8));

		if (ad_val <= 128)
			PORTB = 0x01;
  c6:	41 e0       	ldi	r20, 0x01	; 1
	ADCSRA = 0x87; // 0x87;
	_delay_ms(5);

    while (1) 
    {
		ADCSRA = 0xC7; // 0xC7
  c8:	36 b9       	out	0x06, r19	; 6
		while ((ADCSRA & 0x40) == 1); // 쓰고 있는 중에는 대기
  ca:	86 b1       	in	r24, 0x06	; 6
		ad_val = (int)(ADCL) + ((int)(ADCH << 8));
  cc:	24 b1       	in	r18, 0x04	; 4
  ce:	85 b1       	in	r24, 0x05	; 5
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	98 2f       	mov	r25, r24
  d4:	88 27       	eor	r24, r24
  d6:	82 0f       	add	r24, r18
  d8:	91 1d       	adc	r25, r1

		if (ad_val <= 128)
  da:	81 38       	cpi	r24, 0x81	; 129
  dc:	91 05       	cpc	r25, r1
  de:	10 f4       	brcc	.+4      	; 0xe4 <main+0x46>
			PORTB = 0x01;
  e0:	48 bb       	out	0x18, r20	; 24
  e2:	f2 cf       	rjmp	.-28     	; 0xc8 <main+0x2a>
		else if (ad_val <= 256)
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	92 07       	cpc	r25, r18
  ea:	10 f4       	brcc	.+4      	; 0xf0 <main+0x52>
			PORTB = 0x02;
  ec:	58 bb       	out	0x18, r21	; 24
  ee:	ec cf       	rjmp	.-40     	; 0xc8 <main+0x2a>
		else if (ad_val <= 384)
  f0:	81 38       	cpi	r24, 0x81	; 129
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	92 07       	cpc	r25, r18
  f6:	10 f4       	brcc	.+4      	; 0xfc <main+0x5e>
			PORTB = 0x04;
  f8:	68 bb       	out	0x18, r22	; 24
  fa:	e6 cf       	rjmp	.-52     	; 0xc8 <main+0x2a>
		else if (ad_val <= 512)
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	22 e0       	ldi	r18, 0x02	; 2
 100:	92 07       	cpc	r25, r18
 102:	10 f4       	brcc	.+4      	; 0x108 <main+0x6a>
			PORTB = 0x08;
 104:	78 bb       	out	0x18, r23	; 24
 106:	e0 cf       	rjmp	.-64     	; 0xc8 <main+0x2a>
		else if (ad_val <= 640)
 108:	81 38       	cpi	r24, 0x81	; 129
 10a:	22 e0       	ldi	r18, 0x02	; 2
 10c:	92 07       	cpc	r25, r18
 10e:	10 f4       	brcc	.+4      	; 0x114 <main+0x76>
			PORTB = 0x10;
 110:	e8 bb       	out	0x18, r30	; 24
 112:	da cf       	rjmp	.-76     	; 0xc8 <main+0x2a>
		else if (ad_val <= 768)
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	23 e0       	ldi	r18, 0x03	; 3
 118:	92 07       	cpc	r25, r18
 11a:	10 f4       	brcc	.+4      	; 0x120 <main+0x82>
			PORTB = 0x20;
 11c:	f8 bb       	out	0x18, r31	; 24
 11e:	d4 cf       	rjmp	.-88     	; 0xc8 <main+0x2a>
		else if (ad_val <= 896)
 120:	81 38       	cpi	r24, 0x81	; 129
 122:	93 40       	sbci	r25, 0x03	; 3
 124:	10 f4       	brcc	.+4      	; 0x12a <main+0x8c>
			PORTB = 0x40;
 126:	a8 bb       	out	0x18, r26	; 24
 128:	cf cf       	rjmp	.-98     	; 0xc8 <main+0x2a>
		else
			PORTB = 0x80;
 12a:	b8 bb       	out	0x18, r27	; 24
 12c:	cd cf       	rjmp	.-102    	; 0xc8 <main+0x2a>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
