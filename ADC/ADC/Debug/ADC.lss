
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000152  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ce  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000811  00000000  00000000  00000b32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b8  00000000  00000000  00001343  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000015fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000411  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000020  00000000  00000000  00001a31  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001a51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e5       	ldi	r30, 0x52	; 82
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	4c c0       	rjmp	.+152    	; 0x14e <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:

int main(void)
{
    int ad_val; // to store AD converted value

	DDRA = 0xFF;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
  bc:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x01;
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	85 bb       	out	0x15, r24	; 21

	ADMUX = 0x40; // 0b0100_0000: AVCC enable
  c2:	80 e4       	ldi	r24, 0x40	; 64
  c4:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0x87; // 0b1000_0111: ADC enable, 단일변환모드, 128 pre-scale
  c6:	87 e8       	ldi	r24, 0x87	; 135
  c8:	86 b9       	out	0x06, r24	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	8f e1       	ldi	r24, 0x1F	; 31
  cc:	9e e4       	ldi	r25, 0x4E	; 78
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x16>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x1c>
  d4:	00 00       	nop
	_delay_ms(5); // wait for first conversion

    while (1)
    {
		ADCSRA = 0xC7; // 0b1100_0111, ADSC enable(start conversion)
  d6:	c7 ec       	ldi	r28, 0xC7	; 199
		//while((ADCSRA & 0x10) == 1);
		while((ADCSRA & 0x40) == 1); // ADSC이 변환중에는 1을 유지(대기)
		ad_val = (int)ADCL + ((int)ADCH << 8); // 상위 바이트와 하위 바이트 결합
		PORTA = ~ledPattern[(ad_val / 100)]; // 0-9 까지 값으로 mapping후에 출력
  d8:	24 e6       	ldi	r18, 0x64	; 100
  da:	30 e0       	ldi	r19, 0x00	; 0
	ADCSRA = 0x87; // 0b1000_0111: ADC enable, 단일변환모드, 128 pre-scale
	_delay_ms(5); // wait for first conversion

    while (1)
    {
		ADCSRA = 0xC7; // 0b1100_0111, ADSC enable(start conversion)
  dc:	c6 b9       	out	0x06, r28	; 6
		//while((ADCSRA & 0x10) == 1);
		while((ADCSRA & 0x40) == 1); // ADSC이 변환중에는 1을 유지(대기)
  de:	86 b1       	in	r24, 0x06	; 6
		ad_val = (int)ADCL + ((int)ADCH << 8); // 상위 바이트와 하위 바이트 결합
  e0:	44 b1       	in	r20, 0x04	; 4
  e2:	85 b1       	in	r24, 0x05	; 5
		PORTA = ~ledPattern[(ad_val / 100)]; // 0-9 까지 값으로 mapping후에 출력
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	98 2f       	mov	r25, r24
  e8:	88 27       	eor	r24, r24
  ea:	84 0f       	add	r24, r20
  ec:	91 1d       	adc	r25, r1
  ee:	b9 01       	movw	r22, r18
  f0:	07 d0       	rcall	.+14     	; 0x100 <__divmodhi4>
  f2:	fb 01       	movw	r30, r22
  f4:	e0 50       	subi	r30, 0x00	; 0
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	80 81       	ld	r24, Z
  fa:	80 95       	com	r24
  fc:	8b bb       	out	0x1b, r24	; 27
  fe:	ee cf       	rjmp	.-36     	; 0xdc <main+0x24>

00000100 <__divmodhi4>:
 100:	97 fb       	bst	r25, 7
 102:	07 2e       	mov	r0, r23
 104:	16 f4       	brtc	.+4      	; 0x10a <__divmodhi4+0xa>
 106:	00 94       	com	r0
 108:	06 d0       	rcall	.+12     	; 0x116 <__divmodhi4_neg1>
 10a:	77 fd       	sbrc	r23, 7
 10c:	08 d0       	rcall	.+16     	; 0x11e <__divmodhi4_neg2>
 10e:	0b d0       	rcall	.+22     	; 0x126 <__udivmodhi4>
 110:	07 fc       	sbrc	r0, 7
 112:	05 d0       	rcall	.+10     	; 0x11e <__divmodhi4_neg2>
 114:	3e f4       	brtc	.+14     	; 0x124 <__divmodhi4_exit>

00000116 <__divmodhi4_neg1>:
 116:	90 95       	com	r25
 118:	81 95       	neg	r24
 11a:	9f 4f       	sbci	r25, 0xFF	; 255
 11c:	08 95       	ret

0000011e <__divmodhi4_neg2>:
 11e:	70 95       	com	r23
 120:	61 95       	neg	r22
 122:	7f 4f       	sbci	r23, 0xFF	; 255

00000124 <__divmodhi4_exit>:
 124:	08 95       	ret

00000126 <__udivmodhi4>:
 126:	aa 1b       	sub	r26, r26
 128:	bb 1b       	sub	r27, r27
 12a:	51 e1       	ldi	r21, 0x11	; 17
 12c:	07 c0       	rjmp	.+14     	; 0x13c <__udivmodhi4_ep>

0000012e <__udivmodhi4_loop>:
 12e:	aa 1f       	adc	r26, r26
 130:	bb 1f       	adc	r27, r27
 132:	a6 17       	cp	r26, r22
 134:	b7 07       	cpc	r27, r23
 136:	10 f0       	brcs	.+4      	; 0x13c <__udivmodhi4_ep>
 138:	a6 1b       	sub	r26, r22
 13a:	b7 0b       	sbc	r27, r23

0000013c <__udivmodhi4_ep>:
 13c:	88 1f       	adc	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	5a 95       	dec	r21
 142:	a9 f7       	brne	.-22     	; 0x12e <__udivmodhi4_loop>
 144:	80 95       	com	r24
 146:	90 95       	com	r25
 148:	bc 01       	movw	r22, r24
 14a:	cd 01       	movw	r24, r26
 14c:	08 95       	ret

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
